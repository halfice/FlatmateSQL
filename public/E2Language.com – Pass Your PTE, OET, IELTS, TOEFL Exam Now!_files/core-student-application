/* Minification failed. Returning unminified contents.
(7030,42-43): run-time error JS1195: Expected expression: >
(7032,18-19): run-time error JS1195: Expected expression: )
(7032,33-34): run-time error JS1195: Expected expression: >
(7034,17-18): run-time error JS1002: Syntax error: }
(7037,13-14): run-time error JS1002: Syntax error: }
(7040,9-10): run-time error JS1002: Syntax error: }
(7042,100-101): run-time error JS1004: Expected ';': {
(7046,5-6): run-time error JS1002: Syntax error: }
(7048,30-31): run-time error JS1004: Expected ';': {
(7184,50-51): run-time error JS1195: Expected expression: >
(7184,73-74): run-time error JS1195: Expected expression: )
(7185,68-69): run-time error JS1195: Expected expression: >
(7185,111-112): run-time error JS1195: Expected expression: )
(7373,1-2): run-time error JS1002: Syntax error: }
(8070,31-32): run-time error JS1003: Expected ':': (
(8070,53-54): run-time error JS1100: Expected ',': {
(8083,5-6): run-time error JS1002: Syntax error: }
(8084,43-44): run-time error JS1004: Expected ';': {
(8092,1-2): run-time error JS1002: Syntax error: }
(8950,33-34): run-time error JS1195: Expected expression: >
(8950,35-36): run-time error JS1197: Too many errors. The file might not be a JavaScript file: {
(8946,28-40): run-time error JS1301: End of file encountered before function is properly closed: function (e)
(8951,25-33): run-time error JS1009: Expected '}': document
(8953,22-23): run-time error JS1195: Expected expression: )
(8954,33-34): run-time error JS1195: Expected expression: >
(8954,35-36): run-time error JS1197: Too many errors. The file might not be a JavaScript file: {
 */
(function ($, window) {

    function formValidation() {
        var self = this;

        self.Form.validate({
            rules: {
                OldPassword: {
                    maxlength: 56
                },
                NewPassword: {
                    maxlength: 56
                },
                ConfirmPassword: {
                    minlength: 5,
                    equalTo: "#NewPassword"
                }
            },
            highlight: function (element) {
                $(element).closest('.form-group').addClass('has-error');
            },
            unhighlight: function (element) {
                $(element).closest('.form-group').removeClass('has-error');
            }
        });
    }

    function initEventHandler() {
        var self = this;
        var eventHandler = {
            btnChangePassClick: function () {
                submitForm(
                    '#' + self.Form.attr("id"),
                    self.Form.data('edit-url'),
                    function (data) {
                        if (data.IsSuccess) {
                            showInfoDialog(self.Form.data('saved-message'),
                                function () {
                                    location.href = self.Form.data('redirect-url');
                                });
                        } else {
                            processErrorPostResponse(response);
                            showErrorDialog(response.errorMessage);
                        }
                    });
            }
        };

        $('#btnChangePassword', self.Element)
            .off("click")
            .on("click", eventHandler.btnChangePassClick);
    }

    var accountChangePasswordIndex = function (element) {
        this.Element = element;
        this.Form = $("#changePasswordForm", this.Element);
    };

    accountChangePasswordIndex.prototype = {
        constructor: accountChangePasswordIndex,
        Register: function () {
            var self = this;

            formValidation.call(self);
            initEventHandler.call(self);
        }
    };

    window.AccountChangePasswordIndex = accountChangePasswordIndex;
})(jQuery, window);;
var StudentHomeIndex = function(element) {
    this.Element = element;
    this.Caller = null;
    this.MyCoursePanel = $("#myCoursePanel");
    this.MyProgressPanel = $("#myProgressBodyPanel");
    this.CalendarPanel = $("#calendarPanel", this.Element);
    this.StudentPathwayPanel = $("#studentPathwayPanelSection", this.Element);
    this.LiveClassPanel = $("#liveClassPanel", this.Element);
    this.LiveClassSection = $("#liveClassSection", this.Element);
    this.E2TvSection = $("#e2tv", this.Element);
    this.MoreResouces = $("#moreresources", this.Element);
};

StudentHomeIndex.prototype = {
    constructor: StudentHomeIndex,
    Register: function () {
        var app = this;

        app.GenerateCalendarData();
        app.GetPathwayActivityData();
        app.GenerateAppointment();

        app.OnTabClicked($("#tab-mycourselink", app.Element));
        app.OnTabClicked($("#tab-resourcelink", app.Element));
        app.OnTabClicked($("#tab-e2pluslink", app.Element));
        app.OnTabClicked($("#tab-homelink", app.Element));

        $('a[data-toggle="pill"]').on('shown.bs.tab', function (e) {
            var panelId = $(e.target).attr('id');
            var url = $(e.target).data(url);
            var tabElement = $($(e.target).attr('href'));

            if (panelId === "tab-mycourselink") {
                app.LoadPanel.call(app, url, tabElement, function () {
                    app.MyCoursePanel = $("#myCoursePanel", app.Element);
                    app.MyProgressPanel = $("#myProgressBodyPanel", app.Element);
                    app.GetMyCoursePanel();
                    app.GetMyProgress();
                });
            }

            if (panelId === "tab-resourcelink") {
                app.LoadPanel.call(app, url, tabElement, function () {
                    app.E2TvSection = $("#e2tv", app.Element);
                    app.GetE2TvPanel();
                });
            }

            if (panelId === "tab-homelink") {
                app.LoadPanel.call(app, url, tabElement, function () {
                    app.CalendarPanel = $("#calendarPanel", app.Element);
                    app.GenerateCalendarData();
                });
            }
        });

        app.TabIconHandle();
    },
    LoadPanel: function(url, tabElement, onSuccess) {
        var self = this;

        if (tabElement.hasClass("no-data")) {
            self.GenerateTabSection.call(self, {
                Url: url,
                TabElement: tabElement,
                OnSuccess: onSuccess
            });
        }

        if (tabElement.hasClass("reload")) {
            onSuccess.call(self);

            tabElement.removeClass("reload");
        }
    },
    RedirectTo: function (url, menuIdentifier) {

        if (url !== "") {

            $(".nav a").removeClass('active');
            $(".nav a").find("img").each(function () {
                var hoverOutImg = $(this).data("img");
                $(this).attr("src", hoverOutImg);
            });

            $("#" + menuIdentifier).addClass("active");

            if (!$("#" + menuIdentifier).hasClass("orange-highlight")) {
                $("#" + menuIdentifier).find("img").each(function () {
                    var hoverImg = $(this).data("img-hover");
                    $(this).attr("src", hoverImg);
                });
            }

            showLoadingDialog();
            showPartialViewAsync(url)
                .done(function (content) {

                    hideLoadingDialog();
                    $('#mainUserContent').html(content);

                    var helper = new Helper();
                    var namespace = helper.CreateNameSpaceFromURL(url);
                    var apps = new Application($('#mainUserContent'), namespace);
                    apps.Register();

                }).fail(function () {
                    hideLoadingDialog();
            });
            
        }

    },
    OnTabClicked: function (element) {
        var self = this;

        self.ResetTabIcon();
        element.off("click").on("click", function (e) {
            
            var imageEl = $(this).find("img");

            self.ResetTabIcon();
            
            imageEl.attr("src", imageEl.data("active-img"));
        });
    },

    TabIconHandle: function () {

        $(".dashboard-tab-nav li.active").each(function (el) {
            var currentEl = $(this);
            var imageEl = currentEl.find("img");

            imageEl.attr("src", imageEl.data("active-img"));

        });

        $(".dashboard-tab-nav a").hover(function () {
            var imageEl = $(this).find("img");

            imageEl.attr("src", imageEl.data("active-img"));
        }, function () {

            var listEl = $(this).closest("li");

            if (!listEl.hasClass("active")) {
                var imageEl = $(this).find("img");

                imageEl.attr("src", imageEl.data("inactive-img"));
            }

        });

    },

    ResetTabIcon: function () {
        $(".dashboard-tab-nav li").each(function (el) {
            var currentEl = $(this);
            var imageEl = currentEl.find("img");

            imageEl.attr("src", imageEl.data("inactive-img"));

        });
    },

    GenerateTabSection: function (options) {
        var self = this;

        $.get(options.Url, function (content) {
            options.TabElement.html(content);
            options.TabElement.removeClass("no-data");

            if (typeof options.OnSuccess === 'function') {
                options.OnSuccess();
            }
        });
    },
    GenerateCalendarData: function () {
        var app = this;

        if (app.CalendarPanel.length <= 0) {
            return;
        }

        var date = moment();
        var currentMonth = moment(date, "MM-DD-YYYY").format("MM");
        var currentYear = moment(date, "MM-DD-YYYY").format("YYYY");

        app._initCalendar();

        var url = app.CalendarPanel.data("calendar-data-url");

        app._generateCalendarWidget({
            'currentMonth': currentMonth,
            'currentYear': currentYear
        },
        url,
        function(data) {

            app.CalendarPanel.fullCalendar("addEventSource", data.CalendarDataList);

            if (data.LiveClassDateList.length > 0) {
                app._generateLiveClassPanelTest(data.LiveClassDateList, data.LiveClassEventList);
            } else {
                app.LiveClassPanel.html("<i>" + app.LiveClassPanel.data("no-data-message") + "</i>");
            }

            $(".fc-button").attr("disabled", false);
            $(".fc-button").removeClass("fc-state-disabled").removeClass("fc-state-hover");
            removeLoader();

        },
        function (data) {

            $(".fc-button").attr("disabled", false);
            $(".fc-button").removeClass("fc-state-disabled").removeClass("fc-state-hover");
            removeLoader();

            if (!data.IsSuccess) {
                if (data.MessageTextArray !== undefined && data.MessageTextArray.length > 0) {
                    app.LiveClassPanel.html('<span class="text-muted"><em>' + data.MessageTextArray[0] + "</em></span>");
                } else {
                    app.LiveClassPanel.html('<span class="text-muted"><em>Failed when fetching current panel. Please ' + app._reloadRequest("live-class") + " to try again...</em></span>");
                }
            } else {
                app.LiveClassPanel.html('<span class="text-muted"><em>Failed when fetching current panel. Please ' + app._reloadRequest("live-class") + " to try again...</em></span>");
            }

            $(".reload-panel-live-class").click(function (e) {
                e.preventDefault();
                app.GenerateCalendarData();
            });
            });
    },    

    ReloadHomeTab: function () {
        var app = this;

        if ($("#tab-home").hasClass("active")) {
            app.GenerateCalendarData()
        } else {
            $("#tab-home").addClass("reload");
        }
    },

    CloseDashboardErrorPane: function() {
        $(document).find("#errorPane").hide();
        $(document).find("#errorPane").empty();
    },

    GetMyCoursePanel: function () {
        var app = this;
        var url = app.MyCoursePanel.data("get-url");

        app.CloseDashboardErrorPane();
        app.MyCoursePanel.html('<span class="icon fa fa-refresh fa-spin"></span> ' + app.MyCoursePanel.data("loading-message"));

        if ($('#freePackageOption').length > 0) {

            $('#freePackageOption').change(function (e) {
                $('.free-package-panel').hide();
                $('#freeSection' + $(this).val()).show();
            });

            var freeUrl = app.MyCoursePanel.data("get-free-url");

            submitDataAsync({}, freeUrl)
                .done(function (data) {
                    app._generateFreeMyCourseData(data);                   
                }).fail(function (data) {

                    if (!data.IsSuccess) {
                        if (data.MessageTextArray !== undefined && data.MessageTextArray.length > 0) {
                            app.MyCoursePanel.html('<span class="text-muted"><em>' + data.MessageTextArray[0] + "</em></span>");
                        } else {
                            app.MyCoursePanel.html('<span class="text-muted"><em>Failed when fetching current panel. Please ' + app._reloadRequest("course") + " to try again...</em></span>");
                        }
                    } else {
                        app.MyCoursePanel.html('<span class="text-muted"><em>Failed when fetching current panel. Please ' + app._reloadRequest("course") + " to try again...</em></span>");
                    }

                    $(".reload-panel-course").click(function (e) {
                        e.preventDefault();
                        app.GetMyCoursePanel();
                    });

                });

            return true;
        }

        submitDataAsync({}, url)
            .done(function (data) {
                app._generateMyCourseData(data);
            }).fail(function (data) {

                if (!data.IsSuccess) {
                    if (data.MessageTextArray !== undefined && data.MessageTextArray.length > 0) {
                        app.MyCoursePanel.html('<span class="text-muted"><em>' + data.MessageTextArray[0] + "</em></span>");
                    } else {
                        app.MyCoursePanel.html('<span class="text-muted"><em>Failed when fetching current panel. Please ' + app._reloadRequest("course") + " to try again...</em></span>");
                    }
                } else {
                    app.MyCoursePanel.html('<span class="text-muted"><em>Failed when fetching current panel. Please ' + app._reloadRequest("course") +" to try again...</em></span>");
                }

                $(".reload-panel-course").click(function (e) {
                    e.preventDefault();
                    app.GetMyCoursePanel();
                });

            });
    },

    GetMyProgress: function () {
        var app = this;
        var url = app.MyProgressPanel.data("get-url");

        app.MyProgressPanel.html('<span class="icon fa fa-refresh fa-spin"></span> ' + app.MyProgressPanel.data("loading-message"));

        submitDataAsync({}, url)
            .done(function (data) {
                
                app.MyProgressPanel.empty();
                app.MyProgressPanel.html('<p class="myProgressBodyPanel-text p-15 text-center"><strong>' + app.MyProgressPanel.data("information-text") +'</strong></p>');

                app._generateMyProgressChart(data.Value);
                app.MyProgressPanel.parent().addClass("p-0");
            }).fail(function (data) {

                $("#flot-pie-chart").html("");
                $(".my-progress-details").html("");

                if (!data.IsSuccess) {
                    if (data.MessageTextArray !== undefined && data.MessageTextArray.length > 0) {
                        app.MyProgressPanel.html('<span class="text-muted"><em>' + data.MessageTextArray[0] + "</em></span>");
                    } else {
                        app.MyProgressPanel.html('<span class="text-muted"><em>Failed when fetching current panel. Please ' + app._reloadRequest("progress") + " to try again...</em></span>");
                    }
                } else {
                    app.MyProgressPanel.html('<span class="text-muted"><em>Failed when fetching current panel. Please ' + app._reloadRequest("progress") +" to try again...</em></span>");
                }

                $(".reload-panel-progress").click(function (e) {
                    e.preventDefault();
                    app.GetMyProgress();
                });

            });
    },

    GetPathwayActivityData: function () {
        var app = this;
        if (app.StudentPathwayPanel.length === 0) { return; }

        var url = app.StudentPathwayPanel.data("activity-url");

        app.StudentPathwayPanel.find("#studentPathwayPanelBody").html('<span class="icon fa fa-refresh fa-spin"></span> ' + app.StudentPathwayPanel.data("loading-message"));

        showPartialViewAsync(url)
            .done(function (content) {

                app.StudentPathwayPanel.find("#studentPathwayPanelBody").html(content);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application(app.StudentPathwayPanel, namespace);
                apps.RegisterWithCaller(app);

            }).fail(function () {
                app.StudentPathwayPanel.find("#studentPathwayPanelBody").html('<span class="text-muted"><em>Failed when fetching current panel. Please ' + app._reloadRequest("pathway-activity") + " to try again...</em></span>");

                $(".reload-panel-pathway-activity").click(function (e) {
                    e.preventDefault();
                    app.GetPathwayActivityData();
                });
            });

    },

    UpdateCurrentWebinarRegistrantStatus: function(webinars) {
        var app = this;

        app._checkRegistrantStatus(webinars);
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    GenerateAppointment: function () {
        var app = this;
        app._generateStudentAppointments();
    },

    SkipUaeNotification: function (url) {

        submitData({}, url, function() {
            return false;
        });
        
    },

    GetE2TvPanel: function() {
        var app = this;
        var url = app.E2TvSection.data("content-url");

        app.E2TvSection.html('<span class="icon fa fa-refresh fa-spin"></span> ' + app.E2TvSection.data("loading-message"));

        showPartialViewAsync(url)
            .done(function (data) {

                app.E2TvSection.html(data);
                app._filterDashboardVideoHandle();

            }).fail(function (data) {

                if (!data.IsSuccess) {
                    if (data.MessageTextArray !== undefined && data.MessageTextArray.length > 0) {
                        app.E2TvSection.html('<span class="text-muted"><em>' + data.MessageTextArray[0] + "</em></span>");
                    } else {
                        app.E2TvSection.html('<span class="text-muted"><em>Failed when fetching current panel. Please ' + app._reloadRequest("e2tv") + " to try again...</em></span>");
                    }
                } else {
                    app.E2TvSection.html('<span class="text-muted"><em>Failed when fetching current panel. Please ' + app._reloadRequest("e2tv") + " to try again...</em></span>");
                }

                $(".reload-panel-e2tv").click(function (e) {
                    e.preventDefault();
                    app.GetE2TvPanel();
                });

            });
    },

    GenerateCalendarEventByMonth: function () {
        var app = this;

        renderLoader(app.CalendarPanel.data("loading-message"));
        app.CalendarPanel.fullCalendar("removeEvents");
        app._setHeaderButtonEnabled(false);

        var date = app.CalendarPanel.fullCalendar("getDate");
        var currentMonth = +(date.format("MM"));
        var currentYear = +(date.format("YYYY"));
        var url = app.CalendarPanel.data("calendar-data-url");

        app._generateCalendarWidget({
            'currentMonth': currentMonth,
            'currentYear': currentYear
        }, url, function (data) {
            app._setHeaderButtonEnabled(true);
            app.CalendarPanel.fullCalendar("addEventSource", data.CalendarDataList);
            removeLoader();
        }, null);  
    },

    _generateFreeMyCourseData: function(data) {
        var app = this;
        if (data.Value.length === 0) {
            $("#myCourseMainPanel").hide();
            return true;
        }

        var panel = '<div class="list-group" id="freeSection"><strong>Please select the dropdown list to compare packages.</strong></div>';
        app.MyCoursePanel.html('<span class="text-muted"><em>Failed when fetching current panel. Please ' + app._reloadRequest("course") + " to try again...</em></span>");
        var examTypeCode = app.MyCoursePanel.data("exam-type-code");
        $.each(data.Value, function(index, row) {
            var packagePanel = app._generateFreeMyCourseDataPanel(row.DashboardPanelList, row.PackageCode, examTypeCode);
            panel += packagePanel;
        });

        app.MyCoursePanel.html(panel);
        $('[data-toggle="tooltip"]').tooltip({
            container: 'body'
        });

        $(".btnUpgradePanel").bind('click', function (e) {
            e.preventDefault();

            $('#upgradeStudentDialog').modal('show');
        });

        app._buttonClickHandle();
        return true;
    },

    _generateFreeMyCourseDataPanel: function (dataList, packageName, examTypeCode) {
        if (packageName === 'Silver' || examTypeCode === 'OET 2.1' && packageName === 'Gold') {
            listGroup = '<div class="list-group free-package-panel" id="freeSection' + packageName + '">';
        } else {
            listGroup = '<div class="list-group free-package-panel" id="freeSection' + packageName + '" style="display: none">';
        }

        $.each(dataList,
            function (index, row) {
                var listItem = '<div class="booking-item">';
                if (row.IsCompleted) {
                    listItem = '<div class="booking-item alert alert-success">';
                }

                var label = '<div class="col-xs-4">' + row.Label + "</div>";
                var textItem1 = '';
                if (row.OnGoingValue !== null) {
                    textItem1 = '<div class="col-xs-4 text-center"><strong>' +
                        row.OnGoingValue +
                        "</strong></a></div>";
                }
                var textItem2 = '<div class="col-xs-4 text-center"><strong>' +
                    row.CompletedValue +
                    "</strong></a></div>";

                listItem += '<div class="row">';
                listItem += label;
                listItem += textItem1;
                listItem += textItem2;
                listItem += "</div></div>";

                listGroup += listItem;
            });

        listGroup += "</div>";

        return listGroup;
    },

    _generateMyCourseData: function (data) {
        var app = this;
        if (data.Value.length === 0) {
            $("#myCourseSection").hide();
            return true;
        }

        var listGroup = '<div class="list-group">';

        $.each(data.Value,
            function (index, row) {
                var listItem = '<div class="booking-item">';
                if (row.IsCompleted) {
                    listItem = '<div class="booking-item alert alert-success">';
                }

                var label = '<div class="col-xs-4">' + row.Label + "</div>";
                var textItem1 = '';
                if (row.OnGoingValue !== null) {
                    textItem1 = '<div class="col-xs-4 text-center"><strong>' +
                        row.OnGoingValue +
                        "</strong></a></div>";
                }
                var textItem2 = '<div class="col-xs-4 text-center"><strong>' +
                    row.CompletedValue +
                    "</strong></a></div>";

                listItem += '<div class="row">';
                listItem += label;
                listItem += textItem1;
                listItem += textItem2;
                listItem += "</div></div>";

                listGroup += listItem;
            });

        listGroup += "</div>";

        app.MyCoursePanel.html(listGroup);
        $('[data-toggle="tooltip"]').tooltip({
            container: 'body'
        });
        
        app._buttonClickHandle();
        return true;
    },

    _generateMyProgressChart: function (dataPanel) {
        var container = $("<div>").attr("class", "skills-container");
        var infoText = $("#myProgressChartDescription").data("information-text");

        var xdata = [];
        var ydata = [];

        $.each(dataPanel.PanelItems,
            function (index, row) {
                var label = row.ChartLabel.split("(");
                xdata.push(label[0]);
                ydata.push(row.Score);

                var skillsItem = $("<div>").attr("class", "t-center");
                var rowDiv = $("<div>");
                var iconDiv = $("<div>");
                var textDiv = $("<div>");
                var iconImg = $("<img>").attr("src", row.LabelIcon);
                var scoreDiv = $("<div>").attr("class", "pdetail");

                scoreDiv.append(row.Score);
                textDiv.append(row.Label).append(scoreDiv);
                iconDiv.append(iconImg);
                rowDiv.append(iconDiv).append(textDiv);
                skillsItem.append(rowDiv);
                container.append(skillsItem);
            });

        Highcharts.chart('myProgressChartWrapper', {
            chart: {
                type: 'column',
                height: '342px',
                style: { "fontFamily": "'Poppins', sans-serif;", "fontSize": "12px" }
            },
            exporting: {
                enabled: false
            },
            title: {
                text: null
            },
            xAxis: {
                categories: xdata
            },
            yAxis: {
                min: 0,
                title: {
                    text: null
                }
            },
            tooltip: {
                formatter: function () {
                    return '<strong>' + this.x + '</strong>: ' + this.y;
                }
            },
            plotOptions: {
                column: {
                    pointPadding: 0.2,
                    borderWidth: 0,
                    color: '#0b62a4'
                }
            },
            credits: {
                enabled: false
            },

            series: [{
                showInLegend: false,
                data: ydata
            }],
            navigation: {
                buttonOptions: {
                    verticalAlign: 'top',
                    y: 0
                }
            }
        });

        $("#myProgressChartDescription")
            .html(container)
            .attr("class", "my-progress-details")
            .append(infoText);
    },

    _reloadRequest: function(panelName) {

        return '<a href="#" class="reload-panel-' + panelName +'">click here</a>';
    },

    _initCalendar: function () {
        var app = this;

        app.CalendarPanel.parent().find("#calendarLoadingSection").hide();
        app.CalendarPanel.parent().addClass("p-0");

        app.CalendarPanel.fullCalendar({
            contentHeight: 475,
            header: {
                left: "title",
                center: '',
                right: "today,prev,next"
            },
            editable: false,
            displayEventTime: false,
            droppable: false, // this allows things to be dropped onto the calendar
            drop: function() {
                // is the "remove after drop" checkbox checked?
                if ($("#drop-remove").is(":checked")) {
                    // if so, remove the element from the "Draggable Events" list
                    $(this).remove();
                }
            },
            eventClick: function(event) {
                var maintenanceDiv;
                var url;
                if (!event.hasOwnProperty("type")) {
                    return false;
                }

                if (event.type === app.CalendarPanel.data("appointment-o3teaching") ||
                    event.type === app.CalendarPanel.data("appointment-posttest") ||
                    event.type === app.CalendarPanel.data("appointment-pretest") ||
                    event.type === app.CalendarPanel.data("appointment-studyplan") ||
                    event.type === app.CalendarPanel.data("appointment-speakingfeedback") ||
                    event.type === app.CalendarPanel.data("appointment-speakingfeedback-ieltsacademic") ||
                    event.type === app.CalendarPanel.data("appointment-speakingfeedback-ieltsgeneral")) {

                    maintenanceDiv = $("#detailAppointmentWrapper");
                    url = app.CalendarPanel.data("detail-appointment-url");
                    url += "?appointmentId=" + event.id;

                    loadApplicationContentWithBackDrop(url,
                        "GET",
                        function (data) {
                            maintenanceDiv.html(data);
                            $("#detailAppointmentDialog").modal();
                        });

                } else if (event.type === app.CalendarPanel.data("webinar")) {

                    app._detailWebinarEvent(event.id);

                } else if (event.type === app.CalendarPanel.data("group-class-constant")) {
                    app._detailGroupClass(event.id);
                }
                
                return false;
            },
            eventRender: function(event, element) {
                if (!event.hasOwnProperty("type")) {
                    return true;
                }

                element.find(".fc-content .fc-title").html(element.find(".fc-content .fc-title").text());

                if (event.type === app.CalendarPanel.data("appointment-o3teaching") ||
                    event.type === app.CalendarPanel.data("appointment-posttest") ||
                    event.type === app.CalendarPanel.data("appointment-pretest") ||
                    event.type === app.CalendarPanel.data("appointment-studyplan") ||
                    event.type === app.CalendarPanel.data("appointment-speakingfeedback") ||
                    event.type === app.CalendarPanel.data("appointment-speakingfeedback-ieltsacademic") ||
                    event.type === app.CalendarPanel.data("appointment-speakingfeedback-ieltsgeneral")) {

                    element.find(".fc-title").prepend("<i class='fa fa-calendar-check-o'></i> ");
                }

                element.tooltipster({
                    content: $(event.header),
                    trigger: "hover",
                    side: "top",
                    theme: "tooltipster-light",
                    delay: 0
                });

                return true;
            },
            eventLimit: true
        });

        renderLoader(app.CalendarPanel.data("loading-message"));
        app._setHeaderButtonEnabled(false);

        app.CalendarPanel.fullCalendar("removeEvents");

        if (app.CalendarPanel.data("free-string").length > 0) {
            app.CalendarPanel.find(".fc-left").append('<button type="button" class="btn-free fc-state-hover status-label-button-free">FREE</button>' +
                '<button type="button" class= "btn-free fc-state-hover status-label-button-paid">PAID</button >');
        }

        $(".fc-prev-button").off("click")
            .on("click",
                function() {
                    renderLoader(app.CalendarPanel.data("loading-message"));
                    app.CalendarPanel.fullCalendar("removeEvents");
                    app.CalendarPanel.fullCalendar("prev");

                    app._setHeaderButtonEnabled(false);

                    setTimeout(function() {
                        var date = app.CalendarPanel.fullCalendar("getDate");
                        var prevMonth = +(date.format("MM"));
                        var prevYear = +(date.format("YYYY"));

                        app.CalendarPanel.fullCalendar("removeEvents");

                        var url = app.CalendarPanel.data("calendar-data-url");

                        app._generateCalendarWidget({
                            'currentMonth': prevMonth,
                            'currentYear': prevYear
                        }, url, function(data) {
                            app._setHeaderButtonEnabled(true);
                            removeLoader();
                            app.CalendarPanel.fullCalendar("addEventSource", data.CalendarDataList);
                            }, null);
                        
                    }, 500);
                });

        $(".fc-next-button").off("click")
            .on("click",
                function() {
                    renderLoader(app.CalendarPanel.data("loading-message"));
                    app.CalendarPanel.fullCalendar("removeEvents");
                    app.CalendarPanel.fullCalendar("next");

                    app._setHeaderButtonEnabled(false);

                    setTimeout(function() {
                        var date = app.CalendarPanel.fullCalendar("getDate");
                        var nextMonth = +(date.format("MM"));
                        var nextYear = +(date.format("YYYY"));

                        app.CalendarPanel.fullCalendar("removeEvents");

                        var url = app.CalendarPanel.data("calendar-data-url");

                        app._generateCalendarWidget({
                            'currentMonth': nextMonth,
                            'currentYear': nextYear
                        }, url, function (data) {
                            app._setHeaderButtonEnabled(true);
                            app.CalendarPanel.fullCalendar("addEventSource", data.CalendarDataList);
                            removeLoader();
                        }, null);
                    }, 500);
                });

        $(".fc-today-button").off("click")
            .on("click",
            function () {

                renderLoader(app.CalendarPanel.data("loading-message"));
                app.CalendarPanel.fullCalendar("removeEvents");
                app.CalendarPanel.fullCalendar("today");

                app._setHeaderButtonEnabled(false);

                setTimeout(function () {
                    var date = app.CalendarPanel.fullCalendar("getDate");
                    var currentMonth = +(date.format("MM"));
                    var currentYear = +(date.format("YYYY"));

                    app.CalendarPanel.fullCalendar("removeEvents");

                    var url = app.CalendarPanel.data("calendar-data-url");

                    app._generateCalendarWidget({
                        'currentMonth': currentMonth,
                        'currentYear': currentYear
                    }, url, function (data) {
                        app._setHeaderButtonEnabled(true);
                        app.CalendarPanel.fullCalendar("addEventSource", data.CalendarDataList);
                        removeLoader();
                    }, null);                    
                }, 500);
            });
    },

    _generateCalendarWidget: function(data, url, successAction, failAction) {
        submitDataAsync(data, url)
            .done(function (data) {

                if (typeof successAction === 'function') {
                    successAction(data);
                }

            }).fail(function (data) {

                if (typeof failAction === 'function') {
                    failAction(data);
                }

            });
    },

    _detailWebinarEvent: function(webinarEventId) {
        var app = this;
        var maintenanceDiv = $("#webinarEventContent");
        var submitUrl = app.CalendarPanel.data("detail-webinar-url");
        submitUrl += "?webinarEventId=" + webinarEventId;

        showMaintenancePane(submitUrl,
            function(content) {
                maintenanceDiv.html(content);
                $("#webinarEventDialog").modal();

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(submitUrl);
                var apps = new Application(maintenanceDiv, namespace);
                apps.RegisterWithCaller(app);

            });

    },

    _detailGroupClass: function (groupClassId) {
        var app = this;
        var maintenanceDiv = $("#groupClassMaintenancePane");
        var submitUrl = app.CalendarPanel.data("detail-group-class-url");
        submitUrl += "?groupClassId=" + groupClassId;

        showMaintenancePane(submitUrl,
            function (content) {
                maintenanceDiv.html(content);
                $("#groupClassDialog").modal();

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(submitUrl);
                var apps = new Application(maintenanceDiv, namespace);
                apps.RegisterWithCaller(app);

            });

    },
    _generateStudentAppointments: function () {
        var appointments = $("#appointmentDateRangeDialog");
        var maintenanceDiv = $("#appointmentDateRangeWrapper");
        var url = appointments.data("url-getdata");

        submitDataAsync({}, url)
            .done(function (data) {
                if (data.Value !== "") {
                    maintenanceDiv.html(data.Value);
                    var wrapperAppointment = appointments.find("[id^='wrapper-appointment-']")[0];
                    $("#appointmentDateRangeTitle").html(wrapperAppointment.dataset["rangetype"]);

                    $("#btnCloseAppointmentDialog").attr("onclick", "").unbind("click");
                    $("#btnCloseAppointmentDialog").on("click",
                        function() {
                            $("#btnCancel-" + wrapperAppointment.id.replace("wrapper-appointment-", "")).click();
                        });
                    $("#appointmentDateRangeDialog").modal();
                }
            }).fail(function () {
                maintenanceDiv.empty();
                $("#appointmentDateRangeDialog").hide();
            });
    },

    _generateLiveClassPanelTest: function (webinarDates, webinarEvents) {
        var app = this;
        var panelGroupDiv = $("<div>").attr("class", "panel-group panel-auto")
            .attr("id", "accordion")
            .attr("role", "tablist")
            .attr("aria-multiselectable", "true");

        $.each(webinarDates, function (index, date) {
            var panelDiv = $("<div>").attr("class", "panel panel-default");
            var panelHeading = $("<div>").attr("class", "panel-heading")
                .attr("role", "tab")
                .attr("id", "date_" + index);
            var panelTitle = $("<h4>").attr("class", "panel-title");
            var panelAnchor = $("<a>").attr("href", "#collapse_" + index)
                .attr("data-parent", "#accordion")
                .attr("data-toggle", "collapse")
                .attr("aria-controls", "collapse_" + index);

            panelAnchor.append(date);
            panelTitle.append(panelAnchor);
            panelHeading.append(panelTitle);
            panelDiv.append(panelHeading);
            panelDiv.append(app._generateEventList(index, date, webinarEvents));
            panelGroupDiv.append(panelDiv);
        });

        app.LiveClassPanel.html(panelGroupDiv);

        $(".registerLink").click(function () {
            var id = $(this).data("id");

            app._detailWebinarEvent(id);
        });
    },
    
    _generateLiveClassPanel: function(data) {
        var app = this;
        var panelGroupDiv = $("<div>").attr("class", "panel-group panel-auto")
            .attr("id", "accordion")
            .attr("role", "tablist")
            .attr("aria-multiselectable", "true");

        $.each(data.WebinarDates, function(index, date) {
            var panelDiv = $("<div>").attr("class", "panel panel-default");
            var panelHeading = $("<div>").attr("class", "panel-heading")
                .attr("role", "tab")
                .attr("id", "date_" + index);
            var panelTitle = $("<h4>").attr("class", "panel-title");
            var panelAnchor = $("<a>").attr("href", "#collapse_" + index)
                .attr("data-parent", "#accordion")
                .attr("data-toggle", "collapse")
                .attr("aria-controls", "collapse_" + index);

            panelAnchor.append(date);
            panelTitle.append(panelAnchor);
            panelHeading.append(panelTitle);
            panelDiv.append(panelHeading);
            panelDiv.append(app._generateEventList(index, date, data.WebinarEvents));
            panelGroupDiv.append(panelDiv);
        });

        app.LiveClassPanel.html(panelGroupDiv);

        $(".registerLink").click(function() {
            var id = $(this).data("id");

            app._detailWebinarEvent(id);
        });
    },

    _generateEventList: function(panelIndex, date, webinarEvents) {

        var collapseDiv = $("<div>").attr("id", "collapse_" + panelIndex)
            .attr("class", "panel-collapse collapse in")
            .attr("role", "tabpanel");

        var panelBodyDiv = $("<div>").attr("class", "panel-body");
        var listGroupDiv = $("<div>").attr("class", "list-group");

        $.each(webinarEvents, function(index, row) {
            if (row.StartDateTime !== date) {
                return;
            }

            var listGroupItemDiv = $("<div>").attr("class", "list-group-item");
            var rowDiv = $("<div>").attr("class", "row");
            var leftColumnDiv = $("<div>").attr("class", "col-xs-8");
            var rightColumnDiv = $("<div>").attr("class", "col-xs-4 text-right");
            var linkAnchor = $("<a>").attr("href", "#").attr("class", "h-anchor registerLink").attr("data-id", row.Id);

            linkAnchor.append("DETAIL");
            rightColumnDiv.append(linkAnchor);
            leftColumnDiv.append(row.Topic);

            rowDiv.append(leftColumnDiv);
            rowDiv.append(rightColumnDiv);

            listGroupItemDiv.append(rowDiv);
            listGroupDiv.append(listGroupItemDiv);
            
        });

        panelBodyDiv.append(listGroupDiv);
        collapseDiv.append(panelBodyDiv);

        return collapseDiv;
    },

    _buttonClickHandle: function () {

        $(".btnBuyMore").click(function (e) {
            e.preventDefault();
            var url = $(this).data("url");

            var onSuccessResponse = function (result) {

                window.location.href = result.Value;

            };

            var onErrorResponse = function (response) {
                showErrorMessageDialog(response);
            };

            advancedSubmitData({}, url, onSuccessResponse, onErrorResponse);

        });

        $("#resetStudyPathway").click(function () {
            $("#reCreateStudyPathWayButton").click();
        });

        $("#webinarDetail").click(function () {
            $(this).tooltip("hide");
            $(".live-classes-menu").click();
        });

        $("#webinarRegister").click(function () {
            $(this).tooltip("hide");
            $(".live-classes-menu").click();
        });

        $("#groupClassRegister").click(function () {
            $(this).tooltip("hide");
            $("#groupClassMenu").click();
        });

    },

    _filterDashboardVideoHandle: function () {
        var app = this;

        $("#DashboardVideoCategory").change(function() {
            var selectedOption = $(this).val();
            var dataSplit = selectedOption.split("__");

            var url = app.E2TvSection.data("change-video-url");
            url += "?videoType=" + dataSplit[0];
            url += "&videoId=" + dataSplit[1];

            app.E2TvSection.find("#tv-content").html('<span class="icon fa fa-refresh fa-spin"></span> ' + app.E2TvSection.data("loading-message"));

            showPartialViewAsync(url)
                .done(function (data) {

                    app.E2TvSection.find("#tv-content").html(data);

                }).fail(function (data) {

                    if (!data.IsSuccess) {
                        if (data.MessageTextArray !== undefined && data.MessageTextArray.length > 0) {
                            app.E2TvSection.html('<span class="text-muted"><em>' + data.MessageTextArray[0] + "</em></span>");
                        } else {
                            app.E2TvSection.html('<span class="text-muted"><em>Failed when fetching current panel. Please ' + app._reloadRequest("e2tv") + " to try again...</em></span>");
                        }
                    } else {
                        app.E2TvSection.html('<span class="text-muted"><em>Failed when fetching current panel. Please ' + app._reloadRequest("e2tv") + " to try again...</em></span>");
                    }

                    $(".reload-panel-e2tv").click(function (e) {
                        e.preventDefault();
                        app.GetE2TvPanel();
                    });

                });

        });
    },
    _setHeaderButtonEnabled: function(isEnabled) {

        $(".fc-button").attr("disabled", !isEnabled);

        if (isEnabled) {
            $(".fc-button").removeClass("fc-state-disabled").removeClass("fc-state-hover");
        } else {
            $(".fc-button").addClass("fc-state-disabled");
        }
    }
}

function generateNextAppointmentDetail(appointmentId, nextAppointmentId, dismissUrl, minuteSpan) {
    var maintenanceDiv = $("#appointmentDateRangeWrapper");

    submitData({
        "appointmentId": appointmentId,
        "minuteSpan": minuteSpan
    }, dismissUrl, function () {
        if (nextAppointmentId === 0) {
            maintenanceDiv.empty();
            $("#appointmentDateRangeDialog").modal("hide");
        }
        else {
            var title = $("#wrapper-appointment-" + nextAppointmentId).data("rangetype");
            $("#appointmentDateRangeTitle").html(title);

            $("#btnCloseAppointmentDialog").attr("onclick", "").unbind("click");
            $("#btnCloseAppointmentDialog").on("click", function() { $("#btnCancel-" + nextAppointmentId).click() });

            $("#appointmentDateRangeDialog").removeClass("fade").modal("hide");
            $("#wrapper-appointment-" + appointmentId).hide();
            $("#wrapper-appointment-" + nextAppointmentId).removeClass("hidden");
            $("#appointmentDateRangeDialog").addClass("fade").modal("show");
        }
        return true;
    });

    
};
(function ($, window) {
    "use strict";

    // Private Methods
    function initGrid() {
        var self = this;
        var grid = self.Grid;

        var eventHandler = {
            gridLoad: function () {
                $('[data-toggle="tooltip"]').tooltip();

                $('.titleLink')
                    .off("click")
                    .on("click", eventHandler.titleLinkClick);

            },
            titleLinkClick: function (e) {
                e.preventDefault();
                showProcessingDialog();

                var url = grid.data("view-url");
                url += '?announcementId=' + $(this).data('message-id');

                var maintenanceDiv = $('#viewMessage');
                $.get(url,
                    function (data) {
                        hideProcessingDialog();
                        maintenanceDiv.html(data);
                        $('html, body').animate({ scrollTop: maintenanceDiv.offset().top - 75 }, 'slow');
                    });
            }
        };

        grid.bootgrid({
            ajax: true,
            post: function () { },
            statusMapping: {
                0: '',
                1: 'warning'
            },
            templates: {
                search: ''
            },
            sorting: false,
            url: grid.data("url"),
            formatters: {
                "Title": function (column, row) {
                    return '<a href="#" class="titleLink" data-message-id="' + row.Id + '">' + row.Title + '</a>';

                }
            }
        })
            .on("loaded.rs.jquery.bootgrid", eventHandler.gridLoad);
    }

    // Constructor
    var studentAnnouncementIndex = function (element) {
        this.Element = element;
        this.Caller = null;
        this.Grid = $("#gridActiveTopic");
    };

    studentAnnouncementIndex.prototype = {
        constructor: studentAnnouncementIndex,
        Register: function () {
            var self = this;
            initGrid.call(self);
        },
        RefreshGrid: function () {
            var self = this;
            self.Grid.bootgrid("reload");
            $("#viewMessage").empty();
        }
    };

    // Export javascript class into window environment
    window.StudentAnnouncementIndex = studentAnnouncementIndex;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    // Private Methods
    function initEventHandler() {
        var eventHandler = {
            closeBtnClick: function (e) {
                e.preventDefault();
                $('#viewMessage').empty();
            }
        };

        $('#closeButton')
            .off("click")
            .on("click", eventHandler.closeBtnClick);
    }

    // Constructor
    var studentAnnouncementView = function (element) {
        this.Element = element;
        this.Caller = null;
    };

    studentAnnouncementView.prototype = {
        constructor: studentAnnouncementView,
        Register: function () {
            var self = this;
            initEventHandler.call(self);
        }
    };

    // Export javascript class into window environment
    window.StudentAnnouncementView = studentAnnouncementView;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    function initButtonEventHandler() {
        var self = this;
        
        var eventHandler = {
            rescheduleBtnClick: function (e) {
                e.preventDefault();

                rescheduleAppointment.call(self);
            },
            cancelAppointmentBtnClick: function (e) {
                e.preventDefault();
                submitDataWithoutLoader({
                    "startDateTime": self.AppointmentDate,
                    "appointmentType": self.Type
                }, self.Form.data("different-url"), function (data) {
                    if (data.IsLessThan24Hour) {
                        showInfoDialog(data.MessageCancel, function () {
                            return;
                        });

                    } else {
                        var url = self.Form.data("cancel-url");
                        url += "?appointmentId=" + self.AppointmentId;

                        submitNonForm(self.Form.data("delete-message"), url, function () {
                            showInformation(self.Form.data("appointment-cancel"));
                            $("#maintenancePane").html("");
                            $("#gridAppointment").bootgrid("reload");
                        });
                    }
                });

            },
            cancelBtnClick: function (e) {
                e.preventDefault();
                $(self.Element).html("");
            },
            showDetailBtnClick: function (e) {
                e.preventDefault();
                var url = $(this).data("url");
                showPopup(url);
            }
        };

        $("#btnReschedule")
            .off("click")
            .on("click", eventHandler.rescheduleBtnClick);

        $("#btnCancelAppointment")
            .off("click")
            .on("click", eventHandler.cancelAppointmentBtnClick);

        $("#cancelButton")
            .off("click")
            .on("click", eventHandler.cancelBtnClick);

        $("#btnCancel")
            .off("click")
            .on("click", eventHandler.cancelBtnClick);

        $("#btnShowDetail")
            .off("click")
            .on("click", eventHandler.showDetailBtnClick);
    }

    function rescheduleAppointment() {
        var self = this;

        submitDataWithoutLoader({
            "startDateTime": self.AppointmentDate,
            "appointmentType": self.Type
        }, self.Form.data("different-url"), function (data) {
            if (data.IsLessThan24Hour) {
                showInfoDialog(data.Message);

            } else {

                var message = self.Form.data("reschedule-message");
                message = message.replace("[DATE TIME]", self.Form.data("appointment-date"));
                message = message.replace("[APPOINTMENT TYPE]", $("#Type").val());

                showConfirmationDialog(message, processReschedule.bind(self));
            }
        });

    }

    function processReschedule() {
        var self = this;

        if (self.Type === self.Form.data("tutorial-code")) {
            checkLatestTutorialAppointment.call(self);
        } else {
            showSchedulerDialog.call(self);
        }
    }

    function checkLatestTutorialAppointment() {
        var self = this;
        var checkUrl = self.Form.data("get-latest-teacher-url");

        checkUrl += "?editedAppointmentId=" + $("#Id", self.Element).val();

        var onSuccessResponse = function (response) {
            if (response.Value.IsAvailable) {

                showYesNoConfirmationDialog(
                    response.Value.ConfirmationMessage,
                    showSchedulerDialog.bind(self, response.Value.TeacherId),
                    showSchedulerDialog.bind(self));

            } else {
                showSchedulerDialog.call(self);
            }
        };

        getDataWithLoaderAsync(checkUrl).done(onSuccessResponse);
    }

    function showSchedulerDialog(choicedTeacherId) {
        var self = this;

        generateEditUrl.call(self, choicedTeacherId);

        loadApplicationContent(self.Url, "GET", function (data) {
            $("#errorPane").remove();
            self.MaintenanceDiv.html(self.Form.data("error-pane"));
            self.MaintenanceDiv.append(data);

            var helper = new Helper();
            var namespace = helper.CreateNameSpaceFromURL(self.Url);
            var apps = new Application(self.MaintenanceDiv, namespace);
            apps.RegisterWithCaller(self);
        });
    }

    function generateEditUrl(choicedTeacherId) {
        var self = this;

        if (self.Type === self.Form.data("tutorial-code")) {
            generateTutorialEditUrl.call(self, choicedTeacherId);

        } else if (self.Type === self.Form.data("study-plan-code")) {
            self.MaintenanceDiv = $("#rescheduleStudyPlanWrapper");
            self.Url = self.Form.data("study-plan-url");

        } else if (self.Type === self.Form.data("pre-test-code")) {
            self.MaintenanceDiv = $("#reschedulePreTestWrapper");
            self.Url = self.Form.data("pre-test-url");

        } else if (self.Type === self.Form.data("post-test-code")) {
            self.MaintenanceDiv = $("#reschedulePostTestWrapper");
            self.Url = self.Form.data("post-test-url");

        } else if (self.Type === self.Form.data("speaking-feedback-code")) {
            self.MaintenanceDiv = $("#rescheduleSpeakingFeedbackWrapper");
            self.Url = self.Form.data("speaking-feedback-url");
            self.Url += "?appointmentId=" + self.AppointmentId;

        }

    }

    function generateTutorialEditUrl(choicedTeacherId) {
        var self = this;

        self.MaintenanceDiv = $("#rescheduleTutorialWrapper");

        if (choicedTeacherId !== null && choicedTeacherId !== undefined) {
            self.Url = self.Form.data("tutorial-with-teacher-url");

            self.Url += "?appointmentId=" + self.AppointmentId;
            self.Url += "&teacherId=" + choicedTeacherId;

        } else {
            self.Url = self.Form.data("tutorial-url");

            self.Url += "?appointmentId=" + self.AppointmentId;

        }

    }

    // Constructor
    var studentAppointmentDetail = function (element) {
        this.Element = element;
        this.Form = $("#maintenanceForm");
        this.Type = $("#TypeCode").val();
        this.AppointmentDate = $("#AppointmentDate").val();
        this.AppointmentId = $("#Id").val();
        this.MaintenanceDiv = null;
        this.Url = null;
        this.Caller = null;
    };
    
    studentAppointmentDetail.prototype = {
        constructor: studentAppointmentDetail,
        Register: function () {

            var self = this;

            $("#Comment").attr("readonly", "readonly");
            
            initButtonEventHandler.call(self);
        },
        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    // Export javascript class into window environment
    window.StudentAppointmentDetail = studentAppointmentDetail;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    var studentAppointmentIndex = function (element) {
        this.Element = element;
        this.Grid = $("#gridAppointment");
        this.Caller = null;
    };

    studentAppointmentIndex.prototype = {
        constructor: studentAppointmentIndex,
        Register: function () {
            var self = this;

            self.LoadGrid(self.Grid);
        },

        LoadGrid: function (grid) {
            var self = this;

            $("#errorPane").hide();
            $("#errorPane").empty();

            grid.bootgrid({
                ajax: true,
                post: function () {
                },
                url: grid.data("url"),
                formatters: {
                    "AppointmentType": function (column, row) {
                        return "<a href=\"#\" class=\"appointmentLink\" id=\"" +
                            row.Id +
                            "\">" +
                            row.Type +
                            "</a>";
                    }
                }
            }).on("loaded.rs.jquery.bootgrid", function () {

                $('[data-toggle="tooltip"]').tooltip();

                $(".appointmentLink").on("click", function (e) {
                    e.preventDefault();
                    showProcessingDialog();

                    var maintenanceDiv = $("#maintenancePane");
                    var url = grid.data("detail-url");
                    url += "?Id=" + $(this).attr("id");

                    loadApplicationContent(url, "GET", function (data) {
                        maintenanceDiv.html(data);

                        var helper = new Helper();
                        var namespace = helper.CreateNameSpaceFromURL(url);
                        var apps = new Application(maintenanceDiv, namespace);
                        apps.RegisterWithCaller(self);

                        $("html, body")
                            .animate({
                                scrollTop:
                                    maintenanceDiv.offset().top - 75
                            }, "slow");

                    });

                });

            });
        },

        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    // Export javascript class into window environment
    window.StudentAppointmentIndex = studentAppointmentIndex;
})(jQuery, window);;
(function ($, window) {
    "use strict";
    
    function back() {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.Form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0 }, "slow");
    }

    function loadWeek() {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.Form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.Form.data("duration-key"),
            'appointmentType': self.Form.data("appointment-type"),
            'startDate': startDate.format(self.Form.data("date-format"))
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.Form, function (data) {
            detailTime.call(self, data);
        });

    }

    function detailTime(date) {
        var self = this;
        var selectedDate = moment(date, self.Form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.Form.data("date-format")),
            'appointmentDurationKey': self.Form.data("duration-key"),
            'appointmentType': self.Form.data("appointment-type")

        }, self.Form.data("time-url"), function (data) {

            $("#headTitle", self.Element).html('');
            $("#timeList", self.Element).html('');
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.Form.data("day-format")) + '</h3>' +
                '<p class="text-muted text-center">' + selectedDate.format(self.Form.data("display-date-format")) + '</p>');

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + ' data-date=' + selectedDate + '>' + item.AvailableTime + '</button>');
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                loadQuestion.call(self, $(this).data("time"), $(this).data("date"));
            });

                $("#backLink", self.Element).on("click", function () {
                    back.call(self);
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

    }

    function loadQuestion(time, date) {
        var self = this;
        var selectDate = moment(date).format(self.Form.data("date-format"));

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#questionView", self.Element).html("");
        $("#questionView", self.Element).show();

        submitDataWithCustomLoader({
            'appointmentType': self.Form.data("appointment-type")
        },
            self.Form.data("question-url"),
            function (data) {

                if (data.HaveQuestion) {

                    $.each(data.Questions,
                        function (qIndex, qItem) {
                            var questionGroup = '<div class="appointment-questions" data-question-id="' + qItem.AppointmentQuestionId + '">';
                            var groupCloseTag = '</div>';

                            var questionContent = qItem.Question.split("[NOTE__");
                            var questionWrapper = '<p> ' + questionContent[0] + '</p>';
                            var questionNote = '';
                            if (questionContent.length > 1) {

                                questionNote = '<p>' + questionContent[1].replace("]", "") + '</p>';
                            }
                            
                            var wrapperTagAnswer;
                            var wrapperCloseTag;
                            var questionType = qItem.QuestionType.split("_");
                            var answerType = createInputField("hidden", "answer-" + qItem.AppointmentQuestionId, questionType[0], "answer-type");

                            questionGroup += answerType;

                            if (questionType[0] === "DROPDOWN") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";

                                var selectTagOpen =
                                    '<select class="form-control" data-val="true" data-val-required="The Answer field is required." id="answer_' + qItem.AppointmentQuestionId + '" name="SelectAnswer_' +
                                        qItem.AppointmentQuestionId +
                                        '" required="required">';
                                var selectTagClose = '</select>';
                                selectTagOpen += '<option value="0" data-answer-id="0" selected>Select Answer...</option>';

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            var optionTag = "<option data-answer-id='" + aItem.Id + "' value='" + aItem.AnswerText + "'>" + aItem.AnswerText + "</option>";
                                            selectTagOpen += optionTag;
                                        }
                                    });

                                wrapperTagAnswer += selectTagOpen + selectTagClose + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "TEXTBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-10">';
                                wrapperCloseTag = "</div></div>";
                                var textBoxInput;

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            textBoxInput = '<textarea rows="5" data-answer-id="' + aItem.Id + '" required="required" class="form-control" id="answer_' + qItem.AppointmentQuestionId + '" name="TextboxAnswer_' + qItem.AppointmentQuestionId + '"></textarea>';
                                        }
                                    });

                                wrapperTagAnswer += textBoxInput + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "CHECKBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";
                                var checkboxFields = "";

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            checkboxFields += '<div class="col-xs-12">' +
                                                '<div class="checkbox" >' +
                                                '<label>' +
                                                '<input class="answer-checkbox" name="checkBoxAnwer[' + aIndex + ']" type="checkbox" value="' + aItem.Id + '">' +
                                                '<span>' + aItem.AnswerText + '</span>' +
                                                '</label>' +
                                                '</div>' +
                                                '</div>';
                                        }
                                    });

                                wrapperTagAnswer += checkboxFields + wrapperCloseTag;
                                questionGroup += questionWrapper + questionNote + wrapperTagAnswer + "<br/>" + questionNote + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                                $(".answer-checkbox").change(function () {

                                    var totalChecked = $('.answer-checkbox:checked').length;
                                    if (totalChecked > questionType[1]) {
                                        showInfoDialog("Please select maximum " + questionType[1] + " option(s)", function () {
                                            backdropModalControl();
                                        });

                                        $(this).prop("checked", false);
                                    }

                                });

                            }

                        });

                    $("#btnSubmit", self.Element).show();

                } else {
                    $("#btnSubmit", self.Element).hide();
                    $("#questionView", self.Element).hide();
                    $("#TimeView", self.Element).removeClass("hidden");

                    makeAppointment.call(self, time, selectDate);
                }

            }, function () {
                // onError
                $("#questionView", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
            }, function () {
                // showProgressDialog
                $("#questionView", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
            }, function () {
                // hideProgressDialog
                clearInnerLoader($("#questionView", self.Element));
            });

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            makeAppointment.call(self, time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    }

    function populateForm(time, selectDate) {
        var self = this;

        $("#errorPane").hide();
        self.Form.html("");
        self.Form.append('<input type="hidden" name="startHour" value="' + time + '" />');
        self.Form.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    self.Form.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    self.Form.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    self.Form.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');

                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    self.Form.append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                self.Form.append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');

            });

        });
    }

    function makeAppointment(time, date) {
        var self = this;
        var selectDate = moment(date).format(self.Form.data("date-format"));
        var templateMessage = self.Form.data("confirm-message");
        var templateDateTime = moment(date).format(self.Form.data("server-date-format")) + " " + moment(time, [self.Form.data("long-time-format")]).format(self.Form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#errorPane").hide();
        self.Dialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            populateForm.call(self, time, selectDate);

            submitForm(self.FormName, self.Form.data("edit-url"), function () {

                $("#maintenancePane").html("");
                $("#gridAppointment").bootgrid("reload");

                showInformation(self.Form.data("success-message"));

            }, function () {
                self.Dialog.modal("show");
            });

        }, function () {
            self.Dialog.modal("show");
        }, function () {
            self.Dialog.modal("show");
        });
    }

    // Constructor
    var studentAppointmentReschedulePostTest = function (element) {
        this.Element = element;
        this.Caller = null;
        this.FormName = "#reschedulePostTestForm";
        this.Form = $(this.FormName, this.Element);
        this.Dialog = $("#reschedulePostTestDialog");
    };

    studentAppointmentReschedulePostTest.prototype = {
        constructor: studentAppointmentReschedulePostTest,
        Register: function () {
            var self = this;

            self.Dialog.modal();

            loadWeek.call(self);
        },
        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    // Export javascript class into window environment
    window.StudentAppointmentReschedulePostTest = studentAppointmentReschedulePostTest;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    function back() {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.Form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0 }, "slow");
    }

    function loadWeek() {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.Form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.Form.data("duration-key"),
            'appointmentType': self.Form.data("appointment-type"),
            'startDate': startDate.format(self.Form.data("date-format"))
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.Form, function (data) {
            detailTime.call(self, data);
        });

    }

    function detailTime(date) {
        var self = this;
        var selectedDate = moment(date, self.Form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.Form.data("date-format")),
            'appointmentDurationKey': self.Form.data("duration-key"),
            'appointmentType': self.Form.data("appointment-type")

        }, self.Form.data("time-url"), function (data) {

            $("#headTitle", self.Element).html('');
            $("#timeList", self.Element).html('');
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.Form.data("day-format")) + '</h3>' +
                '<p class="text-muted text-center">' + selectedDate.format(self.Form.data("display-date-format")) + '</p>');

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + ' data-date=' + selectedDate + '>' + item.AvailableTime + '</button>');
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                loadQuestion.call(self, $(this).data("time"), $(this).data("date"));
            });

               $("#backLink", self.Element).on("click", function () {
                    back.call(self);
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

    }

    function loadQuestion(time, date) {
        var self = this;
        var selectDate = moment(date).format(self.Form.data("date-format"));

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#questionView", self.Element).html("");
        $("#questionView", self.Element).show();

        submitDataWithCustomLoader({
            'appointmentType': self.Form.data("appointment-type")
        },
            self.Form.data("question-url"),
            function (data) {

                if (data.HaveQuestion) {
                    
                    $.each(data.Questions,
                        function (qIndex, qItem) {
                            var questionGroup = '<div class="appointment-questions" data-question-id="' + qItem.AppointmentQuestionId + '">';
                            var groupCloseTag = '</div>';

                            var questionContent = qItem.Question.split("[NOTE__");
                            var questionWrapper = '<p> ' + questionContent[0] + '</p>';
                            var questionNote = '';
                            if (questionContent.length > 1) {

                                questionNote = '<p>' + questionContent[1].replace("]", "") + '</p>';
                            }

                            var wrapperTagAnswer;
                            var wrapperCloseTag;
                            var questionType = qItem.QuestionType.split("_");
                            var answerType = createInputField("hidden", "answer-" + qItem.AppointmentQuestionId, questionType[0], "answer-type");

                            questionGroup += answerType;

                            if (questionType[0] === "DROPDOWN") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";

                                var selectTagOpen =
                                    '<select class="form-control" data-val="true" data-val-required="The Answer field is required." id="answer_' + qItem.AppointmentQuestionId + '" name="SelectAnswer_' +
                                        qItem.AppointmentQuestionId +
                                        '" required="required">';
                                var selectTagClose = '</select>';
                                selectTagOpen += '<option value="0" data-answer-id="0" selected>Select Answer...</option>';

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            var optionTag = "<option data-answer-id='" + aItem.Id + "' value='" + aItem.AnswerText + "'>" + aItem.AnswerText + "</option>";
                                            selectTagOpen += optionTag;
                                        }
                                    });

                                wrapperTagAnswer += selectTagOpen + selectTagClose + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "TEXTBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-10">';
                                wrapperCloseTag = "</div></div>";
                                var textBoxInput;

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            textBoxInput = '<textarea rows="5" data-answer-id="' + aItem.Id + '" required="required" class="form-control" id="answer_' + qItem.AppointmentQuestionId + '" name="TextboxAnswer_' + qItem.AppointmentQuestionId + '"></textarea>';
                                        }
                                    });

                                wrapperTagAnswer += textBoxInput + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "CHECKBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";
                                var checkboxFields = "";

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            checkboxFields += '<div class="col-xs-12">' +
                                                '<div class="checkbox" >' +
                                                '<label>' +
                                                '<input class="answer-checkbox" name="checkBoxAnwer[' + aIndex + ']" type="checkbox" value="' + aItem.Id + '">' +
                                                '<span>' + aItem.AnswerText + '</span>' +
                                                '</label>' +
                                                '</div>' +
                                                '</div>';
                                        }
                                    });

                                wrapperTagAnswer += checkboxFields + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/>" + questionNote + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                                $(".answer-checkbox").change(function () {

                                    var totalChecked = $('.answer-checkbox:checked').length;
                                    if (totalChecked > questionType[1]) {
                                        showInfoDialog("Please select maximum " + questionType[1] + " option(s)", function () {
                                            backdropModalControl();
                                        });

                                        $(this).prop("checked", false);
                                    }

                                });

                            }

                        });

                    $("#btnSubmit", self.Element).show();

                } else {
                    $("#btnSubmit", self.Element).hide();
                    $("#questionView", self.Element).hide();
                    $("#TimeView", self.Element).removeClass("hidden");

                    makeAppointment.call(self, time, selectDate);
                }

            }, function () {
                // onError
                $("#questionView", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
            }, function () {
                // showProgressDialog
                $("#questionView", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
            }, function () {
                // hideProgressDialog
                clearInnerLoader($("#questionView", self.Element));
            });

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            makeAppointment.call(self, time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    }

    function populateForm(time, selectDate) {
        var self = this;

        $("#errorPane").hide();
        self.Form.html("");
        self.Form.append('<input type="hidden" name="startHour" value="' + time + '" />');
        self.Form.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    self.Form.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    self.Form.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    self.Form.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');

                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    self.Form.append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                self.Form.append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');

            });

        });
    }

    function makeAppointment(time, date) {
        var self = this;
        var selectDate = moment(date).format(self.Form.data("date-format"));
        var templateMessage = self.Form.data("confirm-message");
        var templateDateTime = moment(date).format(self.Form.data("server-date-format")) + " " + moment(time, [self.Form.data("long-time-format")]).format(self.Form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#errorPane").hide();
        self.Dialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            populateForm.call(self, time, selectDate);

            submitForm(self.FormName, self.Form.data("edit-url"), function () {

                $("#maintenancePane").html("");
                $("#gridAppointment").bootgrid("reload");
                showInformation(self.Form.data("success-message"));

            }, function () {
                self.Dialog.modal("show");
            });

        }, function () {
            self.Dialog.modal("show");
        }, function () {
            self.Dialog.modal("show");
        });
    }

    // Constructor
    var studentAppointmentReschedulePreTest = function (element) {
        this.Element = element;
        this.Caller = null;
        this.FormName = "#reschedulePreTestForm";
        this.Form = $(this.FormName, this.Element);
        this.Dialog = $("#reschedulePreTestDialog");
    };

    studentAppointmentReschedulePreTest.prototype = {
        constructor: studentAppointmentReschedulePreTest,
        Register: function () {
            var self = this;

            self.Dialog.modal();
            loadWeek.call(self);
        },
        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    // Export javascript class into window environment
    window.StudentAppointmentReschedulePreTest = studentAppointmentReschedulePreTest;
}) (jQuery, window);;
(function ($, window) {
    "use strict";

    function back() {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.Form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0 }, "slow");
    }

    function loadWeek() {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.Form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.Form.data("duration-key"),
            'appointmentType': self.Form.data("appointment-type"),
            'startDate': startDate.format(self.Form.data("date-format"))
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.Form, function (data) {
            detailTime.call(self, data);
        });

    }

    function detailTime(date) {
        var self = this;
        var selectedDate = moment(date, self.Form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.Form.data("date-format")),
            'appointmentDurationKey': self.Form.data("duration-key"),
            'appointmentType': self.Form.data("appointment-type")

        }, self.Form.data("time-url"), function (data) {

            $("#headTitle", self.Element).html('');
            $("#timeList", self.Element).html('');
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.Form.data("day-format")) + '</h3>' +
                '<p class="text-muted text-center">' + selectedDate.format(self.Form.data("display-date-format")) + '</p>');

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + ' data-date=' + selectedDate + '>' + item.AvailableTime + '</button>');
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                loadQuestion.call(self, $(this).data("time"), $(this).data("date"));
            });

                $("#backLink", self.Element).on("click", function () {
                    back.call(self);
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

    }

    function loadQuestion(time, date) {
        var self = this;
        var selectDate = moment(date).format(self.Form.data("date-format"));

        makeAppointment.call(self, time, selectDate);

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            makeAppointment.call(self, time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    }

    function populateForm(time, selectDate) {
        var self = this;

        $("#errorPane").hide();
        self.Form.html("");
        self.Form.append('<input type="hidden" name="startHour" value="' + time + '" />');
        self.Form.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');
        self.Form.append('<input type="hidden" name="appointmentId" value="' + self.AppointmentId + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    self.Form.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    self.Form.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    self.Form.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');

                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    self.Form.append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                self.Form.append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');

            });

        });
    }

    function makeAppointment(time, date) {
        var self = this;
        var selectDate = moment(date).format(self.Form.data("date-format"));
        var templateMessage = self.Form.data("confirm-message");
        var templateDateTime = moment(date).format(self.Form.data("server-date-format")) + " " + moment(time, [self.Form.data("long-time-format")]).format(self.Form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#errorPane").hide();
        self.Dialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            populateForm.call(self, time, selectDate);

            submitForm(self.FormName, self.Form.data("edit-url"), function (data) {

                $("#maintenancePane").html("");
                $("#gridAppointment").bootgrid("reload");

                showInfoDialog(data.Value.InformationMessage, function () {
                    return true;
                });

            }, function () {
                self.Dialog.modal("show");
            });

        }, function () {
            self.Dialog.modal("show");
        }, function () {
            self.Dialog.modal("show");
        });
    }

    // Constructor
    var studentAppointmentRescheduleSpeakingFeedback = function (element) {
        this.Element = element;
        this.Caller = null;
        this.FormName = "#rescheduleSpeakingFeedbackForm";
        this.Form = $(this.FormName, this.Element);
        this.AppointmentId = $("#AppointmentId").val();
        this.Dialog = $("#rescheduleSpeakingFeedbackDialog");
    };
    
    studentAppointmentRescheduleSpeakingFeedback.prototype = {
        constructor: studentAppointmentRescheduleSpeakingFeedback,
        Register: function () {
            var self = this;

            self.Dialog.modal();

            loadWeek.call(self);
        },
        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    // Export javascript class into window environment
    window.StudentAppointmentRescheduleSpeakingFeedback = studentAppointmentRescheduleSpeakingFeedback;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    function back() {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.Form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    }

    function loadWeek() {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.Form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.Form.data("duration-key"),
            'appointmentType': self.Form.data("appointment-type"),
            'startDate': startDate.format(self.Form.data("date-format"))
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.Form, function (data) {
            detailTime.call(self, data);
        });
    }

    function detailTime(date) {
        var self = this;
        var selectedDate = moment(date, self.Form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.Form.data("date-format")),
            'appointmentDurationKey': self.Form.data("duration-key"),
            'appointmentType': self.Form.data("appointment-type")
        }, self.Form.data("time-url"), function (data) {
            $("#headTitle", self.Element).html('');
            $("#timeList", self.Element).html('');
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.Form.data("day-format")) + '</h3>' +
                '<p class="text-muted text-center">' + selectedDate.format(self.Form.data("display-date-format")) + '</p>');

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + ' data-date=' + selectedDate + '>' + item.AvailableTime + '</button>');
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                loadQuestion.call(self, $(this).data("time"), $(this).data("date"));
            });

               $("#backLink", self.Element).on("click", function () {
                    back.call(self);
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    }

    function loadQuestion(time, date) {
        var self = this;
        var selectDate = moment(date).format(self.Form.data("date-format"));

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#questionView", self.Element).html("");

        submitDataWithCustomLoader({
            'appointmentType': self.Form.data("appointment-type")
        },
            self.Form.data("question-url"),
            function (data) {
                if (data.HaveQuestion) {
                    
                    $.each(data.Questions,
                        function (qIndex, qItem) {
                            var questionGroup = '<div class="appointment-questions" data-question-id="' + qItem.AppointmentQuestionId + '">';
                            var groupCloseTag = '</div>';

                            var questionContent = qItem.Question.split("[NOTE__");
                            var questionWrapper = '<p> ' + questionContent[0] + '</p>';
                            var questionNote = '';
                            if (questionContent.length > 1) {
                                questionNote = '<p>' + questionContent[1].replace("]", "") + '</p>';
                            }

                            var wrapperTagAnswer;
                            var wrapperCloseTag;
                            var questionType = qItem.QuestionType.split("_");
                            var answerType = createInputField("hidden", "answer-" + qItem.AppointmentQuestionId, questionType[0], "answer-type");

                            questionGroup += answerType;

                            if (questionType[0] === "DROPDOWN") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";

                                var selectTagOpen =
                                    '<select class="form-control" data-val="true" data-val-required="The Answer field is required." id="answer_' + qItem.AppointmentQuestionId + '" name="SelectAnswer_' +
                                    qItem.AppointmentQuestionId +
                                    '" required="required">';
                                var selectTagClose = '</select>';
                                selectTagOpen += '<option value="0" data-answer-id="0" selected>Select Answer...</option>';

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            var optionTag = "<option data-answer-id='" + aItem.Id + "' value='" + aItem.AnswerText + "'>" + aItem.AnswerText + "</option>";
                                            selectTagOpen += optionTag;
                                        }
                                    });

                                wrapperTagAnswer += selectTagOpen + selectTagClose + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);
                            } else if (questionType[0] === "TEXTBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-10">';
                                wrapperCloseTag = "</div></div>";
                                var textBoxInput;

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            textBoxInput = '<textarea rows="5" data-answer-id="' + aItem.Id + '" required="required" class="form-control" id="answer_' + qItem.AppointmentQuestionId + '" name="TextboxAnswer_' + qItem.AppointmentQuestionId + '"></textarea>';
                                        }
                                    });

                                wrapperTagAnswer += textBoxInput + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);
                            } else if (questionType[0] === "CHECKBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";
                                var checkboxFields = "";

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            checkboxFields += '<div class="col-xs-12">' +
                                                '<div class="checkbox" >' +
                                                '<label>' +
                                                '<input class="answer-checkbox" name="checkBoxAnwer[' + aIndex + ']" type="checkbox" value="' + aItem.Id + '">' +
                                                '<span>' + aItem.AnswerText + '</span>' +
                                                '</label>' +
                                                '</div>' +
                                                '</div>';
                                        }
                                    });

                                wrapperTagAnswer += checkboxFields + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/>" + questionNote + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                                $(".answer-checkbox").change(function () {
                                    var totalChecked = $('.answer-checkbox:checked').length;
                                    if (totalChecked > questionType[1]) {
                                        showInfoDialog("Please select maximum " + questionType[1] + " option(s)", function () {
                                            backdropModalControl();
                                        });

                                        $(this).prop("checked", false);
                                    }
                                });
                            }
                        });

                    $("#btnSubmit", self.Element).show();

                } else {
                    $("#btnSubmit", self.Element).hide();
                    $("#questionView", self.Element).hide();
                    $("#TimeView", self.Element).removeClass("hidden");

                    makeAppointment.call(self, time, selectDate);
                }

            }, function () {
                // onError
                $("#questionView", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
            }, function () {
                // showProgressDialog
                $("#questionView", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
            }, function () {
                // hideProgressDialog
                clearInnerLoader($("#questionView", self.Element));
            });

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            makeAppointment.call(self, time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    }

    function populateForm(time, selectDate) {
        var self = this;

        $("#errorPane").hide();
        self.Form.html("");
        self.Form.append('<input type="hidden" name="startHour" value="' + time + '" />');
        self.Form.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    self.Form.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    self.Form.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    self.Form.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');
                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    self.Form.append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                self.Form.append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
            });
        });
    }

    function makeAppointment(time, date) {
        var self = this;
        var selectDate = moment(date).format(self.Form.data("date-format"));
        var templateMessage = self.Form.data("confirm-message");
        var templateDateTime = moment(date).format(self.Form.data("server-date-format")) + " " + moment(time, [self.Form.data("long-time-format")]).format(self.Form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);
        var successMessage = self.Form.data("information-message");

        $("#errorPane").hide();
        self.Dialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            populateForm.call(self, time, selectDate);

            submitForm(self.FormName, self.Form.data("edit-url"), function () {

                $("#maintenancePane").html("");
                $("#gridAppointment").bootgrid("reload");

                showInfoDialog(successMessage);

            }, function () {
                self.Dialog.modal("show");
            });
        }, function () {
            self.Dialog.modal("show");
        }, function () {
            self.Dialog.modal("show");
        });
        
    }

    // Constructor
    var studentAppointmentRescheduleStudyPlan = function (element) {
        this.Element = element;
        this.Caller = null;
        this.FormName = "#rescheduleStudyPlanForm";
        this.Form = $(this.FormName, this.Element);
        this.Dialog = $("#rescheduleStudyPlanDialog");
    };
    
    studentAppointmentRescheduleStudyPlan.prototype = {
        constructor: studentAppointmentRescheduleStudyPlan,
        Register: function () {
            var self = this;
            
            self.Dialog.modal();

            loadWeek.call(self);
        },

        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    // Export javascript class into window environment
    window.StudentAppointmentRescheduleStudyPlan = studentAppointmentRescheduleStudyPlan;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    function back() {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.Form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    }

    function loadWeek() {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.Form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.Form.data("duration-key"),
            'appointmentType': self.Form.data("appointment-type"),
            'startDate': startDate.format(self.Form.data("date-format"))
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.Form, function (data) {
            detailTime.call(self, data);
        });
    }

    function detailTime(date) {
        var self = this;
        var selectedDate = moment(date, self.Form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.Form.data("date-format")),
            'appointmentDurationKey': self.Form.data("duration-key"),
            'appointmentType': self.Form.data("appointment-type")
        }, self.Form.data("time-url"), function (data) {
            $("#headTitle", self.Element).html('');
            $("#timeList", self.Element).html('');
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.Form.data("day-format")) + '</h3>' +
                '<p class="text-muted text-center">' + selectedDate.format(self.Form.data("display-date-format")) + '</p>');

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + ' data-date=' + selectedDate + '>' + item.AvailableTime + '</button>');
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                loadQuestion.call(self, $(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                back.call(self);
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

    }

    function loadQuestion(time, date) {
        var self = this;
        var selectDate = moment(date).format(self.Form.data("date-format"));

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#questionView", self.Element).html("");
        $("#questionView", self.Element).show();

        submitDataWithCustomLoader({
            'appointmentType': self.Form.data("appointment-type")
        },
            self.Form.data("question-url"),
            function (data) {
                if (data.HaveQuestion) {

                    $.each(data.Questions,
                        function (qIndex, qItem) {
                            var questionGroup = '<div class="appointment-questions" data-question-id="' + qItem.AppointmentQuestionId + '">';
                            var groupCloseTag = '</div>';

                            var questionContent = qItem.Question.split("[NOTE__");
                            var questionWrapper = '<p> ' + questionContent[0] + '</p>';
                            var questionNote = '';
                            if (questionContent.length > 1) {
                                questionNote = '<p>' + questionContent[1].replace("]", "") + '</p>';
                            }

                            var wrapperTagAnswer;
                            var wrapperCloseTag;
                            var questionType = qItem.QuestionType.split("_");
                            var answerType = createInputField("hidden", "answer-" + qItem.AppointmentQuestionId, questionType[0], "answer-type");

                            questionGroup += answerType;

                            if (questionType[0] === "DROPDOWN") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";

                                var selectTagOpen =
                                    '<select class="form-control" data-val="true" data-val-required="The Answer field is required." id="answer_' + qItem.AppointmentQuestionId + '" name="SelectAnswer_' +
                                    qItem.AppointmentQuestionId +
                                    '" required="required">';
                                var selectTagClose = '</select>';
                                selectTagOpen += '<option value="0" data-answer-id="0" selected>Select Answer...</option>';

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            var optionTag = "<option data-answer-id='" + aItem.Id + "' value='" + aItem.AnswerText + "'>" + aItem.AnswerText + "</option>";
                                            selectTagOpen += optionTag;
                                        }
                                    });

                                wrapperTagAnswer += selectTagOpen + selectTagClose + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);
                            } else if (questionType[0] === "TEXTBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-10">';
                                wrapperCloseTag = "</div></div>";
                                var textBoxInput;

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            textBoxInput = '<textarea rows="5" data-answer-id="' + aItem.Id + '" required="required" class="form-control" id="answer_' + qItem.AppointmentQuestionId + '" name="TextboxAnswer_' + qItem.AppointmentQuestionId + '"></textarea>';
                                        }
                                    });

                                wrapperTagAnswer += textBoxInput + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);
                            } else if (questionType[0] === "CHECKBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";
                                var checkboxFields = "";

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            checkboxFields += '<div class="col-xs-12">' +
                                                '<div class="checkbox" >' +
                                                '<label>' +
                                                '<input class="answer-checkbox" name="checkBoxAnwer[' + aIndex + ']" type="checkbox" value="' + aItem.Id + '">' +
                                                '<span>' + aItem.AnswerText + '</span>' +
                                                '</label>' +
                                                '</div>' +
                                                '</div>';
                                        }
                                    });

                                wrapperTagAnswer += checkboxFields + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/>" + questionNote + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                                $(".answer-checkbox").change(function () {
                                    var totalChecked = $('.answer-checkbox:checked').length;
                                    if (totalChecked > questionType[1]) {
                                        showInfoDialog("Please select maximum " + questionType[1] + " option(s)", function () {
                                            backdropModalControl();
                                        });

                                        $(this).prop("checked", false);
                                    }
                                });
                            }
                        });

                    $("#btnSubmit", self.Element).show();

                } else {
                    $("#btnSubmit", self.Element).hide();
                    $("#questionView", self.Element).hide();
                    $("#TimeView", self.Element).removeClass("hidden");

                    makeAppointment.call(self, time, selectDate);
                }

            }, function () {
                // onError
                $("#questionView", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
            }, function () {
                // showProgressDialog
                $("#questionView", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
            }, function () {
                // hideProgressDialog
                clearInnerLoader($("#questionView", self.Element));
            });

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            makeAppointment.call(self, time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    }

    function populateForm(time, selectDate) {
        var self = this;
        var generatedForm = self.Form.find("#generatedForm");

        $("#errorPane").hide();
        generatedForm.html("");
        generatedForm.append('<input type="hidden" name="startHour" value="' + time + '" />');
        generatedForm.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    generatedForm.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');
                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    generatedForm.append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                generatedForm.append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
            });
        });
    }

    function makeAppointment(time, date) {
        var self = this;
        var selectDate = moment(date).format(self.Form.data("date-format"));
        var templateMessage = self.Form.data("confirm-message");
        var templateDateTime = moment(date).format(self.Form.data("server-date-format")) + " " + moment(time, [self.Form.data("long-time-format")]).format(self.Form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#StartHour", self.Element).val(time);
        $("#SelectedDate", self.Element).val(selectDate);
        $("#errorPane").hide();
        self.Dialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            populateForm.call(self, time, selectDate);

            submitForm(self.Form, self.Form.data("tutorial-url"), function (data) {

                $("#maintenancePane").html("");
                $("#gridAppointment").bootgrid("reload");

                showInfoDialog(data.Value.InformationMessage, function () {
                    return true;
                });

            }, function () {
                self.Dialog.modal("show");
            });
        }, function () {
            self.Dialog.modal("show");
        }, function () {
            self.Dialog.modal("show");
        });

    }

    // Constructor
    var studentAppointmentRescheduleTutorial = function (element) {
        this.Element = element;
        this.Caller = null;
        this.Form = $("#rescheduleTutorialForm", this.Element);
        this.Dialog = $("#rescheduleTutorialDialog");
    };
    
    studentAppointmentRescheduleTutorial.prototype = {
        constructor: studentAppointmentRescheduleTutorial,
        Register: function () {
            var self = this;

            self.Dialog.modal();

            loadWeek.call(self);
        },

        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    // Export javascript class into window environment
    window.StudentAppointmentRescheduleTutorial = studentAppointmentRescheduleTutorial;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    function back() {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.Form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    }

    function loadWeek() {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.Form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.Form.data("duration-key"),
            'appointmentType': self.Form.data("appointment-type"),
            'startDate': startDate.format(self.Form.data("date-format")),
            'teacherId': $("#TeacherId", self.Element).val()
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.Form, function (data) {
            detailTime.call(self, data);
        });
    }

    function detailTime(date) {
        var self = this;
        var selectedDate = moment(date, self.Form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.Form.data("date-format")),
            'appointmentDurationKey': self.Form.data("duration-key"),
            'appointmentType': self.Form.data("appointment-type"),
            'teacherId': $("#TeacherId", self.Element).val()
        }, self.Form.data("time-url"), function (data) {
            $("#headTitle", self.Element).html('');
            $("#timeList", self.Element).html('');
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.Form.data("day-format")) + '</h3>' +
                '<p class="text-muted text-center">' + selectedDate.format(self.Form.data("display-date-format")) + '</p>');

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + ' data-date=' + selectedDate + '>' + item.AvailableTime + '</button>');
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                loadQuestion.call(self, $(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                back.call(self);
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

    }

    function loadQuestion(time, date) {
        var self = this;
        var selectDate = moment(date).format(self.Form.data("date-format"));

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#questionView", self.Element).html("");
        $("#questionView", self.Element).show();

        submitDataWithCustomLoader({
            'appointmentType': self.Form.data("appointment-type")
        },
            self.Form.data("question-url"),
            function (data) {
                if (data.HaveQuestion) {

                    $.each(data.Questions,
                        function (qIndex, qItem) {
                            var questionGroup = '<div class="appointment-questions" data-question-id="' + qItem.AppointmentQuestionId + '">';
                            var groupCloseTag = '</div>';

                            var questionContent = qItem.Question.split("[NOTE__");
                            var questionWrapper = '<p> ' + questionContent[0] + '</p>';
                            var questionNote = '';
                            if (questionContent.length > 1) {
                                questionNote = '<p>' + questionContent[1].replace("]", "") + '</p>';
                            }

                            var wrapperTagAnswer;
                            var wrapperCloseTag;
                            var questionType = qItem.QuestionType.split("_");
                            var answerType = createInputField("hidden", "answer-" + qItem.AppointmentQuestionId, questionType[0], "answer-type");

                            questionGroup += answerType;

                            if (questionType[0] === "DROPDOWN") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";

                                var selectTagOpen =
                                    '<select class="form-control" data-val="true" data-val-required="The Answer field is required." id="answer_' + qItem.AppointmentQuestionId + '" name="SelectAnswer_' +
                                    qItem.AppointmentQuestionId +
                                    '" required="required">';
                                var selectTagClose = '</select>';
                                selectTagOpen += '<option value="0" data-answer-id="0" selected>Select Answer...</option>';

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            var optionTag = "<option data-answer-id='" + aItem.Id + "' value='" + aItem.AnswerText + "'>" + aItem.AnswerText + "</option>";
                                            selectTagOpen += optionTag;
                                        }
                                    });

                                wrapperTagAnswer += selectTagOpen + selectTagClose + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);
                            } else if (questionType[0] === "TEXTBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-10">';
                                wrapperCloseTag = "</div></div>";
                                var textBoxInput;

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            textBoxInput = '<textarea rows="5" data-answer-id="' + aItem.Id + '" required="required" class="form-control" id="answer_' + qItem.AppointmentQuestionId + '" name="TextboxAnswer_' + qItem.AppointmentQuestionId + '"></textarea>';
                                        }
                                    });

                                wrapperTagAnswer += textBoxInput + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);
                            } else if (questionType[0] === "CHECKBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";
                                var checkboxFields = "";

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            checkboxFields += '<div class="col-xs-12">' +
                                                '<div class="checkbox" >' +
                                                '<label>' +
                                                '<input class="answer-checkbox" name="checkBoxAnwer[' + aIndex + ']" type="checkbox" value="' + aItem.Id + '">' +
                                                '<span>' + aItem.AnswerText + '</span>' +
                                                '</label>' +
                                                '</div>' +
                                                '</div>';
                                        }
                                    });

                                wrapperTagAnswer += checkboxFields + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/>" + questionNote + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                                $(".answer-checkbox").change(function () {
                                    var totalChecked = $('.answer-checkbox:checked').length;
                                    if (totalChecked > questionType[1]) {
                                        showInfoDialog("Please select maximum " + questionType[1] + " option(s)", function () {
                                            backdropModalControl();
                                        });

                                        $(this).prop("checked", false);
                                    }
                                });
                            }
                        });

                    $("#btnSubmit", self.Element).show();

                } else {
                    $("#btnSubmit", self.Element).hide();
                    $("#questionView", self.Element).hide();
                    $("#TimeView", self.Element).removeClass("hidden");

                    makeAppointment.call(self, time, selectDate);
                }

            }, function () {
                // onError
                $("#questionView", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
            }, function () {
                // showProgressDialog
                $("#questionView", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
            }, function () {
                // hideProgressDialog
                clearInnerLoader($("#questionView", self.Element));
            });

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            makeAppointment.call(self, time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    }

    function populateForm(time, selectDate) {
        var self = this;
        var generatedForm = self.Form.find("#generatedForm");

        $("#errorPane").hide();
        generatedForm.html("");
        generatedForm.append('<input type="hidden" name="startHour" value="' + time + '" />');
        generatedForm.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    generatedForm.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');
                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    generatedForm.append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                generatedForm.append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
            });
        });
    }

    function makeAppointment(time, date) {
        var self = this;
        var selectDate = moment(date).format(self.Form.data("date-format"));
        var templateMessage = self.Form.data("confirm-message");
        var templateDateTime = moment(date).format(self.Form.data("server-date-format")) + " " + moment(time, [self.Form.data("long-time-format")]).format(self.Form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#StartHour", self.Element).val(time);
        $("#SelectedDate", self.Element).val(selectDate);
        $("#errorPane").hide();
        self.Dialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            populateForm.call(self, time, selectDate);

            submitForm(self.Form, self.Form.data("tutorial-url"), function (data) {

                $("#maintenancePane").html("");
                $("#gridAppointment").bootgrid("reload");

                showInfoDialog(data.Value.InformationMessage, function () {
                    return true;
                });

            }, function () {
                self.Dialog.modal("show");
            });
        }, function () {
            self.Dialog.modal("show");
        }, function () {
            self.Dialog.modal("show");
        });

    }

    // Constructor
    var studentAppointmentRescheduleTutorialWithTeacher = function (element) {
        this.Element = element;
        this.Caller = null;
        this.Form = $("#rescheduleTutorialForm", this.Element);
        this.Dialog = $("#rescheduleTutorialDialog");
    };
    
    studentAppointmentRescheduleTutorialWithTeacher.prototype = {
        constructor: studentAppointmentRescheduleTutorialWithTeacher,
        Register: function () {
            var self = this;

            self.Dialog.modal();

            loadWeek.call(self);
        },

        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    // Export javascript class into window environment
    window.StudentAppointmentRescheduleTutorialWithTeacher = studentAppointmentRescheduleTutorialWithTeacher;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    function initEventHandler() {
        var self = this;
        var eventHandler = {
            onActivityLinkClicked: function (e) {
                e.preventDefault();

                var activityId = $(this).data('activity-id');
                var actionType = $(this).data('action-type');
                var url = self.PageEl.data("activity-url");
                url += '?activityId=' + activityId + "&actionType=" + actionType;

                submitNonFormPost(url,
                    function (data) {
                        if (data.IsSuccess) {
                            showPopup(data.Url);
                        }
                    });
            },

            onBuyAddOnsLinkClicked: function (e) {
                e.preventDefault();

                var url = $(this).data("url");

                if (url !== "") {

                    processApplicationContent(url, "GET", function (contentData) {
                        $('#mainUserContent').html(contentData);

                        var helper = new Helper();
                        var namespace = helper.CreateNameSpaceFromURL(url);
                        var apps = new Application($('#mainUserContent'), namespace);
                        apps.Register();
                    });

                }
            },

            onFeedbackSystemClicked: function (e) {
                e.preventDefault();
                var videoUrl = self.PageEl.data("video-url");
                var activityName = "The E2 Feedback System";

                showVideo(videoUrl,
                    activityName,
                    function () { });
            }
        };

        $('.activity-link')
            .off("click")
            .on("click", eventHandler.onActivityLinkClicked);

        $(".buyAddOnsLink")
            .off("click")
            .on("click", eventHandler.onBuyAddOnsLinkClicked);

        $("#feedbackSystem")
            .off("click")
            .on("click", eventHandler.onFeedbackSystemClicked);
    }

    function refreshAssessmentGrid() {
        var self = this;
        var url = self.PageEl.data("assessment-url");

        submitNonFormPost(url,
            function (data) {
                generateAssessmentList.call(self, data.Value.SpeakingAssessmentList, "speakingAssessment");
                generateAssessmentList.call(self, data.Value.WritingAssessmentList, "writingAssessment");

                initEventHandler.call(self);
            });
    }

    function generateAssessmentList(assessmentList, tbodyClass) {
        var self = this;

        if ($("." + tbodyClass + "-body").length === 0) {
            return;
        }

        $("." + tbodyClass + "-body").empty();

        var examTypeCode = $("#ExamTypeCode").val();
        $.each(assessmentList, function (index, element) {
            var tBody = examTypeCode === self.PageEl.data("exam-ielts") ? $("#" + tbodyClass + "-" + element.ModuleId) : $("#" + tbodyClass + "-" + element.SubModuleId);

            var isSuccess = "";
            var isSubmitted = "<i class=\"fa fa-minus\" aria-hidden=\"true\"></i>";
            var submittedDate = "<i class=\"fa fa-minus\" aria-hidden=\"true\"></i>";
            var score = "<i class=\"fa fa-minus\" aria-hidden=\"true\"></i>";
            var checkedDate = "<i class=\"fa fa-minus\" aria-hidden=\"true\"></i>";

            var isChecked = element.IsSubmitted && element.IsGraded;

            if (isChecked) {
                isSuccess = "success";
                checkedDate = element.ScoreDateText;
            }

            if (element.IsSubmitted) {
                isSubmitted = "<i class=\"fa fa-check check--success\" aria-hidden=\"true\"></i>";
                submittedDate = element.SubmittedDateText;
            }

            if (element.IsGraded) {
                score = element.ScoreText;
            }
            var html = "<tr class='" + isSuccess + "'>";
            html += "<td><a href='#' class=\"view-assessment-link activity-link\" data-activity-id=\"" + element.ActivityId + "\" data-action-type=\"" + element.ActivityActionType + "\">" + element.AssessmentName + "</a></td>";
            html += "<td class='text-center'>" + isSubmitted + "</td>";
            html += "<td class='text-center'>" + submittedDate + "</td>";
            html += "<td class='text-center'>" + score + "</td>";
            html += "<td class='text-center'>" + checkedDate + "</td>";
            html += "</tr>";
            tBody.append(html);
        });
    }

    var studentAssessmentIndex = function (element) {
        this.Element = element;
        this.PageEl = $("#studentAssessment", this.Element);
    };

    studentAssessmentIndex.prototype = {
        constructor: studentAssessmentIndex,
        Register: function () {
            var self = this;

            refreshAssessmentGrid.call(self);

            //This function will be called from popup assessment page
            window.refreshAssessmentGrid = refreshAssessmentGrid.bind(self);
        },

        SetupCaller: function (caller) {
            this.Caller = caller;
        },

        RefreshAssessmentGrid: function () {
            var self = this;
            refreshAssessmentGrid.call(self);
        }
    };

    window.StudentAssessmentIndex = studentAssessmentIndex;
})(jQuery, window);;
var StudentChangePackageCourseDetail = function(element) {
    this.Element = element;
    this.MaintenanceForm = $("#changeStudentPackageForm", this.Element);
    this.PriceTag = null;
};

StudentChangePackageCourseDetail.prototype = {
    constructor: StudentChangePackageCourseDetail,
    Register: function () {
        var self = this;

        $(document).ready(function () {
            $("body").tooltip({ selector: '[data-toggle=tooltip]' });
            self.PriceTag = $(".pricing-table__conversion-price").html();
        });

        $(".studentPackage")
            .click(function () {
                self._goToPaymentPage();

            });

        $(".freeTransferBtn").off("click").on("click", function () {
            self._goToFreeTransfer();

        });

        $(".reset-checkbox").change(function() {
            self.CalculatePrice();
        });

    },
    SetupCaller: function (caller) {
        this.Caller = caller;
    },
    CalculatePrice: function () {
        var self = this;
        var totalPrice = parseInt($("#SwitchingCost").val());

        $(".reset-checkbox:checked").each(function() {
            var checkboxEl = $(this);
            totalPrice = parseInt(totalPrice) + parseInt(checkboxEl.data("subtotal"));
        });

        if (totalPrice === 0) {
            $("#total-price-span").parent().html("FREE");
            $(".pricing-table__section-item.btn-cell a.btn")
                .removeClass("studentPackage")
                .addClass("freeTransferBtn")
                .off("click")
                .on("click", function () {
                    self._goToFreeTransfer();
                });
            return;
        } else {
            $(".pricing-table__conversion-price").html(self.PriceTag);
            $("#total-price-span").html(totalPrice);
            $(".pricing-table__section-item.btn-cell a.btn").removeClass("freeTransferBtn").addClass("studentPackage").off("click")
                .on("click", function () {
                    self._goToPaymentPage();
                });
        }

    },

    _goToPaymentPage: function () {
        var self = this;
        var url = self.MaintenanceForm.data("process-url");
        var message = self.MaintenanceForm.data("confirmation-message");

        submitFormWithConfirmationDialog(message,
            "#changeStudentPackageForm",
            url,
            function (data) {
                window.location.href = data.RedirectUrl;
            });
    },

    _goToFreeTransfer: function () {
        var self = this;
        var url = self.MaintenanceForm.data("process-free-transfer-url");

        submitForm("#changeStudentPackageForm", url, function (data) {
            window.location = data.location;
        });
    }

};
(function ($, window) {
    "use strict";


    function loadPackageLevel(examTypeCode, isCurrentPackage) {
        var self = this;

        if (examTypeCode === "") {
            examTypeCode = $("#CurrentExamTypeCode", self.Element).val();
            isCurrentPackage = true;
        }

        var url = self.MaintenanceForm.data("populate-package-url");
        url += "?examTypeCode=" + examTypeCode;
        url += "&isCurrentPackage=" + isCurrentPackage;
        $("#PackageLevel", self.Element).empty();

        submitDataWithoutLoader({}, url, function (data) {
            $("#PackageLevel", self.Element).append("<option value=''>" + self.MaintenanceForm.data("option-message") + "</option>");

            $.each(data.Result,
                function (index, row) {
                    $("#PackageLevel", self.Element).append("<option value='" + row.Description + "'>" + row.Description + "</option>");
                });

            if (isCurrentPackage === true) {
                $("#PackageLevel", self.Element).val(1);
            }
        });

        if (isCurrentPackage === true) {
            $("#packageLevelListContainer", self.Element).addClass("hidden");
        } else {
            $("#packageLevelListContainer", self.Element).removeClass("hidden");
        }
    }

    function loadCourseDetail(examTypeCode, packageLevel) {
        var self = this;

        var viewContainer = $("#detailPackageContainer", self.Element);
        var isUpgrade = $("input[name='IsUpgrade']:checked", self.Element).val();
        var url = self.MaintenanceForm.data("course-detail-url");
        url += "?examTypeCode=" + examTypeCode;

        if (isUpgrade === "Yes") {
            url = self.MaintenanceForm.data("upgrade-course-detail-url");
            url += "?examTypeCode=" + examTypeCode;
            url += "&packageLevelDescription=" + encodeURIComponent(packageLevel);

        }

        var isValid = self.MaintenanceForm.valid();
        if (!isValid) {
            return false;
        }

        showLoadingDialog();
        showPartialViewAsync(url)
            .done(function (content) {
                viewContainer.html(content);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application(viewContainer, namespace);

                apps.RegisterWithCaller(self);
                hideLoadingDialog();

            }).fail(function () {

            });
    }

    function initControl() {
        var self = this;
        var eventHandler = {
            btnViewClick: function () {
                var examTypeCode = $("#AvailableExamTypeCode", self.Element).val();
                var packageLevel = $("#PackageLevel", self.Element).val();

                loadCourseDetail.call(self, examTypeCode, packageLevel);
            },
            upgradeChangeHandler: function (element) {
                if (element.val() === "Yes" && element.prop("checked") === true) {
                    $("#packageLevelListContainer", self.Element).removeClass("hidden");

                    var examTypeCode = $("#AvailableExamTypeCode", self.Element).val();
                    loadPackageLevel.call(self, examTypeCode, false);
                }
                else {
                    $("#packageLevelListContainer", self.Element).addClass("hidden");
                    $("#PackageLevel", self.Element).val("");
                }
            },
            examTypeCodeChangeHandler: function (element) {
                if ($("#IsUpgradeAvailable", self.Element).val() === false) {
                    return;
                }

                var examTypeCode = element.val();
                if (examTypeCode === "") {
                    loadPackageLevel.call(self, examTypeCode, true);
                    $("#isUpgradeContainer", self.Element).addClass("hidden");
                    return;
                }

                $("#isUpgradeContainer", self.Element).removeClass("hidden");

                if ($("input[name='IsUpgrade']:checked", self.Element).val() === "No") {
                    return;
                }


                loadPackageLevel.call(self, examTypeCode, false);
                $("#isUpgradeContainer", self.Element).removeClass("hidden");
            }
        };

        $("#btnView", self.Element)
            .off("click")
            .on("click", eventHandler.btnViewClick);

        $("input[name='IsUpgrade']", self.Element)
            .off("change")
            .on("change", function () {
                var el = $(this);

                eventHandler.upgradeChangeHandler.call(self, el);
            });

        $("#AvailableExamTypeCode", self.Element)
            .off("change")
            .on("change", function () {
                var el = $(this);

                eventHandler.examTypeCodeChangeHandler.call(self, el);
            });
    }

    var StudentChangePackageIndex = function (element) {
        this.Element = element;
        this.MaintenanceForm = $("#changePackageForm");
    };

    StudentChangePackageIndex.prototype = {
        constructor: StudentChangePackageIndex,
        Register: function () {
            var self = this;

            self.BindEventHandler();
            self.Initialize();
        },
        Initialize: function () {
            var self = this;

            self.MaintenanceForm.validate({
                rules: {
                    AvailableExamTypeCode: {
                        required: true
                    },
                    PackageLevel: {
                        required: true
                    }
                },
                highlight: function (element) {
                    $(element).closest(".form-group").addClass("has-error");
                },
                unhighlight: function (element) {
                    $(element).closest(".form-group").removeClass("has-error");
                }
            });
        },
        BindEventHandler: function () {
            var self = this;

            initControl.call(self);
        }
    };

    // Export javascript class into window environment
    window.StudentChangePackageIndex = StudentChangePackageIndex;
})(jQuery, window);;
var StudentChangePackageProceed = function (element) {
    this.Element = element;
    this.MaintenanceForm = $("#proceedForm", this.Element);
}

StudentChangePackageProceed.prototype = {
    constructor: StudentChangePackageProceed,
    Register: function () {
        var self = this;

        var url = self.MaintenanceForm.data("url");
        submitDataAsync({
            AdditionalPackageId: self.MaintenanceForm.data("additional-id"),
            StudentPackageId: self.MaintenanceForm.data("student-package-id"),
            BundleKey: self.MaintenanceForm.data("bundle-key"),
            HasWritingIntensive: self.MaintenanceForm.data("has-writing-intensive"),
            HasSpeakingIntensive: self.MaintenanceForm.data("has-speaking-intensive"),
            IsOldPackage: self.MaintenanceForm.data("is-old-package")
        }, url).then(function (data) {
            window.location = data.Value;
        });

    }

};
var StudentChangePackageUpgradeCourseDetail = function(element) {
    this.Element = element;
    this.MaintenanceForm = $("#changeStudentPackageForm", this.Element);
    this.PriceTag = null;
};

StudentChangePackageUpgradeCourseDetail.prototype = {
    constructor: StudentChangePackageUpgradeCourseDetail,
    Register: function () {
        var self = this;

        $(document).ready(function () {
            $("body").tooltip({ selector: '[data-toggle=tooltip]' });
            self.PriceTag = $(".pricing-table__conversion-price").html();
        });

        $(".studentPackage")
            .click(function () {
                self._goToPaymentPage();

            });

        $(".freeTransferBtn").off("click").on("click", function () {
            self._goToFreeTransfer();

        });

        $(".reset-checkbox").change(function() {
            self.CalculatePrice();
        });

    },
    SetupCaller: function (caller) {
        this.Caller = caller;
    },
    CalculatePrice: function () {
        var self = this;
        var totalPrice = parseInt($("#SwitchingCost").val());

        $(".reset-checkbox:checked").each(function() {
            var checkboxEl = $(this);
            totalPrice = parseInt(totalPrice) + parseInt(checkboxEl.data("subtotal"));
        });

        if (totalPrice === 0) {
            $("#total-price-span").parent().html("FREE");
            $(".pricing-table__section-item.btn-cell a.btn")
                .removeClass("studentPackage")
                .addClass("freeTransferBtn")
                .off("click")
                .on("click", function () {
                    self._goToFreeTransfer();
                });
            return;
        } else {
            $(".pricing-table__conversion-price").html(self.PriceTag);
            $("#total-price-span").html(totalPrice);
            $(".pricing-table__section-item.btn-cell a.btn").removeClass("freeTransferBtn").addClass("studentPackage").off("click")
                .on("click", function () {
                    self._goToPaymentPage();
                });
        }

    },

    _goToPaymentPage: function () {
        var self = this;
        var url = self.MaintenanceForm.data("process-url");
        var message = self.MaintenanceForm.data("confirmation-message");

        submitFormWithConfirmationDialog(message,
            "#changeStudentPackageForm",
            url,
            function (data) {
                window.location.href = data.RedirectUrl;
            });
    },

    _goToFreeTransfer: function () {
        var self = this;
        var url = self.MaintenanceForm.data("process-free-transfer-url");

        submitForm("#changeStudentPackageForm", url, function (data) {
            window.location = data.location;
        });
    }

};
(function ($, window) {
    "use strict";

    function initEventHandler() {
        var self = this;
        var eventHandler = {
            resendActivationClicked: function (e) {
                e.preventDefault();

                var url = $(e.target).attr("href");
                var onSuccessResponse = function (response) {
                    hideProcessingDialog();
                    showInfoMessageDialog(response);
                };

                var onFailResponse = function (response) {
                    showErrorMessageDialog(response);
                }

                showProcessingDialog();
                submitDataAsync({}, url)
                    .done(onSuccessResponse)
                    .fail(onFailResponse);
            }
        };

        $("#reSendActivationLink", self.Element)
            .off("click")
            .on("click", eventHandler.resendActivationClicked);
    }

    var studentMainContent = function (element) {
        this.Element = element;
    };

    studentMainContent.prototype = {
        constructor: studentMainContent,
        Register: function () {
            var self = this;

            initEventHandler.call(self);
        },
    };

    window.StudentMainContent = studentMainContent;
})(jQuery, window);;
var StudentSidebarNavigation = function (element) {
    this.Element = element;
    this.SidebarNavigation = $("#sidebarNavigation");
    this.TutorialBodyWrapper = $("#SharedTutorialWrapper");
    this.SpeakingFeedbackBodyWrapper = $("#SharedSpeakingFeedbackWrapper");
}

StudentSidebarNavigation.prototype = {
    constructor: StudentSidebarNavigation,
    Register: function () {
        var self = this;


        self._tooltipSideMenuHandle();

        $("#profilePicture").click(function () {
            self._changeProfilePicture();
        });

        $("#dismissLink").click(function (e) {
            e.preventDefault();
            self._dismissInfo();
            $(".popup-info-tooltip").tooltipster("destroy");
        });

        $("#viewHandbookDocument")
            .off("click")
            .on("click",
                function (e) {
                    e.preventDefault();
                    var el = $(e.currentTarget);
                    var url = el.data("document-url");
                    window.open(url, "_blank");
                });

        $(".side-menu-tutorial")
            .off("click")
            .on("click", function (e) {
                e.preventDefault();

                var tutorialDialogEl = $("#sharedTutorialBookDialog");
                var gridTutorialUrl = tutorialDialogEl.data("grid-tutorial-url");
                var checkTutorialUrl = tutorialDialogEl.data("check-tutorial-url");
                var bookTutorialUrl = tutorialDialogEl.data("book-tutorial-url");

                var checkTutorialResult = function (data) {
                    if (data.Value.NumberOfBookedTutorial === 0) {
                        showTutorialContent(bookTutorialUrl);
                    } else {
                        showTutorialContent(gridTutorialUrl);
                    }
                };

                var showTutorialContent = function (url) {
                    showPartialViewAsync(url)
                        .done(function (data) {
                            var afterHideProcessingDialog = function () {
                                tutorialDialogEl.find("#sharedTutorialWrapper").html(data);
                                tutorialDialogEl.modal();

                                var helper = new Helper();
                                var namespace = helper.CreateNameSpaceFromURL(url);
                                var apps = new Application(tutorialDialogEl.find("#sharedTutorialWrapper"), namespace);
                                apps.RegisterWithCaller(self);
                            };

                            hideProcessingDialog(afterHideProcessingDialog);

                        }).fail(function (data) {
                        });
                };

                showProcessingDialog();
                submitDataAsync({}, checkTutorialUrl)
                    .done(function (data) {
                        checkTutorialResult(data);
                    });

            });

        $(".side-menu-speaking-feedback")
            .off("click")
            .on("click", function (e) {
                e.preventDefault();

                var speakingGridFeedbackDialogEl = $("#sharedGridSpeakingFeedbackBookDialog");
                var gridSpeakingFeedbackUrl = speakingGridFeedbackDialogEl.data("grid-speaking-feedback-url");
                var checkSpeakingFeedbackUrl = speakingGridFeedbackDialogEl.data("check-speaking-feedback-url");
                var bookSpeakingFeedbackUrl = speakingGridFeedbackDialogEl.data("book-speaking-feedback-url");
                var numberOfBookedSpeakingFeedback = 0;

                var checkSpeakingFeedbackResult = function (data) {
                    numberOfBookedSpeakingFeedback = data.Value.NumberOfBookedSpeakingFeedback;
                    if (numberOfBookedSpeakingFeedback === 0) {
                        showSpeakingFeedbackContent(bookSpeakingFeedbackUrl);
                    } else {
                        showSpeakingFeedbackContent(gridSpeakingFeedbackUrl);
                    }
                };

                var showSpeakingFeedbackContent = function (url) {
                    showPartialViewAsync(url)
                        .done(function (data) {
                            var afterHideProcessingDialog = function () {
                                speakingGridFeedbackDialogEl.find("#sharedGridSpeakingFeedbackWrapper").html(data);
                                speakingGridFeedbackDialogEl.modal();

                                var helper = new Helper();
                                var namespace = helper.CreateNameSpaceFromURL(url);
                                var apps = new Application(speakingGridFeedbackDialogEl.find("#sharedGridSpeakingFeedbackWrapper"), namespace);
                                apps.RegisterWithCaller(self);
                            };

                            hideProcessingDialog(afterHideProcessingDialog);

                        }).fail(function (data) {
                            hideProcessingDialog();
                        });
                };

                showProcessingDialog();
                submitDataAsync({}, checkSpeakingFeedbackUrl)
                    .done(function (data) {
                        checkSpeakingFeedbackResult(data);
                    });
            });

        $(".side-menu-tutorial-free")
            .off("click")
            .on("click", function (e) {
                e.preventDefault();

                var tutorialDialogEl = $("#tutorialBookDialogFree");
                tutorialDialogEl.modal();
            });
    },

    ChangePicture: function (imageUrl) {
        // this method called from ChangeProfilePicture.cshtml

        if (imageUrl == null || imageUrl === "") {
            imageUrl = self.SidebarNavigation.data("default-avatar");
        }
        $(".profile-picture").attr("src", imageUrl);
    },


    _changeProfilePicture: function () {
        var self = this;

        var url = self.SidebarNavigation.data("change-picture-url");
        var param =
            "scrollbars=no,resizable=no,status=no,location=no,toolbar=no,menubar=no, width=450,height=600,left=-1000,top=-1000";
        open(url, "_blank", param);
    },

    _tooltipSideMenuHandle: function () {
        var self = this;
        var rewardsMenu = $("#rewardsListMenu");

        submitDataAsync({}, rewardsMenu.data("check-url"))
            .done(function (data) {

                if (!data.Value.IsDismissed) {
                    self._showSidebarTooltip();
                }

            }).fail(function () {
                return;

            });

    },

    _showSidebarTooltip: function () {
        var self = this;

        $(".popup-info-tooltip").tooltipster({
            theme: ["tooltipster-borderless", "tooltipster-clear"],
            side: "right",
            interactive: true,
            trigger: "custom",
            viewportAware: false,
            functionReady: function (instance, helper) {
                $(".list-with-tooltip").addClass("menu-with-popup");
                self._addHistoryRewardsInfo();

            },
            functionAfter: function (instance, helper) {
                $(".list-with-tooltip").removeClass("menu-with-popup");
            }
        });

        $(".popup-info-tooltip").tooltipster("open");

        $(".close-tooltip").click(function (e) {
            e.preventDefault();
            $('.popup-info-tooltip').tooltipster('destroy');
        });

        $(document).scroll(function () {

            if ($(".popup-info-tooltip").hasClass("tooltipstered")) {
                $(".popup-info-tooltip").tooltipster("reposition");

            }

        });

        $(window).resize(function () {
            var currentWidth = $(window).width();

            if (!$(".popup-info-tooltip").hasClass("tooltipstered")) {
                return;
            }

            if (currentWidth < 768) {
                $(".popup-info-tooltip").tooltipster("close");
            } else {
                $(".popup-info-tooltip").tooltipster("open");
            }

        });

    },

    _dismissInfo: function () {
        var dismissLink = $("#dismissLink");

        submitDataAsync({}, dismissLink.data("url"))
            .done(function () {
                return;

            }).fail(function () {
                return;

            });

    },

    _addHistoryRewardsInfo: function () {

        var url = $("#e2rewards-tooltip-content").data("history-url");

        submitDataAsync({}, url)
            .done(function () {
                return;

            }).fail(function () {
                return;

            });

    }
};
var StudentTopbarNavigation = function (element) {
    this.Element = element;
    this.TopBarNavigation = $("#topBarNavigation");
    this.AnnouncementPanel = $('#announcementTopBar');
    this.MaximumFailureCall = 0;
    this.DefaultIdleTimeout = 60000;
    this.DefaultCountInterval = 300000;
};

StudentTopbarNavigation.prototype = {
    constructor: StudentTopbarNavigation,
    Register: function () {
        var self = this;

        self._listenStudentOnline();
        self._displayStudentName();

        self._getAnnouncementMessage();

        window.onresize = function (e) {
            self._displayStudentName();
        };

        $("#active-student-count").click(function () {

            self._loadActiveStudentCount();

            var studentHomeStudentOnline = new StudentHomeStudentOnline();
            studentHomeStudentOnline.Register();

            $("#onlineStudentDialog").modal("show");
        });

        $("#top-student").click(function () {
            var url = self.TopBarNavigation.data("top-student-url");

            $("#loading-tabToday").show();
            $("#TopStudentToday").load(url);
            $("#topStudentDialog").modal("show");

        });

        $("#howtouse-video").click(function () {
            var videoUrl = self.TopBarNavigation.data("video-url");
            var activityName = self.TopBarNavigation.data("video-title");

            showVideo(videoUrl,
                activityName,
                function () { });

            $("#youtube-player").attr("width", "100%");
        });

        $('#transfer-package').click(function () {
            var url = self.TopBarNavigation.data("transfer-url");
            var confirmMessage = self.TopBarNavigation.data("transfer-confirm-message");
            var successMessage = $(this).data("success-message");
            var buttonLogout = self.TopBarNavigation.data("button-logout");

            submitDataWithAdvancedConfirmDialog(
                confirmMessage,
                {},
                url,
                function () {
                    setTimeout(function () {
                        window.location.reload();
                    }, 5000);
                    showInfoDialogWithAction(successMessage, buttonLogout, function () {
                        window.location.reload();
                    });
                }, function (data) {
                    showErrorMessageDialog(data);

                });

        });

        $('#transfer-package-ielts-general').click(function () {

            var url = self.TopBarNavigation.data("transfer-ielts-url");
            url += "?newPackage=" + $(this).data("exam-type");

            var confirmMessage = self.TopBarNavigation.data("transfer-confirm-message");
            var successMessage = $(this).data("success-message");
            var buttonLogout = self.TopBarNavigation.data("button-logout");

            submitDataWithAdvancedConfirmDialog(
                confirmMessage,
                {},
                url,
                function () {
                    setTimeout(function () {
                        window.location.reload();
                    }, 5000);
                    showInfoDialogWithAction(successMessage, buttonLogout, function () {
                        window.location.reload();
                    });
                }, function (data) {
                    showErrorMessageDialog(data);

                });

        });

        $('#transfer-package-ielts-academic').click(function () {
            var url = self.TopBarNavigation.data("transfer-ielts-url");
            url += "?newPackage=" + $(this).data("exam-type");

            var confirmMessage = self.TopBarNavigation.data("transfer-confirm-message");
            var successMessage = $(this).data("success-message");
            var buttonLogout = self.TopBarNavigation.data("button-logout");

            submitDataWithAdvancedConfirmDialog(
                confirmMessage,
                {},
                url,
                function () {
                    setTimeout(function () {
                        window.location.reload();
                    }, 5000);
                    showInfoDialogWithAction(successMessage, buttonLogout, function () {
                        window.location.reload();
                    });
                }, function (data) {
                    showErrorMessageDialog(data);

                });

        });

        $("#e2-rewards-topbar").click(function (e) {
            e.preventDefault();
            $("#rewardsListMenu").click();
        });

        $('.student-profile-menu')
            .on('click',
                function (event) {
                    event.preventDefault();

                    var contentUrl = $(this).data('url');

                    processApplicationContent(contentUrl, "GET", function (contentData) {
                        if (contentData.indexOf('UNAUTHORIZED') >= 0) {
                            window.location.href = "/Account/Login";
                        } else {
                            $('#mainUserContent').html(contentData);

                            var helper = new Helper();
                            var namespace = helper.CreateNameSpaceFromURL(contentUrl);
                            var apps = new Application($('#mainUserContent'), namespace);
                            apps.Register();
                        }
                    });

                });

        $(".switchPackageLink")
            .on("click", function () {
                var url = $(this).data('url');
                var message = $(this).data('confirmation-message');
                var yesText = $(this).data('yes-text');
                var noText = $(this).data('no-text');

                showCustomConfirmationDialog(message,
                    function () {
                        showLoadingDialog();
                        window.location.href = url;
                    },
                    yesText,
                    '',
                    function () { },
                    noText);
            });
    },

    _getAnnouncementMessage: function () {
        var app = this;
        var url = app.AnnouncementPanel.data("get-url");

        submitDataAsync({}, url)
            .done(function (data) {
                app._generateAnnouncementMessage(data);
            }).fail(function () {

            });
    },

    _generateAnnouncementMessage: function (data) {
        var app = this;

        if (data.Value === null || data.Value.length === 0) {
            $('#initialList a', $('#announcementTopBar')).html(app.AnnouncementPanel.data("no-announcement"));
            return false;
        }

        $('span.count-badge', $('#announcementTopBar')).html(data.Value.length);
        $('span.count-badge', $('#announcementTopBar')).show();
        $('#initialList a', $('#announcementTopBar')).hide();

        var announcementContent = "";
        $.each(data.Value, function (index, row) {
            var title = row.Title.replace(/"/g, "&quot;");
            var message = row.Message.replace(/"/g, "&quot;");

            var listHtml = '<li id="notification-' + row.Id + '">' +
                '<a href="#" class="detailAnnouncement" data-notifid="' + row.Id + '" data-title="' + title + '" data-message="' + message + '" data-attachment-uri="' + row.AttachmentUri + '" data-attachment="' + row.Attachment + '">' +
                '<div class="chat-message__time-stamp"><i class="fa fa-clock-o fa-fw"></i> Posted on ' + row.CreatedDateTime + '</div>' +
                '<div>' + title + '</div>' +
                '</a>' +
                '</li>';

            announcementContent += listHtml;
        });

        $('ul.dropdown-messages', $('#announcementTopBar')).prepend(announcementContent);

        $(".detailAnnouncement").click(function () {
            var title = $(this).data("title");
            var message = $(this).data("message");
            var attachmentName = $(this).data("attachment");
            var attachmentUri = $(this).data("attachment-uri");
            var attachment = '<br/><br/><span class="label label-attachment">' +
                '<a href="' + attachmentUri + '"><i class="fa fa-file-word-o fa-fw"></i>' + attachmentName + "</a></span>";
            if (attachmentName === "" || attachmentName === 'null' || attachmentUri === '#') {
                attachment = "";
            }

            var announcementId = $(this).data("notifid");
            $("#notification-" + announcementId, $('#announcementTopBar')).remove();
            var url = app.AnnouncementPanel.data("dismiss-url");
            submitData({
                'announcementId': announcementId
            }, url, function () {

                app._showDetailAnnouncementDialog(title, message, attachment);

                var numberOfNotificationList = $('li[id^="notification-"]').length;
                if (numberOfNotificationList > 0) {
                    $('span.count-badge', $('#announcementTopBar')).html(numberOfNotificationList);
                } else {
                    $('span.count-badge', $('#announcementTopBar')).hide();
                    $('#initialList a', $('#announcementTopBar')).html(app.AnnouncementPanel.data("no-announcement"));
                    $('#initialList a', $('#announcementTopBar')).show();
                }
            });

        });

        return true;
    },

    _showDetailAnnouncementDialog: function (announcementTitle, message, attachment) {
        BootstrapDialog.show({
            title: announcementTitle,
            message: message + attachment,
            cssClass: "modal--confirmation in",
            draggable: false,
            buttons: [{
                label: "OK",
                action: function (dialog) {
                    dialog.close();
                    $("body").removeClass("modal-open");
                    $(".modal-backdrop").remove();
                }
            }]
        });
    },

    _listenStudentOnline: function () {
        var self = this;
        var activeCountInterval = null;
        $(document).idle({
            onActive: function () {
                clearInterval(activeCountInterval);
            },
            onIdle: function () {
                activeCountInterval = setInterval(function () {
                    self._loadActiveStudentCount();
                }, self.DefaultCountInterval);
            },
            idle: self.DefaultIdleTimeout
        });
    },

    _loadActiveStudentCount: function () {
        var self = this;

        $.ajax({
            cache: false,
            async: true,
            type: "POST",
            url: self.TopBarNavigation.data("online-url"),
            success: function (data) {
                if (data.IsSuccess) {
                    if (data.IsUpdateNumber) {
                        $('#active-student-count').find(".count-badge").html(data.ActiveStudentCount);
                        self.MaximumFailureCall = 0;
                    } else {
                        self.MaximumFailureCall++;
                    }
                } else {
                    showInformation('Failed when fetching current active student. Will try again later...');
                    self.MaximumFailureCall++;
                }
            },
            error: function () {
                showInformation('Failed when fetching current active student. Will try again later...');
                self.MaximumFailureCall++;
                return false;
            }
        });
    },

    _displayStudentName: function () {
        var windowWidth = window.outerWidth;
        var navWidth = $(".navbar-top-links").width();

        if (windowWidth <= 1400 && navWidth >= 980) {
            $("#prefix-student-name-topbar").hide();
            $("#student-name-topbar").hide();
        } else {
            $("#prefix-student-name-topbar").show();
            $("#student-name-topbar").show();
        }
    }
};
(function ($, window) {
    "use strict";

    // Private Methods
    function initEventHandler() {
        var self = this;
        var form = self.Form;
        var type = $("#TypeCode").val();
        var startDateTime = $("#AppointmentDate").val();

        var eventHandler = {
            rescheduleBtnClick: function (e) {
                e.preventDefault();

                var showModal = function () {
                    $("#detailAppointmentDialog").modal("show")
                };

                $("#detailAppointmentDialog").on('hidden.bs.modal', function (e) {
                    $("#detailAppointmentDialog").off('hidden.bs.modal');

                    submitData({
                        "startDateTime": startDateTime,
                        "appointmentType": type
                    }, form.data("different-url"),
                        function (data) {

                            if (data.IsLessThan24Hour) {
                                showInfoDialog(data.Message);
                            } else {

                                var message = form.data("reschedule-message");
                                message = message.replace("[DATE TIME]", form.data("appointment-date"));
                                message = message.replace("[APPOINTMENT TYPE]", $("#Type").val());

                                showConfirmationDialog(message, proceedReschedule.bind(self), showModal, showModal);
                            }
                        });
                });

                $("#detailAppointmentDialog").modal("hide");
                
            },
            cancelBtnClick: function (e) {
                e.preventDefault();

                submitData({
                    "startDateTime": startDateTime,
                    "appointmentType": type
                }, form.data("different-url"), function (data) {
                    if (data.IsLessThan24Hour) {
                        showInfoDialog(data.MessageCancel);
                    } else {
                        var url = form.data("cancel-url");
                        url += "?appointmentId=" + $("#Id").val();

                        submitNonForm(form.data("delete-message"), url, function () {
                            showInformation(form.data("appointment-cancel"));
                            location.reload();
                        });
                    }
                });

            },
            viewAssessmentBtnClick: function () {
                var url = $(this).data("url");
                showPopup(url);
            }
        };

        $("#btnReschedule")
            .off("click")
            .on("click", eventHandler.rescheduleBtnClick);

        $("#btnCancelAppointment")
            .off("click")
            .on("click", eventHandler.cancelBtnClick);

        $("#btnShowDetail")
            .off("click")
            .on("click", eventHandler.viewAssessmentBtnClick);
    }

    function proceedReschedule() {
        var self = this;
        var form = self.Form;
        var type = $("#TypeCode").val();

        if (type === form.data("tutorial-code")) {
            checkLatestTutorialAppointment.call(self);
        } else {
            showSchedulerDialog.call(self);
        }
    }

    function checkLatestTutorialAppointment() {
        var self = this;
        var checkUrl = self.Form.data("get-latest-teacher-url");

        checkUrl += "?editedAppointmentId=" + $("#Id", self.Element).val();

        var onSuccessResponse = function (response) {
            if (response.Value.IsAvailable) {

                showYesNoConfirmationDialog(
                    response.Value.ConfirmationMessage,
                    showSchedulerDialog.bind(self, response.Value.TeacherId),
                    showSchedulerDialog.bind(self));

            } else {
                showSchedulerDialog.call(self);
            }
        };

        getDataWithLoaderAsync(checkUrl).done(onSuccessResponse);
    }

    function showSchedulerDialog(choicedTeacherId) {
        var self = this;
        var maintenanceDiv = generateMaintenanceDiv.call(self);
        var url = generateUrl.call(self, choicedTeacherId);

        setTimeout(function () {
            $("#detailAppointmentDialog").modal("hide");

            showProcessingDialog();

            loadApplicationContent(url,
                "GET",
                function (data) {
                    hideProcessingDialog();
                    $('#errorPane').html("");
                    maintenanceDiv.html("");
                    maintenanceDiv.append(data);

                    var helper = new Helper();
                    var namespace = helper.CreateNameSpaceFromURL(url);
                    var apps = new Application(maintenanceDiv, namespace);
                    apps.RegisterWithCaller(self);
                });
        }, 500);
    }

    function generateUrl(choicedTeacherId) {
        var self = this;
        var form = self.Form;
        var type = $("#TypeCode").val();
        var url = "";

        if (type === form.data("tutorial-code")) {
            url = generateTutorialEditUrl.call(self, choicedTeacherId);

        } else if (type === form.data("study-plan-code")) {
            url = form.data("study-plan-url");

        } else if (type === form.data("pre-test-code")) {
            url = form.data("pre-test-url");

        } else if (type === form.data("post-test-code")) {
            url = form.data("post-test-url");

        } else if (type === form.data("speaking-feedback-code") && type !== "") {
            url = form.data("speaking-feedback-url");
            url += "?isMiniMockTest=" + $("#IsMiniMockTest").val();
            url += "&isReschedule=true";
            url += "&appointmentId=" + $("#Id").val();

        }

        return url;
    }

    function generateTutorialEditUrl(choicedTeacherId) {
        var self = this;
        var url = "";

        if (choicedTeacherId !== null && choicedTeacherId !== undefined) {
            url = self.Form.data("tutorial-with-teacher-url");

            url += "?id=" + $("#Id", self.Element).val();
            url += "&teacherId=" + choicedTeacherId;

        } else {
            url = self.Form.data("tutorial-url");

            url += "?id=" + $("#Id", self.Element).val();

        }

        return url;
    }

    function generateMaintenanceDiv() {
        var self = this;
        var form = self.Form;
        var type = $("#TypeCode").val();
        var maintenanceDiv = "";

        if (type === form.data("tutorial-code")) {
            maintenanceDiv = $("#tutorialWrapper");

        } else if (type === form.data("study-plan-code")) {
            maintenanceDiv = $("#studyPlanWrapper");

        } else if (type === form.data("pre-test-code")) {
            maintenanceDiv = $("#preTestWrapper");

        } else if (type === form.data("post-test-code")) {
            maintenanceDiv = $("#postTestWrapper");

        } else if (type === form.data("speaking-feedback-code") && type !== "") {
            maintenanceDiv = $("#speakingFeedbackWrapper");

        }

        return maintenanceDiv;
    }

    // Constructor
    var studentDashboardCalendarDetailAppointment = function (element) {
        this.Element = element;
        this.Form = $("#detailAppointmentForm");
    };

    studentDashboardCalendarDetailAppointment.prototype = {
        constructor: studentDashboardCalendarDetailAppointment,
        Register: function () {
            var self = this;
            $("#Comment").attr("readonly", "readonly");
            initEventHandler.call(self, this);
        },
        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    // Export javascript class into window environment
    window.StudentDashboardCalendarDetailAppointment = studentDashboardCalendarDetailAppointment;
})(jQuery, window);;
var StudentDashboardContentShowStudyPathwayActivity = function (element) {
    this.Element = element;
    this.Caller = null;
    this.StudentPathwayPanel = $("#studentPathwayPanelSection");
    this.FilterForm = $("#filterActivityForm");
}

StudentDashboardContentShowStudyPathwayActivity.prototype = {
    constructor: StudentDashboardContentShowStudyPathwayActivity,
    Register: function () {
        var app = this;

        app._filterFormControl();

        $('[data-toggle="tooltip"]').tooltip();

        $(".activity-link", app.Element)
            .on("click",
                function () {
                    var element = $(this);
                    app.ShowPopUp(element.data("url"), element.data("param"), element.data("activity-id"));
                });

        $(".video-link", app.Element)
            .on("click",
                function () {
                    var element = $(this);
                    var actionType = element.data("action-type");
                    var activityId = element.data("activity-id");
                    var activityName = element.data("activity-name");
                    var videoUrl = element.data("url");
                    var callbackUrl = element.data("callback-url");

                    app.OpenVideo(actionType, activityId, activityName, videoUrl, callbackUrl);
                });

        $(".pronounce-download", app.Element)
            .on("click",
                function () {
                    var element = $(this);
                    var activityId = element.data("activity-id");
                    var callbackUrl = element.data("callback-url");
                    app.OpenE2PronounceDownloadDialog(activityId, callbackUrl);
                });

        $(".pdf-download", app.Element)
            .on("click",
                function () {
                    var element = $(this);
                    var activityId = element.data("activity-id");
                    var callbackUrl = element.data("callback-url");
                    app.OpenDocument(activityId, callbackUrl);
                });

        $(".target-link", app.Element)
            .on("click",
                function () {
                    var element = $(this);
                    var activityId = element.data("activity-id");
                    var callbackUrl = element.data("callback-url");
                    app.MarkAsClicked(activityId, callbackUrl);
            });

        $(".answer-link", app.Element)
            .on("click",
                function () {
                    var element = $(this);
                    var activityId = element.data("activity-id");
                    var callbackUrl = element.data("callback-url");
                    app.MarkAsViewed(activityId, callbackUrl);
                    app.ShowPopUp(element.data("url"), element.data("param"), element.data("activity-id"));
            });

        $(".upgrade-link", app.Element).on("click",
            function(e) {
                e.preventDefault();

                $('#upgradeStudentDialog').modal('show');
            });

        $("#studentPathwayButton").click(function() {
            app._generateQuestionStudentPathway();
        });

        if ($("#option-content").length > 0) {
            $("#btnFilter").removeClass("hidden");
        } else {
            $("#btnFilter").addClass("hidden");
        }

        $("#btnFilter").click(function() {

            $("#option-content").removeClass("hidden");

        });

        $("#btnSaveFilter").click(function() {

            app._constructFilterOption();
            var url = app.StudentPathwayPanel.data("filter-url");

            app.StudentPathwayPanel.find("#studentPathwayPanelBody").html('<span class="icon fa fa-refresh fa-spin"></span> ' + app.StudentPathwayPanel.data("loading-message"));

            submitFormWithoutLoader("filterActivityForm", url, function (result) {
                app.FilterForm.empty();

                var homeIndex = new StudentHomeIndex();
                homeIndex.GetPathwayActivityData();

            }, function(error) {

            });

            $("#option-content").addClass("hidden");

        });

        $("#btnCancelFilter").click(function() {

            $("#option-content").addClass("hidden");

        });


        $("#reCreateStudyPathWayButton").click(function () {
            app._generateQuestionStudentPathway();
        });
    },

    OpenVideo: function (actionType, activityId, activityName, videoUrl, callbackUrl) {
        videoUrl += '?actionType=' + actionType;
        videoUrl += '&activityId=' + activityId;

        var postData = { activityId: activityId };
        showVideo(videoUrl,
            activityName,
            function () {
                submitData(postData,
                    callbackUrl,
                    function (data) {
                        $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                        $("#panel-" + activityId).removeClass("panel-default");
                        $("#panel-" + activityId).addClass("panel-success");
                        $("#badge-" + activityId).addClass("badge--success");
                        $("#badge-" + activityId).html('Done');
                        $("#label-" + activityId).remove();
                        $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                        if (data.Value.IsGroupCompleted) {
                            $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                            $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                        }

                        if (data.Value.IsSubModuleCompleted) {
                            $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                            $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                        }
                    });
            });
    },

    OpenE2PronounceDownloadDialog: function (activityId, callbackUrl) {
        var app = this;

        $("#e2PronounceDownloadDialog").modal('show');
        $('#gplayLink').click(function () { app.SubmitE2PronounceProgress(activityId, callbackUrl) });
        $('#iTunesLink').click(function () { app.SubmitE2PronounceProgress(activityId, callbackUrl) });
    },

    OpenDocument: function (activityId, callbackUrl) {
        var app = this;
        var postData = { activityId: activityId };
        submitData(postData,
            callbackUrl,
            function (data) {
                $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                $("#panel-" + activityId).removeClass("panel-default");
                $("#panel-" + activityId).addClass("panel-success");
                $("#panel-" + activityId).removeClass("label-free");
                $("#badge-" + activityId).addClass("badge--success");
                $("#badge-" + activityId).html('Done');
                $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                if (data.Value.IsGroupCompleted) {
                    $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                    $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                }

                if (data.Value.IsSubModuleCompleted) {
                    $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                    $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                }

                var examPreparationBase = new StudentExamPreparationBase();
                examPreparationBase.UpdateDashboardActivityCourse(activityId, data.Value.PanelDescription, app.Element);
            });
    },

    MarkAsClicked: function (activityId, callbackUrl) {
        $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
        $("#panel-" + activityId).removeClass("panel-default");
        $("#panel-" + activityId).addClass("panel-success");
        $("#panel-" + activityId).removeClass("label-free");
        $("#badge-" + activityId).addClass("badge--success");
        $("#badge-" + activityId).html('Done');
    },

    SubmitE2PronounceProgress: function (activityId, callbackUrl) {
        var postData = { activityId: activityId };
        submitData(postData,
            callbackUrl,
            function (data) {
                $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                $("#panel-" + activityId).removeClass("panel-default");
                $("#panel-" + activityId).addClass("panel-success");
                $("#panel-" + activityId).removeClass("label-free");
                $("#badge-" + activityId).addClass("badge--success");
                $("#badge-" + activityId).html('Done');
                $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                if (data.Value.IsGroupCompleted) {
                    $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                    $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                }

                if (data.Value.IsSubModuleCompleted) {
                    $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                    $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                }
            });
    },

    MarkAsViewed: function (activityId, callbackUrl) {
        var postData = { activityId: activityId };
        submitData(postData,
            callbackUrl,
            function (data) {
                $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                $("#panel-" + activityId).removeClass("panel-default");
                $("#panel-" + activityId).addClass("panel-success");
                $("#badge-" + activityId).addClass("badge--success");
                $("#badge-" + activityId).html('Done');
                $("#label-" + activityId).remove();
                $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                if (data.Value.IsGroupCompleted) {
                    $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                    $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                }

                if (data.Value.IsSubModuleCompleted) {
                    $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                    $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                }
            });
    },

    ShowPopUp: function (url, param, id) {
        if (!param) param = 'activityId';
        url += '?' + param + '=' + id;
        showPopup(url);
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    _generateQuestionStudentPathway: function () {
        var app = this;
        var url = app.StudentPathwayPanel.data("question-url");

        showMaintenancePane(url,
            function(data) {
                $("#questionStudentPathwaySection").html(data);
                $("#studentPathwayDialog").modal("show");

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application("#questionStudentPathwaySection", namespace);
                apps.RegisterWithCaller(app);

            });

    },

    _constructFilterOption: function() {
        var app = this;

        app.FilterForm.empty();

        $('input.priority-setting:checked').each(function (index, row) {

            app.FilterForm.append('<input type="hidden" name="settingPriority_'+index+'" value="'+ $(this).val() +'" />');

        });

        $('input.showitem-checkbox:checked').each(function (index, row) {
            
            app.FilterForm.append('<input type="hidden" name="checkboxShowItems_' + index + '" value="' + $(this).val() + '" />');
        });
    },

    _filterFormControl: function() {

        $("input.priority-setting").change(function() {
            var value = $(this).val();
            
            if ($(this).is(":checked") && value === "-1") {
                $(".priority-setting.multiple").prop("checked", false);
            } else {
                $(".priority-setting.show-all").prop("checked", false);
            }

        });

        $("input.priority-setting").each(function () {
            var value = $(this).val();

            if ($(this).is(":checked") && value === "-1") {
                $(".priority-setting.multiple").prop("checked", false);
            } else {
                $(".priority-setting.show-all").prop("checked", false);
            }

        });
    }

};
(function ($, window) {
    "use strict";

    // Private Functions
    function initEventHandler() {
        var self = this;
        var eventHandler = {
            activityLinkClick: function () {
                var element = $(this);
                showPopUp.call(self, element.data("url"), element.data("param"), element.data("activity-id"));
            },
            videoLinkClick: function () {
                var element = $(this);
                var actionType = element.data("action-type");
                var activityId = element.data("activity-id");
                var activityName = element.data("activity-name");
                var videoUrl = element.data("url");
                var callbackUrl = element.data("callback-url");

                openVideo.call(self, actionType, activityId, activityName, videoUrl, callbackUrl);
            },
            pronounceDownloadLinkClick: function () {
                var element = $(this);
                var activityId = element.data("activity-id");
                var callbackUrl = element.data("callback-url");
                openE2PronounceDownloadDialog.call(self, activityId, callbackUrl);
            },
            pdfDownloadLinkClick: function () {
                var element = $(this);
                var activityId = element.data("activity-id");
                var callbackUrl = element.data("callback-url");
                openDocument.call(self, activityId, callbackUrl);
            },
            targetLinkClick: function () {
                var element = $(this);
                var activityId = element.data("activity-id");
                var callbackUrl = element.data("callback-url");
                markAsClicked.call(self, activityId, callbackUrl);
            },
            answerLinkClick: function () {
                var element = $(this);
                var activityId = element.data("activity-id");
                var callbackUrl = element.data("callback-url");
                markAsViewed.call(self, activityId, callbackUrl);
                showPopUp.call(self, element.data("url"), element.data("param"), element.data("activity-id"));
            },
            upgradeLinkClick: function () {
                $('#upgradeStudentDialog').modal('show');
            },
            studentPathwayBtnClick: function (e) {
                e.preventDefault();
                generateQuestionStudentPathway.call(self);
            },
            filterBtnClick: function (e) {
                e.preventDefault();
                $("#option-content").removeClass("hidden");
            },
            saveFilterBtnClick: function (e) {
                e.preventDefault();
                constructFilterOption.call(self);
                var url = self.StudentPathwayPanel.data("filter-url");

                self.StudentPathwayPanel.find("#studentPathwayPanelBody").html('<span class="icon fa fa-refresh fa-spin"></span> ' + self.StudentPathwayPanel.data("loading-message"));

                submitFormWithoutLoader("filterActivityForm", url, function (result) {
                    self.FilterForm.empty();

                    var homeIndex = new StudentHomeIndex();
                    homeIndex.GetPathwayActivityData();

                }, function (error) { });

                $("#option-content").addClass("hidden");
            },
            cancelFilterBtnClick: function (e) {
                e.preventDefault();
                $("#option-content").addClass("hidden");
            },
            recreateStudyPathwayBtnClick: function (e) {
                e.preventDefault();
                generateQuestionStudentPathway.call(self);
            },
            prioritySettingOptionChange: function () {
                var value = $(this).val();

                if ($(this).is(":checked") && value === "-1") {
                    $(".priority-setting.multiple").prop("checked", false);
                } else {
                    $(".priority-setting.show-all").prop("checked", false);
                }
            }
        };

        $(".activity-link", self.Element)
            .off("click")
            .on("click", eventHandler.activityLinkClick);

        $(".video-link", self.Element)
            .off("click")
            .on("click", eventHandler.videoLinkClick);

        $(".pronounce-download", self.Element)
            .off("click")
            .on("click", eventHandler.pronounceDownloadLinkClick);

        $(".pdf-download", self.Element)
            .off("click")
            .on("click", eventHandler.pdfDownloadLinkClick);

        $(".target-link", self.Element)
            .off("click")
            .on("click", eventHandler.targetLinkClick);

        $(".answer-link", self.Element)
            .off("click")
            .on("click", eventHandler.answerLinkClick);

        $(".upgrade-link", self.Element)
            .off("click")
            .on("click", eventHandler.upgradeLinkClick);

        $("#studentPathwayButton")
            .off("click")
            .on("click", eventHandler.studentPathwayBtnClick);

        $("#btnFilter")
            .off("click")
            .on("click", eventHandler.filterBtnClick);

        $("#btnSaveFilter")
            .off("click")
            .on("click", eventHandler.saveFilterBtnClick);

        $("#btnCancelFilter")
            .off("click")
            .on("click", eventHandler.cancelFilterBtnClick);

        $("#reCreateStudyPathWayButton")
            .off("click")
            .on("click", eventHandler.recreateStudyPathwayBtnClick);

        $("input.priority-setting")
            .on("change", eventHandler.prioritySettingOptionChange);
    }

    function initForm() {

        $("input.priority-setting").each(function () {
            var value = $(this).val();

            if ($(this).is(":checked") && value === "-1") {
                $(".priority-setting.multiple").prop("checked", false);
            } else {
                $(".priority-setting.show-all").prop("checked", false);
            }

        });

        $('[data-toggle="tooltip"]').tooltip();

        if ($("#option-content").length > 0) {
            $("#btnFilter").removeClass("hidden");
        } else {
            $("#btnFilter").addClass("hidden");
        }
    }

    function openVideo(actionType, activityId, activityName, videoUrl, callbackUrl) {
        videoUrl += '?actionType=' + actionType;
        videoUrl += '&activityId=' + activityId;

        var postData = { activityId: activityId };
        showVideo(videoUrl,
            activityName,
            function () {
                submitData(postData,
                    callbackUrl,
                    function (data) {
                        $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                        $("#panel-" + activityId).removeClass("panel-default");
                        $("#panel-" + activityId).addClass("panel-success");
                        $("#badge-" + activityId).addClass("badge--success");
                        $("#badge-" + activityId).html('Done');
                        $("#label-" + activityId).remove();
                        $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                        if (data.Value.IsGroupCompleted) {
                            $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                            $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                        }

                        if (data.Value.IsSubModuleCompleted) {
                            $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                            $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                        }
                    });
            });
    }

    function openE2PronounceDownloadDialog(activityId, callbackUrl) {
        var self = this;

        $("#e2PronounceDownloadDialog").modal('show');
        $('#gplayLink')
            .off("click")
            .on("click", function () { submitE2PronounceProgress.call(self, activityId, callbackUrl); });
        $('#iTunesLink')
            .off("click")
            .on("click", function () { submitE2PronounceProgress.call(self, activityId, callbackUrl); });
    }

    function openDocument(activityId, callbackUrl) {
        var self = this;
        var postData = { activityId: activityId };
        submitData(postData,
            callbackUrl,
            function (data) {
                $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                $("#panel-" + activityId).removeClass("panel-default");
                $("#panel-" + activityId).addClass("panel-success");
                $("#panel-" + activityId).removeClass("label-free");
                $("#badge-" + activityId).addClass("badge--success");
                $("#badge-" + activityId).html('Done');
                $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                if (data.Value.IsGroupCompleted) {
                    $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                    $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                }

                if (data.Value.IsSubModuleCompleted) {
                    $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                    $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                }

                var examPreparationBase = new StudentExamPreparationBase();
                examPreparationBase.UpdateDashboardActivityCourse(activityId, data.Value.PanelDescription, self.Element);
            });
    }

    function markAsClicked(activityId, callbackUrl) {
        $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
        $("#panel-" + activityId).removeClass("panel-default");
        $("#panel-" + activityId).addClass("panel-success");
        $("#panel-" + activityId).removeClass("label-free");
        $("#badge-" + activityId).addClass("badge--success");
        $("#badge-" + activityId).html('Done');
    }

    function submitE2PronounceProgress(activityId, callbackUrl) {
        var postData = { activityId: activityId };
        submitData(postData,
            callbackUrl,
            function (data) {
                $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                $("#panel-" + activityId).removeClass("panel-default");
                $("#panel-" + activityId).addClass("panel-success");
                $("#panel-" + activityId).removeClass("label-free");
                $("#badge-" + activityId).addClass("badge--success");
                $("#badge-" + activityId).html('Done');
                $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                if (data.Value.IsGroupCompleted) {
                    $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                    $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                }

                if (data.Value.IsSubModuleCompleted) {
                    $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                    $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                }
            });
    }

    function markAsViewed(activityId, callbackUrl) {
        var postData = { activityId: activityId };
        submitData(postData,
            callbackUrl,
            function (data) {
                $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                $("#panel-" + activityId).removeClass("panel-default");
                $("#panel-" + activityId).addClass("panel-success");
                $("#badge-" + activityId).addClass("badge--success");
                $("#badge-" + activityId).html('Done');
                $("#label-" + activityId).remove();
                $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                if (data.Value.IsGroupCompleted) {
                    $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                    $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                }

                if (data.Value.IsSubModuleCompleted) {
                    $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                    $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                }
            });
    }

    function showPopUp(url, param, id) {
        if (!param) param = 'activityId';
        url += '?' + param + '=' + id;
        showPopup(url);
    }

    function generateQuestionStudentPathway() {
        var self = this;
        var url = self.StudentPathwayPanel.data("question-url");

        showMaintenancePane(url,
            function (data) {
                $("#questionStudentPathwaySection").html(data);
                $("#studentPathwayDialog").modal("show");

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application("#questionStudentPathwaySection", namespace);
                apps.RegisterWithCaller(self);
            });
    }

    function constructFilterOption() {
        var self = this;

        self.FilterForm.empty();

        $('input.priority-setting:checked').each(function (index, row) {
            self.FilterForm.append('<input type="hidden" name="settingPriority_' + index + '" value="' + $(this).val() + '" />');
        });

        $('input.showitem-checkbox:checked').each(function (index, row) {
            self.FilterForm.append('<input type="hidden" name="checkboxShowItems_' + index + '" value="' + $(this).val() + '" />');
        });
    }


    // Constructor
    var studentDashboardStudyPathwayShowStudyPathwayActivity = function (element) {
        this.Element = element;
        this.Caller = null;
        this.StudentPathwayPanel = $("#studentPathwayPanelSection");
        this.FilterForm = $("#filterActivityForm");
    };

    studentDashboardStudyPathwayShowStudyPathwayActivity.prototype = {
        constructor: studentDashboardStudyPathwayShowStudyPathwayActivity,
        Register: function () {
            var self = this;

            initForm.call(self);
            initEventHandler.call(self);
        },
        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };


    // Export javascript class into window environment
    window.StudentDashboardStudyPathwayShowStudyPathwayActivity = studentDashboardStudyPathwayShowStudyPathwayActivity;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    function initFormValidation() {
        var self = this;

        self.RegisterForm.validate({
            rules: {
                Password: {
                    required: true
                }
            },
            highlight: function (element) {
                $(element).closest('.form-group').addClass('has-error');
            },
            unhighlight: function (element) {
                $(element).closest('.form-group').removeClass('has-error');
            }
        });
    }

    function initEventHandler() {
        var self = this;
        var eventHandler = {
            signUpButtonClicked: function (e) {
                e.preventDefault();

                var isValid = self.RegisterForm.valid();
                if (!isValid) {
                    return false;
                }

                var postData = {
                    Password: $("#Password", self.Element).val(),
                    E2SchoolPackageKey: $("#E2SchoolPackageKey", self.Element).val()
                };

                submitData(postData, self.RegisterUrl, function (response) {
                    $("#RegistrationProcess").remove();
                    $("#SuccessRegister").removeClass("hidden");
                    $("#e2s-studentid").html(response.Value);
                });
            }
        };

        $("#btnSignUp", self.Element).off("click").on("click", eventHandler.signUpButtonClicked)
    }

    var studentE2SchoolRegister = function (element) {
        this.Element = element;
        this.RegisterUrl = null;
        this.RegisterForm = $("#E2SchoolRegisterForm", this.Element);
    };

    studentE2SchoolRegister.prototype = {
        constructor: studentE2SchoolRegister,
        Register: function () {

            initFormValidation.call(this);
            initEventHandler.call(this);
        }
    };

    window.StudentE2SchoolRegister = studentE2SchoolRegister;
})(jQuery, window);;
var StudentExamPreparationActivityContent = function (element) {
    this.Element = element;
}

StudentExamPreparationActivityContent.prototype = {
    constructor: StudentExamPreparationActivityContent,
    Register: function () {
        var self = this;
        self._handleActivityAction();

    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    OpenVideo: function (actionType, activityId, activityName, videoUrl, callbackUrl) {
        var self = this;
        videoUrl += "?actionType=" + actionType;
        videoUrl += "&activityId=" + activityId;

        var postData = { activityId: activityId };
        showVideo(videoUrl,
            activityName,
            function () {
                submitData(postData,
                    callbackUrl,
                    function (data) {
                        $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                        $("#panel-" + activityId).removeClass("panel-default");
                        $("#panel-" + activityId).addClass("panel-success");
                        $("#badge-" + activityId).addClass("badge--success");
                        $("#badge-" + activityId).html("Done");
                        $("#label-" + activityId).remove();
                        $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                        if (data.Value.IsGroupCompleted) {
                            $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                            $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                        }

                        if (data.Value.IsSubModuleCompleted) {
                            $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                            $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                        }

                        var examPreparationBase = new StudentExamPreparationBase();
                        examPreparationBase.UpdatePanelProgress(self.Element, activityId);

                    });
            });
    },

    OpenE2PronounceDownloadDialog: function (activityId, callbackUrl) {
        var self = this;

        $("#e2PronounceDownloadDialog").modal("show");
        $("#gplayLink").click(function () { self.SubmitE2PronounceProgress(activityId, callbackUrl) });
        $("#iTunesLink").click(function () { self.SubmitE2PronounceProgress(activityId, callbackUrl) });
    },

    OpenDocument: function (activityId, callbackUrl) {
        var self = this;
        var postData = { activityId: activityId };
        submitData(postData,
            callbackUrl,
            function (data) {
                $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                $("#panel-" + activityId).removeClass("panel-default");
                $("#panel-" + activityId).addClass("panel-success");
                $("#panel-" + activityId).removeClass("label-free");
                $("#badge-" + activityId).addClass("badge--success");
                $("#badge-" + activityId).html("Done");
                $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                if (data.Value.IsGroupCompleted) {
                    $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                    $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                }

                if (data.Value.IsSubModuleCompleted) {
                    $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                    $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                }

                var examPreparationBase = new StudentExamPreparationBase();
                examPreparationBase.UpdatePanelProgress(self.Element, activityId);

            });
    },

    MarkAsClicked: function (activityId, callbackUrl) {
        $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
        $("#panel-" + activityId).removeClass("panel-default");
        $("#panel-" + activityId).addClass("panel-success");
        $("#panel-" + activityId).removeClass("label-free");
        $("#badge-" + activityId).addClass("badge--success");
        $("#badge-" + activityId).html("Done");
    },

    SubmitE2PronounceProgress: function (activityId, callbackUrl) {
        var self = this;
        var postData = { activityId: activityId };
        submitData(postData,
            callbackUrl,
            function (data) {
                $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                $("#panel-" + activityId).removeClass("panel-default");
                $("#panel-" + activityId).addClass("panel-success");
                $("#panel-" + activityId).removeClass("label-free");
                $("#badge-" + activityId).addClass("badge--success");
                $("#badge-" + activityId).html("Done");
                $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                if (data.Value.IsGroupCompleted) {
                    $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                    $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                }

                if (data.Value.IsSubModuleCompleted) {
                    $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                    $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                }

                var examPreparationBase = new StudentExamPreparationBase();
                examPreparationBase.UpdatePanelProgress(self.Element, activityId);

            });
    },

    MarkAsViewed: function (activityId, callbackUrl) {
        var self = this;
        var postData = { activityId: activityId };
        submitData(postData,
            callbackUrl,
            function (data) {
                $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                $("#panel-" + activityId).removeClass("panel-default");
                $("#panel-" + activityId).addClass("panel-success");
                $("#badge-" + activityId).addClass("badge--success");
                $("#badge-" + activityId).html("Done");
                $("#label-" + activityId).remove();
                $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                if (data.Value.IsGroupCompleted) {
                    $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                    $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                }

                if (data.Value.IsSubModuleCompleted) {
                    $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                    $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                }

                var examPreparationBase = new StudentExamPreparationBase();
                examPreparationBase.UpdatePanelProgress(self.Element, activityId);

            });
    },

    ShowPopUp: function (url, param, id) {
        if (!param) param = "activityId";
        url += "?" + param + "=" + id;
        showPopup(url);
    },

    _handleActivityAction: function () {
        var self = this;

        $(".activity-link", self.Element)
            .on("click",
                function () {
                    var element = $(this);
                    self.ShowPopUp(element.data("url"), element.data("param"), element.data("activity-id"));
                });

        $(".video-link", self.Element)
            .on("click",
                function () {
                    var element = $(this);
                    var actionType = element.data("action-type");
                    var activityId = element.data("activity-id");
                    var activityName = element.data("activity-name");
                    var videoUrl = element.data("url");
                    var callbackUrl = element.data("callback-url");

                    self.OpenVideo(actionType, activityId, activityName, videoUrl, callbackUrl);
                });

        $(".pronounce-download", self.Element)
            .on("click",
                function () {
                    var element = $(this);
                    var activityId = element.data("activity-id");
                    var callbackUrl = element.data("callback-url");
                    self.OpenE2PronounceDownloadDialog(activityId, callbackUrl);
                });

        $(".pdf-download", self.Element)
            .on("click",
                function () {
                    var element = $(this);
                    var activityId = element.data("activity-id");
                    var callbackUrl = element.data("callback-url");
                    self.OpenDocument(activityId, callbackUrl);
                });

        $(".target-link", self.Element)
            .on("click",
                function () {
                    var element = $(this);
                    var activityId = element.data("activity-id");
                    var callbackUrl = element.data("callback-url");
                    self.MarkAsClicked(activityId, callbackUrl);
                });

        $(".answer-link", self.Element)
            .on("click",
                function () {
                    var element = $(this);
                    var activityId = element.data("activity-id");
                    var callbackUrl = element.data("callback-url");
                    self.MarkAsViewed(activityId, callbackUrl);
                    self.ShowPopUp(element.data("url"), element.data("param"), element.data("activity-id"));
                });

    }
};
var StudentExamPreparationBase = function (element) {
    this.Element = element;
}

StudentExamPreparationBase.prototype = {
    constructor: StudentExamPreparationBase,
    Register: function () {
        var self = this;

    },

    UpdateDashboardActivityCourse: function (activityId, lastAnsweredMessage, element) {

        if (!$(".showitem-checkbox", element).is(":checked")) {
            $("li#activity-" + activityId, element).hide("slow",
                function() {
                    $(this).remove();
                });
        } else {

            $("li#activity-" + activityId, element).removeClass("panel-success");
            $("#tooltip-" + activityId, element).removeClass("hidden");
            $("#tooltip-" + activityId, element)[0].dataset["originalTitle"] = lastAnsweredMessage;

        }

    },

    UpdatePanelProgress: function (element, activityId) {
        var totalActivity = $("#panel-" + activityId, element).closest(".panel-with-progress").find(".panel-activity").length;
        var totalTakenActivity = 0;

        $("#panel-" + activityId, element).closest(".panel-with-progress").find(".panel-activity").each(function() {
            if ($(this).hasClass("panel-success")) {
                totalTakenActivity++;
            }
        });

        var percentage = Math.floor(totalTakenActivity / totalActivity * 100);
        $("#panel-" + activityId, element).closest(".panel-with-progress").find(".progress-bar").width(percentage + "%");

        if (totalTakenActivity === totalActivity) {
            $("#panel-" + activityId, element).closest(".panel-with-progress").find(".percentage-text").hide();
        } else {
            $("#panel-" + activityId, element).closest(".panel-with-progress").find(".percentage-text").show();
            $("#panel-" + activityId, element).closest(".panel-with-progress").find(".percentage-text").text(percentage + "% Completed");
        }

    },

    RetryActivityWithMultipleTextboxes: function (inputElementStartWithId) {
        var self = this;
        var element = self.Element;
        inputElementStartWithId.each(function (index, value) {
            if ($(this).hasClass('wrong-answer')) {
                $(this).val('').prop("disabled", false).removeClass('wrong-answer');
            } else {
                $(this).prop("disabled", false).prop("readonly", true);
            }
        });

        $("#submitButton", element).show();
        $('#info-section', element).addClass("hidden");
        $('#info-submit-section', element).addClass("hidden");
        $('#retryButton', element).addClass("hidden");
    },

    UpdateWindowOpenerActivity: function (mobileSiteUrl, activityId, submitResponse) {
        var firstInfoText = "";
        var content = {};

        if (submitResponse === null) {
            content = {
                message: null,
                activityId: activityId
            };

        } else {
            if (submitResponse.FirstAnsweredMessage !== "") {
                firstInfoText += submitResponse.FirstAnsweredMessage + "</br></br>";
            }

            var message = "Task Completed.</br></br>" +
                firstInfoText +
                submitResponse.LastAnsweredMessage;

            content = {
                message: message,
                activityId: activityId
            };

        }

        window.opener.postMessage(content, mobileSiteUrl);

    }
};
var StudentExamPreparationIndex = function (element) {
    this.Element = element;
    this.ModuleId = 0;
    this.CourseMaintenanceUrl = $("#CourseUrl");
}

StudentExamPreparationIndex.prototype = {
    constructor: StudentExamPreparationIndex,
    Register: function () {
        var self = this;

        var initialTab = $('#course-tab a[data-toggle="tab"]').parent(".active");
        this.ModuleId = initialTab.find("a").data("module-id");
        this._loadSubModuleContent();

        $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            self.ModuleId = $(e.target).data("module-id");
            self._loadSubModuleContent();
        });

    },

    _loadSubModuleContent: function () {
        var self = this;

        var viewContainer = $("#module-" + self.ModuleId);
        if (!viewContainer.hasClass("no-sub-module-data")) {
            return;
        }

        var subModuleUrl = this.CourseMaintenanceUrl.data("submodule-url");
        subModuleUrl += "?moduleId=" + this.ModuleId;

        showPartialViewAsync(subModuleUrl)
            .done(function (content) {

                viewContainer.removeClass("no-sub-module-data");
                viewContainer.html(content);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(subModuleUrl);
                var apps = new Application(viewContainer, namespace);
                apps.RegisterWithCaller(self);

            }).fail(function () {

            });
    }

};
var StudentExamPreparationMockTest = function (element) {
    this.Element = element;
    this.NumberOfRetry = 0;
}

StudentExamPreparationMockTest.prototype = {
    constructor: StudentExamPreparationMockTest,
    Register: function () {
        var self = this;

    },

    UpdateActivityAfterSubmit: function (submitResult) {
        var self = this;

        $("#submitButton").hide();

        if ((self.NumberOfRetry < 3) && (submitResult.Value.ActualTotalPoint !== submitResult.Value.ExpectedTotalPoint)) {
            $("#retryButton").removeClass("hidden");

        } else if ((self.NumberOfRetry < 3) && (submitResult.Value.ActualTotalPoint === submitResult.Value.ExpectedTotalPoint)) {
            $("#retryButton").addClass("hidden");
            $("#info-submit-section").html(submitResult.Value.SubmitAnsweredMessage);

        }

    },

    UpdateMultipleChoiceAfterSubmit: function (submitResult) {
        var self = this;

        $.each(submitResult.Value.CurrentMultipleChoiceAnswers,
            function (index, element) {
                if (element.IsCorrectAnswer) {
                    $("#questionText-" + element.QuestionId).addClass("is-correct");
                    $("#radioSection-" + element.QuestionId + "-" + element.AnswerId).addClass("is-right");
                } else {
                    $("#questionText-" + element.QuestionId).addClass("is-incorrect");
                    $("#radioSection-" + element.QuestionId + "-" + element.AnswerId).addClass("is-wrong");
                }
            });

        if ((self.NumberOfRetry >= 3) || (submitResult.Value.ActualTotalPoint === submitResult.Value.ExpectedTotalPoint)) {
            $.each(submitResult.Value.ExpectedMultipleChoiceAnswers,
                function (index, element) {
                    if (element.IsCorrectAnswer) {
                        $("#radioSection-" + element.QuestionId + "-" + element.AnswerId).addClass("is-right");
                    } else {
                        $("#radioSection-" + element.QuestionId + "-" + element.AnswerId).addClass("is-wrong");
                    }
                });
        }

        $("input[type=radio]").attr("disabled", true);
    },

    RetryActivity: function () {
        var self = this;

        $("#retryButton").addClass("hidden");
        $("#info-section").addClass("hidden");
        $("#info-submit-section").addClass("hidden");
        $("#submitButton").show();
        $(".wrapper-question").show();

        $(".wrapper-question").each(function () {
            var wrapper = $(this);
            var question = wrapper.find(".list-questions");

            wrapper.find(".show-hint").show();

            var readingInstruction = wrapper.find(".reading-instruction");
            if (readingInstruction.length > 0) {
                wrapper.find(".next-btn").removeAttr("disabled");
            }

            var isAudioInstruction = wrapper.hasClass("audio-instruction");
            if (isAudioInstruction) {
                wrapper.find(".next-btn").hide();
            }

            self._retryMultipleChoice(wrapper, question);

        });

        $(".panel-collapse.in").collapse("hide");

    },

    _retryMultipleChoice: function (wrapper, question) {

        var isIncorrect = wrapper.find(".is-incorrect");

        if (isIncorrect.length > 0) {
            isIncorrect.removeClass("is-incorrect");
            question.find(".radio").removeClass("is-wrong");
        } else {
            wrapper.find(".next-btn").prop("disabled", false);
            wrapper.find("#submitButton").prop("disabled", false);
        }

        question.find("input[type='radio']").prop("disabled", false);

    }

};
var StudentExamPreparationSubModuleContent = function (element) {
    this.Element = element;
    this.SubModuleId = 0;
    this.CourseMaintenanceUrl = $("#CourseUrl");
}

StudentExamPreparationSubModuleContent.prototype = {
    constructor: StudentExamPreparationSubModuleContent,
    Register: function () {
        var self = this;

        $(".panel-group", self.Element)
            .on("shown.bs.collapse", function (e) {
                self.SubModuleId = $(e.target).data("submodule-id");
                self._loadActivityContent();
            });

        $("div[id^='subModule']").on('show.bs.collapse', function () {
            $(this).find(".panel-accordion.sub-accordion").find('.collapse.in').collapse('hide');
        });

    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    _loadActivityContent: function () {
        var self = this;

        if (self.SubModuleId === undefined) {
            return;
        }

        var viewContainer = $("#subModule-" + self.SubModuleId);
        if (!viewContainer.hasClass("no-activity-data")) {

            scrollToElement("subModule-" + self.SubModuleId);
            return;
        }

        var subModuleUrl = this.CourseMaintenanceUrl.data("activity-url");
        subModuleUrl += "?subModuleId=" + this.SubModuleId;

        showPartialViewAsync(subModuleUrl)
            .done(function (content) {

                viewContainer.removeClass("no-activity-data");
                viewContainer.html(content);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(subModuleUrl);
                var apps = new Application(viewContainer, namespace);
                apps.RegisterWithCaller(self);

                scrollToElement("subModule-" + self.SubModuleId);

            }).fail(function () {

            });
    }
};
var StudentExamPreparationWritingAssessment = function(element) {
    this.Element = element;
    this.MaintenanceForm = $("#maintenanceAssessmentData");
    this.MaxWord = this.MaintenanceForm.data("maximum-words");
};

StudentExamPreparationWritingAssessment.prototype = {
    constructor: StudentExamPreparationWritingAssessment,
    Register: function() {
    },

    SubmitActivity: function(onSuccess) {
        var self = this;

        if (!this._isValidForm()) {
            return;
        }

        submitForm("#maintenanceForm",
            self.MaintenanceForm.data("submit-url"),
            function(data) {

                $("#submitButton").hide();
                $("#AnswerText").attr("disabled", "disabled");
                $("#AnswerText").attr("readonly", "readonly");
                $("#closeButton").removeClass("hidden");
                $("#info-submit-section").html(self.MaintenanceForm.data("submitted-message"));
                $("#answer-panel").removeClass("hidden");
                $(".answer-panel").removeClass("hidden");
                $("#info-date-section").removeClass("hidden");
                $("#info-submit-section").removeClass("hidden");
                $("#submit-date-section").html(data.Value.SubmittedDate);
                $("#errorPane").hide();

                onSuccess(data);

            },
            function() { return true; });
    },

    RetryActivity: function(durationText, counterAction, timerAction) {
        $('#info-submit-section').addClass("hidden");
        $('#answer-panel').addClass("hidden");
        $('.answer-panel').addClass("hidden");
        $('#retryButton').addClass("hidden");
        $('#submitButton').removeClass("hidden");
        $("#submitButton").show();
        $('#AnswerText').html('');
        $('#AnswerText').val('');
        $('#AnswerText').text('');
        $("#AnswerText").removeAttr("disabled");
        $("#AnswerText").removeAttr("readonly");

        $('#time-duration').html(durationText);
        $('#writing-duration').html(durationText);

        if (typeof counterAction !== 'undefined') {
            counterAction();
        }   

        if (typeof timerAction !== 'undefined') {
            timerAction();
        }   

    },

    _isValidForm: function() {
        var self = this;
        var answerText = $("#AnswerText").val().trim();

        if (answerText.length === 0) {
            showErrorDialog(self.MaintenanceForm.data("empty-answer-message"));
            return false;
        }

        var wordCount = counter();
        var maximumWords = self.MaxWord;
        if (wordCount > maximumWords) {
            $("#errorPane").html(self.MaintenanceForm.data("word-limit-message"));
            $("#errorPane").show();
            return false;
        }

        return true;
    }

};;
(function ($, window) {
    "use strict";

    // Private Methods

    function prepareAudio() {
        var self = this;
        initAudioPlayerWidget($("#audioPlayerPanel"), true);
        stopAudio.call(self);
    }

    function stopAudio() {
        var sounds = $(".audio-player");
        var i;
        for (i = 0; i < sounds.length; i++) sounds[i].pause();
    }

    // Constructor
    var studentIeltsListeningMockTestStartPage = function (element) {
        this.Element = element;
    };

    studentIeltsListeningMockTestStartPage.prototype = {
        constructor: studentIeltsListeningMockTestStartPage,
        Register: function () {
            var self = this;

            self.Initialize();
        },
        Initialize: function () {
            var self = this;
            prepareAudio.call(self);

            $("#btnContinue")
                .off("click")
                .on("click", function (e) {
                    e.preventDefault();
                    stopAudio.call(self);
                    $("#audioInstructionPanel").addClass("hidden");
                    $("#startTestPanel").removeClass("hidden");
                });
        }
    };

    // Export javascript class into window environment
    window.StudentIeltsListeningMockTestStartPage = studentIeltsListeningMockTestStartPage;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    // Private Methods

    function prepareAudio() {
        var self = this;
        initAudioPlayerWidget($("#audioPlayerPanel"));
        startAudio.call(self);
    }

    function prepareTimer() {
        var self = this;

        if (self.CountDown !== undefined) {
            clearInterval(self.CountDown);
        }

        if (self.Interval !== undefined) {
            clearInterval(self.Interval);
        }

        var duration = 0;
        var wrapper = $(".wrapper-section");
        if (wrapper.length) {
            duration = wrapper.data("duration");
        }

        $("#mock-test-timer").html($("#mock-test-timer").data("duration"));

        if (duration !== 0) {
            self.Interval = setInterval(function () {
                DynamicTimerWithCustomInterval("#mock-test-timer", "",
                    function () { timeOut.call(self); },
                self.Interval);
            },
                1000);
            self.CountDown = self.Interval;
        }
    }

    function initEventHandler() {
        var self = this;
        var eventHandler = {
            textKeyUpChange: function () {
                var element = $(this);
                var questionLabel = element.parents(".question-container").data("question-label");
                var circleEl = $("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }
                if (element.val().trim() === "") {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
                else {
                    circleEl.removeClass("unanswered").addClass("answered");
                }
            },
            textChange: function () {
                var updatedWidth = this.scrollWidth + 5;
                $(this).attr("style", "width:" + updatedWidth + "px");
            },
            radioChange: function () {
                var element = $(this);
                var questionLabel = element.parents(".question-container").data("question-label");
                var circleEl = $("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }
                if (element.value !== null) {
                    circleEl.removeClass("unanswered").addClass("answered");
                }
                else {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
            },
            checkboxChange: function () {
                var element = $(this);
                var questionContainer = element.parents(".question-container");
                var questionLabel = questionContainer.data("question-label");
                var circleEl = $("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }

                var totalChecked = questionContainer.find("input:checkbox:checked").length;
                var maxCheckedAnswer = questionContainer.data("max-answer");

                if (totalChecked > maxCheckedAnswer) {
                    $(this).prop("checked", false);
                    return;
                }

                if (totalChecked > 0) {
                    circleEl.removeClass("unanswered").addClass("answered");
                } else {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
            },
            submitBtnClick: function (e) {
                e.preventDefault();

                var currWrapper = $(".wrapper-section");
                var message = currWrapper.data("confirmation-message");
                var timer = currWrapper.find(".timer-duration-panel").html();

                if (timer !== '00:00') {
                    showYesNoConfirmationDialog(message,
                        function () {
                            saveAnswer.call(self, "maintenanceForm");
                        },
                        function () { return; }
                    );
                }
                else {
                    saveAnswer.call(self, "maintenanceForm");
                }
            },
            retryBtnClick: function (e) {
                e.preventDefault();
                setTestEnabled.call(self, true);

                updateStateFibTest.call(self, self.SubmitResponse);
                updateStateTcTest.call(self, self.SubmitResponse);
                updateStateMcsaTest.call(self, self.SubmitResponse);
                updateStateMcmaTest.call(self, self.SubmitResponse);

                $(".retry-btn").addClass("hidden");
                $(".submit-btn").removeClass("hidden");
                $(".show-answer-btn").addClass("hidden");
                self.DisabledMode = false;

                goTo.call(self, 1, self.CurrentSectionGroupIndex);
                prepareTimer.call(self);
                prepareAudio.call(self);
            },
            closeBtnClick: function () {
                window.close();
            },
            prevBtnClick: function (e) {
                e.preventDefault();
                var targetSectionGroupIndex = parseInt(self.CurrentSectionGroupIndex) - 1;
                goTo.call(self, targetSectionGroupIndex, self.CurrentSectionGroupIndex);
            },
            nextBtnClick: function (e) {
                e.preventDefault();
                var targetSectionGroupIndex = parseInt(self.CurrentSectionGroupIndex) + 1;
                goTo.call(self, targetSectionGroupIndex, self.CurrentSectionGroupIndex);
            },
            showAnswerBtnClick: function (e) {
                e.preventDefault();

                $(e.currentTarget).hide();

                var currentSectionGroup = $("#section-group-" + self.CurrentSectionGroupIndex);

                var mainElement = self.Element;
                self.Element = currentSectionGroup;
                self.Element.data("is-show-answer", "False");
                markMcsaTest.call(self, self.SubmitResponse, true);
                markMcmaTest.call(self, self.SubmitResponse, true);
                markTcTest.call(self, self.SubmitResponse, true);
                markFibTest.call(self, self.SubmitResponse, true);
                self.Element = mainElement;
            }
        };

        $("input[type=text]").bind("keyup change", eventHandler.textKeyUpChange);

        $("input[type=text]").change(eventHandler.textChange);

        $("input[type=radio]")
            .off("change")
            .on("change", eventHandler.radioChange);

        $("input[type=checkbox]")
            .off("change")
            .on("change", eventHandler.checkboxChange);

        $(".submit-btn")
            .off("click")
            .on("click", eventHandler.submitBtnClick);

        $(".retry-btn")
            .off("click")
            .on("click", eventHandler.retryBtnClick);

        $(".closeButton")
            .off("click")
            .on("click", eventHandler.closeBtnClick);

        $(".prev-btn")
            .off("click")
            .on("click", eventHandler.prevBtnClick);

        $(".next-btn")
            .off("click")
            .on("click", eventHandler.nextBtnClick);

        $(".show-answer-btn")
            .off("click")
            .on("click", eventHandler.showAnswerBtnClick);
    }

    function initializeQuestionPalette() {
        var self = this;
        $(".question-palette-pane .circle-question-palette")
            .off("click")
            .on("click", function (e) {
                e.preventDefault();
                var el = $(this);
                var question = el.data("question");
                setFocus.call(self, question);
            });

    }

    function initializeWordCount() {
        $(".wordCount").html('0');
    }

    function initializeHighlightBar() {
        var self = this;
        $(".highlighter").click(function (e) {
            e.preventDefault();
            var css = $(e.currentTarget).data("css");
            highlightText.call(self, css);
        });

        $(".unhighlight").click(function (e) {
            e.preventDefault();
            unHighlightText.call(self);
        });
    }

    function initializeHighlight() {
        var self = this;
        $(".selectable-text")
            .off("mouseup")
            .on("mouseup", function (n) {
                var el = $(n.target);

                if (!el.hasClass("dragdrop") && !el.hasClass("form-control")) {
                    markSelection.call(self);
                    n.target.tagName === "SPAN" && n.target.className.includes("highlight") && (self.LastHighlight = n.target);
                }
                else {
                    $(".formatbar").hide();
                }
            });
    }

    function setInputEnabled(isEnabled) {
        var self = this;
        var form = self.MaintenanceForm;

        if (self.DisabledMode !== true) {
            return;
        }

        if (isEnabled) {
            form.find("input")
                .not('[name*="MockTestId"]')
                .not('[name*="ActivityId"]')
                .removeAttr("disabled");
        }
        else {
            form.find("input")
                .not('[name*="MockTestId"]')
                .not('[name*="ActivityId"]')
                .attr("disabled", "disabled");
        }
    }

    function setFocus(question) {
        var self = this;
        var inputEl;
        if ($("#question-" + question).find(".form-control").length) {
            inputEl = $("#question-" + question).find(".form-control")[0];
        }
        else if ($("#question-" + question + " .sentence-text").length) {
            inputEl = $("#question-" + question + " .sentence-text")[0];
            $(inputEl).attr("tabIndex", "0");
        }
        else if ($("#question-" + question).length) {
            inputEl = $("#question-" + question)[0];
            $(inputEl).attr("tabIndex", "0");
        }
        else {
            return;
        }

        var targetSectionGroupIndex = $("#question-" + question).parents(".panelSectionGroup").data("index");
        goTo.call(self, targetSectionGroupIndex, self.CurrentSectionGroupIndex);

        setInputEnabled.call(self, true);
        $(inputEl).focus();
        setInputEnabled.call(self, false);
    }

    function saveAnswer(formName) {
        var self = this;
        clearInterval(self.CountDown);
        stopAudio.call(self);

        var url = $("#" + formName + " .wrapper-section").data("save-url");
        constructSubmitData.call(self, formName);

        submitForm("#" + formName,
            url,
            function (data) {
                self.SubmitResponse = data;
                self.NumberOfRetry++;
                $('#firstInfo').html(data.Value.PanelResult.FirstAnsweredMessage);
                $('#lastInfo').html(data.Value.PanelResult.LastAnsweredMessage);
                $('.band-score').html(data.Value.IeltsBandScore);
                markAnswer.call(self, data);
                updateParentActivityPanel.call(self, data);
                $(".formatbar").hide();
                $(".content-panel").scrollTop(0);
            });
    }

    function stopAudio() {
        var sounds = $(".audio-player");
        var i;
        for (i = 0; i < sounds.length; i++) sounds[i].pause();
    }

    function markAnswer(data) {
        var self = this;

        if (self.NumberOfRetry === 2) {
            $(".panelSectionGroup", self.Element).data("is-show-answer", "True");
            $(".show-answer-btn").show();
            $(".show-answer-btn").removeClass("hidden");            
        }

        if (self.NumberOfRetry < 3 && (data.Value.ActualTotalPoint !== data.Value.ExpectedTotalPoint)) {
            $('#info-submit-section').removeClass("hidden");            
            $('#info-submit-section').html(data.Value.SubmitAnsweredMessage + '<br/><br/>');
            $('#info-submit-section').append(self.Element.data('answer-text'));
            markMcsaTest.call(self, data, false);
            markMcmaTest.call(self, data, false);
            markTcTest.call(self, data, false);
            markFibTest.call(self, data, false);

            $(".retry-btn").removeClass("hidden");
            $(".submit-btn").addClass("hidden");
        }
        else {

            markMcsaTest.call(self, data, true);
            markMcmaTest.call(self, data, true);
            markTcTest.call(self, data, true);
            markFibTest.call(self, data, true);

            $('#info-submit-section').html(data.Value.SubmitAnsweredMessage);
            $(".retry-btn").addClass("hidden");
            $(".submit-btn").addClass("hidden");
        }
        setTestEnabled.call(self, false);
        self.DisabledMode = true;
    }

    function setTestEnabled(isEnabled) {
        var self = this;
        var form = self.MaintenanceForm;
        if (isEnabled) {
            form.find("input.wrong-answer").removeAttr("disabled");
            form.find(".is-incorrect input").removeAttr("disabled");
            form.find(".is-incorrect").parents(".mcsa.list-questions").find("input").removeAttr("disabled");
            form.find(".is-incorrect").parents(".mcma.list-questions").find("input").removeAttr("disabled");
            form.find(".question-container td.is-incorrect").each(
                function () {
                    var id = $(this).prop("id").replace("questionText-", "");
                    $(".radio[id^='radioSection-" + id + "'] input").removeAttr("disabled");
                });
            $(".player-control").removeClass("disabled");
            $("input[name='showDefaultAudioPlayerCheckbox']").removeAttr("disabled");
        }
        else {
            form.find("input")
                .not('[name*="MockTestId"]')
                .not('[name*="ActivityId"]')
                .attr("disabled", "disabled");
            $(".player-control").addClass("disabled");
            $("input[name='showDefaultAudioPlayerCheckbox']").attr("disabled", "disabled");
        }
    }

    function markMcsaTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedMultipleChoiceAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.IsCorrectAnswer) {
                        var el = self.Element.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                        el.addClass("is-right");
                    }
                });
        };

        $.each(data.Value.CurrentMultipleChoiceAnswers, function (index, element) {
            var el = self.Element.find("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioEl = $("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (element.IsCorrectAnswer) {
                    if (radioEl.length) {
                        radioEl.addClass("is-right");
                    }
                    el.addClass("is-correct");
                } else {
                    if (radioEl.length) {
                        radioEl.addClass("is-wrong");
                    }
                    el.addClass("is-incorrect");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
            }
        });
    }

    function markMcmaTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedMultipleChoiceMultipleAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.IsCorrectAnswer) {
                        var checkBoxEl = self.Element.find("#paragraph-" + element.AnswerId);
                        checkBoxEl.addClass("is-right");
                    }
                });
        };

        $.each(data.Value.CurrentMultipleChoiceMultipleAnswers, function (index, element) {
            var el = self.Element.find("#questionText-" + element.QuestionId);
            if (el.length) {
                var checkBoxEl = self.Element.find("#paragraph-" + element.AnswerId);
                if (element.IsCorrectAnswer) {
                    if (checkBoxEl.length) {
                        checkBoxEl.addClass("is-right");
                    }
                    el.addClass("is-correct");
                } else {
                    if (checkBoxEl.length) {
                        checkBoxEl.addClass("is-wrong");
                    }
                    el.addClass("is-incorrect");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
            }
        });
    }

    function markTcTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedTickableColumnAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.IsCorrectAnswer) {
                        var el = self.Element.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                        el.addClass("is-right");
                    }
                });
        };

        $.each(data.Value.CurrentTickableColumnAnswers, function (index, element) {
            var el = self.Element.find("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioEl = self.Element.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (element.IsCorrectAnswer) {
                    if (radioEl.length) {
                        radioEl.addClass("is-right");
                    }
                    el.addClass("is-correct");
                } else {
                    if (radioEl.length) {
                        radioEl.addClass("is-wrong");
                    }
                    el.addClass("is-incorrect");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
            }
        });
    }

    function markFibTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId, answerKey) {
            $.each(data.Value.ExpectedFillInTheBlankAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.AnswerKey === answerKey) {
                        var el = self.Element.find("#input-" + element.QuestionId + "-" + element.AnswerKey);
                        if (el.val() === "") {
                            el.val(element.AnswerText);
                        } else {
                            el.val(el.val() + " / " + element.AnswerText);
                        }
                    }
                });
        };

        $.each(data.Value.CurrentFillInTheBlankAnswers, function (index, element) {
            var el = self.Element.find("#input-" + element.QuestionId + "-" + element.AnswerKey);
            if (el.length) {
                if (element.IsCorrectAnswer) {
                    el.addClass("correct-answer");
                } else {
                    el.addClass("wrong-answer");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId, element.AnswerKey);
                    }
                }
            }
        });

        self.Element.find("input[type='text']").each(function () {
            var updatedWidth = this.scrollWidth + 5;

            if (this.clientWidth !== 0 && this.scrollWidth !== 0 && this.clientWidth < updatedWidth) {
                $(this).attr("style", "width:" + updatedWidth + "px");
            }            
        });
    }

    function updateStateFibTest(data) {
        $.each(data.Value.CurrentFillInTheBlankAnswers, function (index, element) {
            var el = $("#input-" + element.QuestionId + "-" + element.AnswerKey);
            if (el.length) {
                if (!element.IsCorrectAnswer) {
                    el.removeClass("wrong-answer");
                    el.removeClass("correct-answer");
                    el.val("");
                }
            }
        });
    }

    function updateStateTcTest(data) {
        $.each(data.Value.CurrentTickableColumnAnswers, function (index, element) {
            var el = $("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioWrapper = el.parents("table.tickable-table").find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (!element.IsCorrectAnswer) {
                    if (radioWrapper.length) {
                        radioWrapper.removeClass("is-wrong");
                        radioWrapper.removeClass("is-right");
                        radioWrapper.find("input[type='radio']").prop("checked", false);
                    }
                    el.removeClass("is-incorrect");
                }

                el.parents("table.tickable-table").find("div[id^='radioSection']").each(function () {
                    var isCheckedRadioEl = $(this).find("input[type='radio']").is(":checked");
                    if (!isCheckedRadioEl) {
                        $(this).removeClass("is-right");
                    }
                });
            }
        });
    }

    function updateStateMcsaTest(data) {
        $.each(data.Value.CurrentMultipleChoiceAnswers, function (index, element) {
            var el = $("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioWrapper = el.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (!element.IsCorrectAnswer) {
                    if (radioWrapper.length) {
                        radioWrapper.removeClass("is-wrong");
                        radioWrapper.removeClass("is-right");
                        radioWrapper.find("input[type='radio']").prop("checked", false);
                    }
                    el.removeClass("is-incorrect");
                }

                el.find("div[id^='radioSection']").each(function () {
                    var isCheckedRadioEl = $(this).find("input[type='radio']").is(":checked");
                    if (!isCheckedRadioEl) {
                        $(this).removeClass("is-right");
                    }
                });
            }
        });
    }

    function updateStateMcmaTest(data) {
        $.each(data.Value.CurrentMultipleChoiceMultipleAnswers, function (index, element) {
            var el = $("#questionText-" + element.QuestionId);
            if (el.length) {
                var checkBoxWrapper = el.parent().find("#paragraph-" + element.AnswerId);
                if (!element.IsCorrectAnswer) {
                    if (checkBoxWrapper.length) {
                        checkBoxWrapper.removeClass("is-wrong");
                        checkBoxWrapper.find("input[type='checkbox']").prop("checked", false);
                    }
                    el.removeClass("is-incorrect");
                }
            }
        });
    }

    function startAudio() {
        var self = this;
        var timerNumber = 0;

        self.BeforePlayAudioCountDown = setInterval(function () {
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                $(".audioPlayer").removeClass("disabled-audio");
                stopBeforePlayAudioCountdown.call(self);
            }
        },
            1000);

        audioPlayerHandle.call(self);
    }

    function audioPlayerHandle(onPlay, onEnded) {
        var self = this;
        var audioPlayerEl = $("#audioPlayerPanel audio");

        if (audioPlayerEl.length === 0) {
            return;
        }

        var eventHandler = {
            play: function () {
                audioPlayerEl.find(".e2l-audio-player-footer").addClass("hidden");

                if (self.BeforePlayAudioCountDown !== null || self.DisabledMode) {
                    this.pause();
                    return;
                }

                if (typeof onPlay === "function") {
                    onPlay($(this));
                }
            },
            ended: function () {
                if (self.DisabledMode) {
                    return;
                }

                if (typeof onEnded === "function") {
                    onEnded();
                }
            }
        };

        audioPlayerEl
            .off("play")
            .on('play', eventHandler.play);

        audioPlayerEl
            .off("ended")
            .on('ended', eventHandler.ended);
    }

    function stopBeforePlayAudioCountdown() {
        var self = this;
        var audioPlayerEl = $("#audioPlayerPanel audio");
        var id = audioPlayerEl.prop("id");

        if (audioPlayerEl.length && audioPlayerEl[0] !== undefined) {
            var playAudioPromise = audioPlayerEl[0].play();
            if (playAudioPromise !== undefined) {
                playAudioPromise.then(_ => {
                    $(".e2l-audio-player-footer").addClass("hidden");
                }).catch(error => {
                    $(".e2l-audio-player-footer").removeClass("hidden");
                });
            } else {
                $(".e2l-audio-player-footer").removeClass("hidden");
            }
        } else {
            $(".e2l-audio-player-footer").removeClass("hidden");
        }

        if (self.BeforePlayAudioCountDown !== undefined || self.BeforePlayAudioCountDown !== null) {
            clearInterval(self.BeforePlayAudioCountDown);
            self.BeforePlayAudioCountDown = null;
        }
    }

    function markSelection() {
        $(".formatbar").hide();
        var i = "﻿",
            r = "&#xfeff;",
            n, t = "sel_" + (new Date).getTime() + "_" + Math.random().toString().substr(2);
        var u, f;
        if (document.selection && document.selection.createRange ? (f = document.selection.createRange().duplicate(), f.collapse(!1), f.pasteHTML('<span id="' + t + '" style="position: relative;">' + r + "<\/span>"), n = document.getElementById(t)) : window.getSelection && (u = window.getSelection(), u.getRangeAt ? u.rangeCount > 0 && (f = u.getRangeAt(0).cloneRange()) : (f.setStart(u.anchorNode, u.anchorOffset), f.setEnd(u.focusNode, u.focusOffset), f.collapsed !== u.isCollapsed && (f.setStart(u.focusNode, u.focusOffset), f.setEnd(u.anchorNode, u.anchorOffset))), u.toString() !== "" && u.toString() !== " " && (f.collapse(!0), n = document.createElement("span"), n.id = t, n.appendChild(document.createTextNode(i)), f.insertNode(n))), n) {
            u.toString() !== "" && $(".formatbar").show();
            var s = n;
            var left = 0;
            var top = 0;

            typeof viewAnswerMode === "undefined" ? (left += s.offsetLeft, top += s.offsetTop) : (left += $(s).offset().left - $(".selectable-text").offset().left, top += $(s).offset().top - $(".selectable-text").offset().top);
            top = top - 38;
            if ($(s).parents(".input-question.selectable-text, .question.selectable-text").length) {
                var currTop = $(s).parents(".input-question.selectable-text, .question.selectable-text")[0].offsetTop;
                var currLeft = $(s).parents(".input-question.selectable-text, .question.selectable-text")[0].offsetLeft;
                top = top + currTop;
                left = left + currLeft;
            } else if ($(s).parents("table").length) {
                var tableTop = $(s).parents("table")[0].offsetTop;
                var tableLeft = $(s).parents("table")[0].offsetLeft;

                var colTop = $(s).parents("td")[0].offsetTop;
                var colLeft = $(s).parents("td")[0].offsetLeft;

                top = top + tableTop + colTop;
                left = left + tableLeft + colLeft;
            }
            typeof extraHeightCom !== "undefined" && (top = top + extraHeightCom);

            $(".formatbar").css("top", top).css("left", left);
            n.parentNode && n.parentNode.removeChild(n);

        }
    }

    function getSelectedText() {
        var text = "";
        return window.getSelection ? text = window.getSelection() : document.getSelection ? text = document.getSelection() : document.selection && (text = document.selection.createRange().text), text;
    }

    function getSelectedHtml() {
        var self = this;
        var html = "";
        if (typeof window.getSelection !== "undefined") {
            var sel = window.getSelection();
            if (sel.rangeCount) {
                var container = document.createElement("div");
                for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                    var range = sel.getRangeAt(i);
                    var fragment = range.cloneContents();
                    container.appendChild(fragment);
                    unHighlightChildElement.call(self, $(container));
                }
                html = container.innerHTML;
            }
        } else if (typeof document.selection !== "undefined") {
            if (document.selection.type === "Text") {
                html = document.selection.createRange().htmlText;
            }
        }
        return html;
    }

    function highlightText(className) {
        var self = this;
        var r = getSelectedText.call(self),
            u = getSelectedHtml.call(self),
            t, i;
        if (u !== "") {
            i = r.getRangeAt(0);
            if ($(i.commonAncestorContainer).is("span[class^='highlight']")) {
                if ($(i.commonAncestorContainer).html() === u) {
                    $(i.commonAncestorContainer).attr("class", className);
                    document.getSelection().removeAllRanges();
                    return;
                }
            }
            t = document.createElement("SPAN");
            t.className = className;
            t.innerHTML = u;
            i.deleteContents();
            i.insertNode(t);
            self.LastHighlight = t;
            $(".formatbar").hide();

            document.getSelection().removeAllRanges();
        };
    }

    function unHighlightText() {
        var self = this;
        var range = window.getSelection().getRangeAt(0);
        var node = $(range.commonAncestorContainer);
        var content = getSelectedHtml.call(self);

        var spanTag = document.createElement("span");
        spanTag.className = "highlight-transparent";
        spanTag.innerHTML = content;

        range.deleteContents();
        range.insertNode(spanTag);

        var parents = $(spanTag).parents("span[class^='highlight']");
        if (parents.length !== 0) {

            var topParent = $(parents[parents.length - 1]);
            var parentContent = topParent.wrap("</p>").parent().html();
            topParent.unwrap();

            var contentReplacement = generateHighlightContentReplacement.call(self, content, parents);

            parentContent = parentContent.replace('<span class="highlight-transparent">' + content + '</span>', contentReplacement);
            topParent.replaceWith(parentContent);
        }

        node.find("span.highlight-transparent").each(function () {
            var html = $(this).html();
            $(this).replaceWith(html);
        });

        $(".formatbar").hide();

        initializeHighlight.call(self, $(range.commonAncestorContainer).closest(".wrapper-section"));
    }

    function generateHighlightContentReplacement(content, parents) {
        var self = this;

        var spanClasses = [];

        parents.each(function (index, row) {
            spanClasses.push($(row).attr("class"));
        });

        var spanCloseTag = spanClasses.map(item => { return '</span>'; }).join('');
        var spanOpenTag = spanClasses.slice(0).reverse().map(item => { return '<span class="' + item + '">'; }).join('');

        return spanCloseTag + content + spanOpenTag;
    }

    function unHighlightChildElement(element) {
        var self = this;
        element.find("span[class^='highlight']").each(function () {

            if ($(this).find("span[class^='highlight']").length !== 0) {
                unHighlightChildElement.call(self, $(this));
            }

            var children = $(this).html();
            $(this).replaceWith(children);
        });
    }

    function constructSubmitData(formName) {
        var self = this;

        $("#" + formName + " .droppable")
            .each(function () {
                var sectionKey = $(this).data("sentencekey");
                var questionId = $(this).data("orderparagraphid");
                var mockTestQuestionId = $(this).data("mocktestquestionid");
                var sectionType = $(this).data("sectiontype");
                var answerId = $(this).data("answerid");
                var sortingIndexTarget = sectionKey.replace("Q", "");

                if (answerId !== undefined && answerId !== "") {
                    $("#" + formName).append('<input type="hidden" name="MiniMockTest_' + sectionType +
                        "_" +
                        mockTestQuestionId +
                        "_" +
                        questionId +
                        "_" +
                        answerId +
                        '" value="' +
                        sortingIndexTarget +
                        '" />');
                }
            });

        $("#" + formName + " input:hidden")
            .not('[name*="MockTestId"]')
            .not('[name*="ActivityId"]')
            .not('[name*="IeltsMockTest"]')
            .remove();

        $("#" + formName + " .disabled").removeAttr("disabled").removeClass("disabled");
        $("#" + formName + " [disabled='disabled']").removeAttr("disabled");
    }

    function updateParentActivityPanel(response) {
        if (window.opener !== null && !window.opener.closed) {
            var activityId = $('#ActivityId').val();
            var firstInfoText = "";
            if (response.Value.FirstAnsweredMessage !== "") {
                firstInfoText += "<br/><br/>" + response.Value.FirstAnsweredMessage + "<br/><br/>";
            }

            var completedMessage = $(".wrapper-section").data("task-completed-message");
            var message = completedMessage + firstInfoText + response.Value.LastAnsweredMessage;
            $("#checkedIcon-" + activityId, window.opener.document).addClass("fa fa-check-circle");
            $("#panel-" + activityId, window.opener.document).removeClass("panel-default");
            $("#panel-" + activityId, window.opener.document).addClass("panel-success");
            $("#badge-" + activityId, window.opener.document).addClass("badge--success");
            $("#badge-" + activityId, window.opener.document).html('Done');
            $("#descriptionPanel-" + activityId, window.opener.document).html(message);
            $("#label-" + activityId, window.opener.document).remove();

            if (response.IsGroupCompleted) {
                $("#checkedGroupIcon-" + response.GroupActivityId, window.opener.document)
                    .addClass("fa fa-check-circle");
                $("#groupActivity-" + response.GroupActivityId, window.opener.document).addClass("panel-success");
            }

            if (response.IsSubModuleCompleted) {
                $("#checkedModuleIcon-" + response.SubModuleId, window.opener.document)
                    .addClass("fa fa-check-circle");
                $("#subModulePrimary-" + response.SubModuleId, window.opener.document)
                    .addClass("panel-success panel-task");
            }

            var examPreparationBase = new StudentExamPreparationBase();
            examPreparationBase.UpdateDashboardActivityCourse(activityId, response.Value.LastAnsweredMessage, window.opener.document);
            examPreparationBase.UpdatePanelProgress(window.opener.document, activityId);
        }
    }

    function timeOut() {
        var self = this;
        stopAudio.call(self);
        clearInterval(self.CountDown);

        var submitBtn = $('.submit-btn');
        $(submitBtn).click();
    }

    function goTo(targetGroupIndex, currGroupIndex) {
        var self = this;
        var targetSectionGroup = $("#section-group-" + targetGroupIndex);
        var currSectionGroup = $("#section-group-" + currGroupIndex);

        currSectionGroup.hide();
        targetSectionGroup.show();

        self.CurrentSectionGroupIndex = targetGroupIndex;

        setNavigationButtonVisible.call(self, targetGroupIndex);

        $(".content-panel").scrollTop(0);
    }

    function setNavigationButtonVisible(targetGroupIndex) {
        var targetSectionGroup = $("#section-group-" + targetGroupIndex);

        if (targetSectionGroup.data("is-show-prev") === "True") {
            $(".prev-btn").show();
        }
        else {
            $(".prev-btn").hide();
        }

        if (targetSectionGroup.data("is-show-next") === "True") {
            $(".next-btn").show();
        }
        else {
            $(".next-btn").hide();
        }

        if (targetSectionGroup.data("is-show-answer") === "True") {
            $(".show-answer-btn").show();
        }
        else {
            $(".show-answer-btn").hide();
        }

        if (targetSectionGroup.data("is-show-submit") === "True") {
            $(".submit-btn").show();
            $(".retry-btn").show();
        }
        else {
            $(".submit-btn").hide();
            $(".retry-btn").hide();
        }
    }

    // Constructor
    var studentIeltsListeningMockTestView = function (element) {
        this.Element = element;
        this.MaintenanceForm = $("#maintenanceForm");
        this.CountDown = null;
        this.BeforePlayAudioCountDown = null;
        this.LastHighlight = null;
        this.NumberOfRetry = 0;
        this.Interval = null;
        this.DisabledMode = null;
        this.CurrentSectionGroupIndex = null;
        this.SubmitResponse = null;
    };

    studentIeltsListeningMockTestView.prototype = {
        constructor: studentIeltsListeningMockTestView,
        Register: function () {
            var self = this;

            self.Initialize();
        },
        Initialize: function () {
            var self = this;

            self.CurrentSectionGroupIndex = 1;
            setNavigationButtonVisible.call(self, self.CurrentSectionGroupIndex);

            initializeQuestionPalette.call(self);
            initEventHandler.call(self);
            initializeWordCount.call(self);
            initializeHighlightBar.call(self);
            initializeHighlight.call(self);
            prepareTimer.call(self);
            prepareAudio.call(self);
        }
    };

    // Export javascript class into window environment
    window.StudentIeltsListeningMockTestView = studentIeltsListeningMockTestView;
})(jQuery, window);;
var StudentDescribeImagePracticeMockTest = function (element) {
    this.Element = element;
    this.CountDown = null;
    this.SubmitRecorderUrl = $("#speakingForm", this.ELement).attr("action");
    this.UploadAudioUrl = $("#speakingForm", this.ELement).data("upload-audio-url");
    this.ActivityId = $('#ActivityId').val();
    
    this.RecorderHandler = new RecorderWidgetHandler();

    $.extend(this, RecorderWidget_MIXIN);
}

StudentDescribeImagePracticeMockTest.prototype = {
    constructor: StudentDescribeImagePracticeMockTest,
    Register: function () {
        var self = this;

        self.MIXIN_InitializeRecorderPanel();
        self.MIXIN_RecordButtonClicked($("#recordDescribeImageButton"));
        self.MIXIN_UploadButtonClicked($("#uploadAudioDescribeImageButton"));
    }
};
RecorderWidgetHandler = function() {
    this.Recorder = null;

    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    this.AudioContext = null;
    this.AudioInput = null,
    this.RealAudioInput = null,
    this.InputPoint = null,
    this.AudioRecorder = null;
    this.RafID = null;
    this.AnalyserContext = null;
    this.CanvasWidth = null;
    this.canvasHeight = null;
    this.RecIndex = 0;
}

RecorderWidgetHandler.prototype = {
    constructor: RecorderWidgetHandler,
    _startNewRecording: function (recordingObject) {

        var self = this;

        navigator.mediaDevices.getUserMedia({ audio: true }).then(function (stream) {
            self.Recorder = new MediaRecorder(stream);

            self.Recorder.addEventListener('dataavailable', self._uploadRecorderSpeakingFile.bind(self, recordingObject));

            self.Recorder.start();
        });
    },
    _stopNewRecording: function () {
        var self = this;
        self.Recorder.stop();
        self.Recorder.stream.getTracks()[0].stop();
    },
    _uploadRecorderSpeakingFile: function (recordingObject, recordingEvent) {
        var self = this;

        var formData = new FormData();
        var items = recordingObject.FormDataObject;
        for (var key in items) {
            if (items.hasOwnProperty(key)) {
                formData.append(key, items[key]);
            }
        }
        
        formData.append("RecordingFile", recordingEvent.data);
       
        showProcessingDialog();
        $.ajax({
            url: recordingObject.SubmitRecorderUrl,
            type: "POST",
            data: formData,
            contentType: false,
            processData: false,
            dataType: "json",
            error: function (e) {
                console.log(e.message);
                hideProcessingDialog();
                alert("Error when sending request...");
            },
            success: function (response) {
                hideProcessingDialog();
                if (typeof recordingObject.OnRecordFinish === "function") {
                    recordingObject.OnRecordFinish(response);
                }
            }
        });
    },
    _uploadAudioSpeakingFile: function (uploadAudioObject) {
       
        var self = this;

        var sectionFileInput = uploadAudioObject.FormDataObject.SectionName;

        var fileInput;
        if (sectionFileInput === null || sectionFileInput === undefined || sectionFileInput.length === 0) {
            fileInput = $('#FileAudioRecorder')[0];
        } else {
            fileInput = $('#FileAudioRecorder-' + sectionFileInput)[0];
        }

        if (fileInput !== null && fileInput !== undefined && fileInput.files && fileInput.files[0]) {
            var formData = new FormData();
            var items = uploadAudioObject.FormDataObject;
            for (var key in items) {
                if (items.hasOwnProperty(key)) {
                    formData.append(key, items[key]);
                }
            }
            formData.append("RecordingFile", fileInput.files[0]);
           

            showProcessingDialog();
            $.ajax({
                url: uploadAudioObject.UploadAudioUrl,
                type: "POST",
                data: formData,
                contentType: false,
                processData: false,
                dataType: "json",
                error: function(e) {
                    console.log(e);
                    hideProcessingDialog();
                    alert("Error when sending request...");
                },
                success: function(response) {
                    hideProcessingDialog();
                    if (typeof uploadAudioObject.OnUploadFinish === "function") {
                        uploadAudioObject.OnUploadFinish(response);
                    }
                }
            });
        }
    },
    _initAudio: function (errorCallback) {
        var self = this;

        if (!navigator.getUserMedia) {
            navigator.getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
        }

        if (!self._hasGetUserMedia()) {
            errorCallback();
            return false;
        }

        navigator.getUserMedia(
            {
                "audio": {
                    "mandatory": {
                        "googEchoCancellation": "false",
                        "googAutoGainControl": "false",
                        "googNoiseSuppression": "false",
                        "googHighpassFilter": "false"
                    },
                    "optional": []
                }
            }, self._gotStream, errorCallback);
    },
    _hasGetUserMedia: function () {
        return !!(navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia);
    },
    _gotStream: function (stream) {
        var self = this;

        self.AudioContext = new AudioContext();

        // Create an AudioNode from the stream.
        self.RealAudioInput = self.AudioContext.createMediaStreamSource(stream);
        
    }
}
;
var RecorderWidget_MIXIN = {
    Config: {
        timerNumber:40
    },
    MIXIN_RecordButtonClicked: function (element) {
        var self = this;
        element.off("click").on("click",
            function () {
                self.COMMON_startCountDown.call(self, $(this));
            });
    },
    MIXIN_UploadButtonClicked: function () {
        var self = this;
        $("#uploadAudioDescribeImageButton").off("click").on("click",
            function (event) {
                event.preventDefault();

                var sectionName = $(this).data('section');
                var currentPracticeId = $(this).data('id');

                var uploadAudioObject = {
                    FormDataObject: {
                        ActivityId: self.ActivityId,
                        PracticeId: currentPracticeId,
                        SectionName: sectionName
                    },
                    UploadAudioUrl: self.UploadAudioUrl,
                    OnUploadFinish: self.MIXIN_OnRecordFinish.bind(self)
                };

                self.RecorderHandler._uploadAudioSpeakingFile.call(self, uploadAudioObject);
            });
    },
    MIXIN_InitializeRecorderPanel: function (config) {
        var self = this;

        if (typeof config === 'object') {
            $.extend(self.Config, config);
        }

        self.RecorderHandler._initAudio(function () {
            $('#recorderControlPanel').hide();
            $('.recorderControlSection').hide();
            $('#uploadControlPanel').show();
            $('.uploadControlSection').show();
        });
    },
    COMMON_startCountDown: function (recordingButton) {
        var self = this;
        var sectionData = recordingButton.data('section');

        setTimeout(function () { self.COMMON_startRecording.call(self, recordingButton) }, 20);

        var timerNumber = self.Config.timerNumber;


        self.CountDown = setInterval(function () {
            self.COMMON_writeDown(timerNumber, $('#recordingLog-' + sectionData));
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                self.COMMON_stopCountdown(recordingButton);
            }
        },
            1000);
       
    },
    COMMON_showLog: function (logObject) {
        logObject.css('visibility', 'visible');
        logObject.html("");
    },
    COMMON_startRecording: function (recordingButton) {
        var self = this;

        var sectionName = recordingButton.data('section');
        var currentPracticeId = recordingButton.data('id');

        var recorderObject = {
            FormDataObject: {
                ActivityId: self.ActivityId,
                PracticeId: currentPracticeId,
                SectionName: sectionName
            },
            SubmitRecorderUrl: self.SubmitRecorderUrl,
            OnRecordFinish: self.MIXIN_OnRecordFinish.bind(self)
        };

        self.RecorderHandler._startNewRecording(recorderObject);

        recordingButton
            .removeClass('btn-danger')
            .html('<i class="fa fa-square fa-fw"></i> Stop')
            .off("click")
            .on("click",
                function () {
                    self.COMMON_stopCountdown(recordingButton);
                });
    },
    COMMON_hideLog: function (logObjectElement) {
       logObjectElement.empty();
       logObjectElement.css('visibility', 'hidden');
    },
    COMMON_writeDown: function (number, logObject) {
        logObject.html("Remaining seconds: <strong>" + number + "</strong>");
    },
    COMMON_stopCountdown: function (recordingButton) {
        var self = this;
        var sectionData = recordingButton.data('section');

        self.RecorderHandler._stopNewRecording();

        recordingButton.addClass('btn-danger')
            .html('<i class="fa fa-microphone fa-fw"></i> Record');

        // update button attributes
        self.MIXIN_RecordButtonClicked.call(self, recordingButton); 

        clearInterval(self.CountDown);
        $('#spinnerImage-' + sectionData).show();
        $('#recordingLog-' + sectionData).html("Processing, please wait...");
    },
    MIXIN_OnRecordFinish: function(response) {
        var self = this;
       
        if (response.IsSuccess === true) {
            self.COMMON_hideLog($("#recordingLog-" + response.Value.SectionName));
            $('#spinnerImage-' + response.Value.SectionName).hide();
            window.location.reload();
            window.updateParentActivityPanel(response);
        } else {
            self.COMMON_hideLog($('div[id^="recordingLog-"]'));
            var message = '';
            for (var i = 0; i < response.MessageTextArray.length; i++) {
                message += response.MessageTextArray[i];
            }

            showErrorWithActionDialog(message,
                function () {
                    $(".upload-audio-manual").show();
                });
        }
    }
};
(function ($, window) {
    "use strict";

    // Private Functions
    function eventHandler() {
        var self = this;

        var eventHandler = {
            buyBtnClick: function (e) {
                e.preventDefault();

                var url = $(this).data("url");
                url += "?additionalType=" + $("#SelectedAddOns").val();

                window.location.href = url;
            }
        };

        $(".btn-buy", self.Element)
            .off("click")
            .on("click", eventHandler.buyBtnClick);

    }

    // Constructor
    var studentExtendDurationLandingPageIndex = function (element) {
        this.Element = element;
        this.Caller = null;
    };

    studentExtendDurationLandingPageIndex.prototype = {
        constructor: studentExtendDurationLandingPageIndex,
        Register: function () {
            var self = this;

            eventHandler.call(self);
        },
        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    // Export javascript class into window environment
    window.StudentExtendDurationLandingPageIndex = studentExtendDurationLandingPageIndex;
})(jQuery, window);;
var StudentGeneralEnglishIndex = function (element) {
    this.Element = element;
}

StudentGeneralEnglishIndex.prototype = {
    constructor: StudentGeneralEnglishIndex,
    Register: function () {
        var self = this;

        $('#LevelId', self.Element)
            .on("change",
                function (e) {
                    var levelId = $(this).val();
                    e.preventDefault();

                    if (levelId !== "") {
                        var maintenanceDiv = $('#maintenancePane');
                        var url = $('#maintenanceForm', self.Element).data('view-url');
                        url += '?levelId=' + $(this).val();

                        showMaintenancePane(url, function(data) {
                            maintenanceDiv.html(data);

                            var helper = new Helper();
                            var namespace = helper.CreateNameSpaceFromURL(url);
                            var apps = new Application($('#mainUserContent'), namespace);
                            apps.Register();

                            scrollToElement("maintenancePane");

                        });

                    } else {
                        showInformation($('maintenanceForm', self.ELement).data('loaded-information'));
                    }
                });
    }
};
(function ($, window) {
    "use strict";

    function initEventHandler() {
        var self = this;
        var eventHandler = {
            signUpButtonClicked: function (e) {
                e.preventDefault();

                var onSuccessResponse = function (response) {

                    if (!response.IsSuccess) {
                        hideProcessingDialog();
                        processErrorPostResponse(response);
                    } else if (!response.Value.IsExist) {
                        window.location.href = $(e.target).attr("href");
                    } else {
                        hideProcessingDialog(function () { showEmailValidationModal(response.Value.EmailPattern); });
                    }

                };

                var showEmailValidationModal = function (emailPattern) {
                    $("#EmailPattern", self.EmailValidationModal).text(emailPattern);

                    self.EmailValidationModal.modal("show");
                };

                var onFailResponse = function (response) {
                    hideProcessingDialog();
                    processErrorPostResponse(response);
                };

                showProcessingDialog();
                submitDataAsync({}, self.CheckEmailUrl)
                    .done(onSuccessResponse)
                    .fail(onFailResponse);
            },

            validateEmailButtonClicked: function (e) {
                e.preventDefault();

                var onSuccessResponse = function () {
                    var passwordModal = self.PasswordConfirmationModal.modal.bind(self.PasswordConfirmationModal, "show");
                    hideProcessingDialog(passwordModal);
                };

                var onFailResponse = function (response) {
                    hideProcessingDialog(showEmailValidationModal);
                    advancedErrorPostResponse(response, self.EmailValidationModal.attr("id"));
                };

                var showEmailValidationModal = function () {
                    $("#ValidateEmailForm", self.EmailValidationModal).hide();
                    $(".validation-state", self.EmailValidationModal).hide();
                    $(".invalid-state", self.EmailValidationModal).show();

                    self.EmailValidationModal.modal("show");
                };

                var postData = {
                    emailAddress: $(".e2SchoolEmailAddress").val()
                };

                self.EmailValidationModal.on('hidden.bs.modal', function (e) {
                    self.EmailValidationModal.off('hidden.bs.modal');

                    showProcessingDialog();
                    submitDataAsync(postData, self.ValidateEmailUrl)
                        .done(onSuccessResponse)
                        .fail(onFailResponse);
                });

                self.EmailValidationModal.modal("hide");
                
            },

            retryButtonClicked: function (e) {
                e.preventDefault();

                $("#ValidateEmailForm", self.EmailValidationModal).show();
                $(".validation-state", self.EmailValidationModal).show();
                $(".invalid-state", self.EmailValidationModal).hide();
                $(".e2SchoolEmailAddress").val("");

                closeErrorPane();
            },

            registerNewButtonClicked: function (e) {
                e.preventDefault();
                window.location.href = $("#btnSignUp", self.Element).attr("href");
            },

            synchronizeButtonClicked: function (e) {
                e.preventDefault();

                var customInfoDialog = function (response) {
                    showInfoDialog(response.Value.Message, function () {
                        $(".skill-building").click();
                    });
                };

                var showPasswordConfirmationModal = function () {
                    self.PasswordConfirmationModal.modal("show");
                };

                var onSuccessResponse = function (response) {
                    hideProcessingDialog(customInfoDialog.bind(self, response));
                };

                var onFailResponse = function (response) {
                    hideProcessingDialog(showPasswordConfirmationModal);
                    advancedErrorPostResponse(response, self.PasswordConfirmationModal.attr("id"));
                };

                var postData = {
                    password: $(".passwordConfirmation").val()
                };

                self.PasswordConfirmationModal.on('hidden.bs.modal', function (e) {
                    self.PasswordConfirmationModal.off('hidden.bs.modal');

                    showProcessingDialog();
                    submitDataAsync(postData, self.SyncPasswordUrl)
                        .done(onSuccessResponse)
                        .fail(onFailResponse);
                });

                self.PasswordConfirmationModal.modal("hide");
            }
        };

        $("#btnSignUp", self.Element)
            .off("click")
            .on("click", eventHandler.signUpButtonClicked);

        $("#ValidateEmailButton", self.EmailValidationModal)
            .off("click")
            .on("click", eventHandler.validateEmailButtonClicked);

        $("#RetryButton", self.EmailValidationModal)
            .off("click")
            .on("click", eventHandler.retryButtonClicked);

        $("#RegisterNewButton", self.EmailValidationModal)
            .off("click")
            .on("click", eventHandler.registerNewButtonClicked);

        $("#SynchronizeButton", self.PasswordConfirmationModal)
            .off("click")
            .on("click", eventHandler.synchronizeButtonClicked);
    }

    var studentGeneralEnglishSkillBuilding = function (element) {
        this.Element = element;
        this.EmailValidationModal = $("#EmailValidationModal", element);
        this.PasswordConfirmationModal = $("#PasswordConfirmationModal", element);
        this.RegisterUrl = $("#btnSignUp", element).data("register-url");
        this.CheckEmailUrl = $("#btnSignUp", element).data("checkemail-url");
        this.ValidateEmailUrl = $("#ValidateEmailForm", this.EmailValidationModal).data("validate-url");
        this.SyncPasswordUrl = $("#PasswordConfirmationForm", this.PasswordConfirmationModal).data("sync-url");
    };

    studentGeneralEnglishSkillBuilding.prototype = {
        constructor: studentGeneralEnglishSkillBuilding,
        Register: function () {
            initEventHandler.call(this);
        }
    };

    window.StudentGeneralEnglishSkillBuilding = studentGeneralEnglishSkillBuilding;
})(jQuery, window);;
var StudentGeneralEnglishView = function (element) {
    this.Element = element;
}

StudentGeneralEnglishView.prototype = {
    constructor: StudentGeneralEnglishView,
    Register: function () {
        var self = this;

        $('#accordion')
            .on('shown.bs.collapse',
                function (e) {
                    $('html,body')
                        .animate({
                            scrollTop: $('#' + e.target.id).offset().top - 20
                        }, 500);

                });

        $('a[id*="lesson-"]', self.Element)
            .prop('onclick', null)
            .off('click')
            .on('click',
                function () {
                    self.ShowPopUp($(this).next().data('url'), $(this).next().data('lesson-id'));
                });
    },
    ShowPopUp: function (url, lessonId) {
        url += '?lessonId=' + lessonId;
        showPopup(url);
    }
};
var StudentGrammarExerciseExerciseIndex = function () {
   
}

StudentGrammarExerciseExerciseIndex.prototype = {
    constructor: StudentGrammarExerciseExerciseIndex,
    Register: function () {
        var self = this;

        $(".check-answer").click(function () {

            var id = $(this).attr("id").split("-")[1];
            var errorPaneId = $("#errorPane_" + id);
            var formId = $("#exerciseForm-" + id);
            var checkButonId = $("#exerciseButton-" + id);
            var resetButtonId = $("#resetButton-" + id);

            var nonEmptyRadio = $(".grammarAnswer_"+id)
                .filter(function () {
                    return $(this).is(':checked');
                });

            if (nonEmptyRadio.length !== $(".grammarQuestion_"+id).length) {
                errorPaneId.html(formId.data('error-message'));
                errorPaneId.show();
                return false;
            }

            

            submitForm('#exerciseForm-'+id, formId.data('check-answer-url'),
                function (data) {
                    $.each(data.Value.CurrentAnswers, function (index, element) {
                        if (element.IsCorrectAnswer) {
                            $("#listItem-" + element.GrammarExerciseQuestionId).addClass("is-correct");
                        } else {
                            $("#listItem-" + element.GrammarExerciseQuestionId).addClass("is-incorrect");
                        }
                    });

                    $.each(data.Value.ExpectedAnswers, function (index, element) {
                        if (element.IsCorrectAnswer) {
                            $("#radioSection-" + element.GrammarExerciseQuestionId + "-" + element.Id).addClass("is-right");
                        } else {
                            if ($("#listItem-" + element.GrammarExerciseQuestionId).hasClass("is-incorrect")) {
                                $("#radioSection-" + element.GrammarExerciseQuestionId + "-" + element.Id).addClass("is-wrong");
                            }
                        }
                    });

                    $("#pointExcercise").html(data.Value.Point);
                    checkButonId.hide();
                    resetButtonId.show();
                    errorPaneId.hide();

                    var lessonId = $("#LessonId").val();
                    
                    var examPreparationBase = new StudentExamPreparationBase();
                    examPreparationBase.UpdateWindowOpenerActivity(
                        formId.data('mobile-url'),
                        lessonId,
                        null);

                    $.each(data.Value.ActivityProgressDtos, function (index, element) {
                        self._UpdateParentActivityPanel(data.Value.LastAnsweredMessage, element.ActivityId);
                    });

                    $.each(data.Value.SubModuleCompletionList, function (index, element) {
                        self._UpdateParentTabPanel(element);
                    });
                });
        });

        $(".reset-button").click(function () {
            var id = $(this).attr("id").split("-")[1];
            var formId = $("#exerciseForm-" + id);
            var checkButonId = $("#exerciseButton-" + id);
            var resetButtonId = $("#resetButton-" + id);

            formId[0].reset();

            $('li[id^="listItem-"]').removeClass('is-correct');
            $('li[id^="listItem-"]').removeClass('is-incorrect');

            $('div[id^="radioSection-"]').removeClass('is-right');
            $('div[id^="radioSection-"]').removeClass('is-wrong');

            checkButonId.show();
            resetButtonId.hide();
        });
    },
    _UpdateParentActivityPanel(message, activityId) {
        if (window.opener != null && !window.opener.closed) {
            $("#checkedIcon-" + activityId, window.opener.document).addClass("fa fa-check-circle");
            $("#panel-" + activityId, window.opener.document).removeClass("panel-default");
            $("#panel-" + activityId, window.opener.document).addClass("panel-success");
            $("#badge-" + activityId, window.opener.document).addClass("badge--success");
            $("#badge-" + activityId, window.opener.document).html('Done');
            $("#label-" + activityId, window.opener.document).remove();
            $("#descriptionPanel-" + activityId, window.opener.document).html(message);
            var examPreparationBase = new StudentExamPreparationBase();
            examPreparationBase.UpdateDashboardActivityCourse(activityId, message, window.opener.document);
            examPreparationBase.UpdatePanelProgress(window.opener.document, activityId);
        }
    },
    _UpdateParentTabPanel: function(data) {
        if (window.opener != null && !window.opener.closed) {
            if (data.Value) {
                $("#checkedModuleIcon-" + data.Key, window.opener.document).addClass("fa fa-check-circle");
                $("#subModulePrimary-" + data.Key, window.opener.document).addClass("panel-success panel-task");
            }
        }
    }
};
var StudentGrammarExerciseTestIndex = function () {
    this.TestForm = $("#testForm");
    this.NumberOfRetry = 0;
}

StudentGrammarExerciseTestIndex.prototype = {
    constructor: StudentGrammarExerciseTestIndex,
    Register: function () {
        var self = this;

        $('#testForm')
            .submit(function (event) {
                event.preventDefault();

                self._SaveAnswer();
                return false;
            });

        $("#closeButton").click(function(event) {
            event.preventDefault();
            self._CloseWindow();
        });

        $("#retryButton").click(function (event) {
            event.preventDefault();
            self._RetryButton();
        });
    },
    _SaveAnswer: function () {
        var self = this;
        submitForm('#testForm',
            self.TestForm.data("submit-url"),
            function (data) {
                $("#submitButton").hide();
                $("#closeButton").removeClass("hidden");

                self.NumberOfRetry += 1;
                if (self.NumberOfRetry < 3 && !data.Value.IsAllAnswersCorrect) {
                    $("#retryButton").show();
                }

                for (var i = 0; i < data.Value.TestAnswers.length; i++) {
                    $("#grammarTest_" +
                        data.Value.TestAnswers[i].TestQuestionId +
                        "_" +
                        data.Value.TestAnswers[i].GroupId)
                        .attr('disabled', 'disabled');
                    if (data.Value.TestAnswers[i].IsCorrectAnswer) {
                        $("#grammarTest_" +
                            data.Value.TestAnswers[i].TestQuestionId +
                            "_" +
                            data.Value.TestAnswers[i].GroupId)
                            .addClass("correct-answer");
                    } else {
                        $("#grammarTest_" +
                            data.Value.TestAnswers[i].TestQuestionId +
                            "_" +
                            data.Value.TestAnswers[i].GroupId)
                            .addClass("wrong-answer");
                    }

                }

                if (self.NumberOfRetry === 3) {
                    
                  $.each(data.Value.ExpectedGrammarTestAnswerDtos, function(index, row) {
                        var testQuestionId = row.TestQuestionId;
                        var groupId = row.GroupId;

                        $("<strong>(Answer: " + row.AnswerText + ")</strong> ").insertAfter("#grammarTest_" +
                            testQuestionId +
                            "_" +
                            groupId);
                    });
                }

                $('#info-submit-section').removeClass("hidden");
                $('#info-submit-section').html(data.Value.SubmitMessage);

                var lessonId = $("#LessonId").val();

                window.opener.updateParentProgressBar(data.Value.Score, lessonId);

                window.opener.updateParentMobileUrl(lessonId);

                var studentGrammarExerciseExerciseIndex = new StudentGrammarExerciseExerciseIndex();

                $.each(data.Value.ActivityProgressDtos,
                    function (index, element) {
                        studentGrammarExerciseExerciseIndex._UpdateParentActivityPanel(data.Value.LastAnsweredMessage, element.ActivityId);
                    });

                $.each(data.Value.SubModuleCompletionList,
                    function (index, element) {
                        studentGrammarExerciseExerciseIndex._UpdateParentTabPanel(element);
                    });


            });
    },
    _CloseWindow: function() {
        window.close();
    },
    _RetryButton: function() {
        $("select[id^='grammarTest']").each(function () {
            $(this).prop("disabled", false);
            if ($(this).hasClass("wrong-answer")) {
                $(this).prop("selectedIndex", 0).removeClass("wrong-answer");
            } else {
                $(this).prop("readonly", true);
            }
        });

        $("#submitButton").show();
        $("#retryButton").hide();
    }
};
(function ($, window) {
    "use strict";

    function initEventHandler() {
        var self = this;
        var grid = self.Grid;

        $(".show-hide-btn")
            .off("click")
            .on("click", function (e) {
                e.preventDefault();

                var target = $(this).data('target');
                var isOpen = $(this).data('open');

                if (isOpen === 0) {
                    $(this).data('open', 1);
                    $(this).html('less');

                    $('#' + target).addClass("show");
                } else {
                    $(this).data('open', 0);
                    $(this).html('more');

                    $('#' + target).removeClass("show");
                }
            });

        $(".view-class-btn")
            .off("click")
            .on("click", function () {
                $(".available-classes").removeClass("hidden");
                $(".unenrolled-view").addClass("hidden");
                scrollToElement("wrapper");
            });

        $('#wishlistLink')
            .off("click")
            .on("click", function (e) {
                e.preventDefault();

                var url = grid.data('wishlist-url');

                submitNonFormPost(
                    url, function (response) {
                        showInfoDialog(response.Value);
                    },
                    function () {
                        backdropModalControl();
                    });
            });

        $("#reSendActivationLink", self.Element)
            .off("click")
            .on("click", function (e) {
                e.preventDefault();

                var url = $(e.target).attr("href");

                submitDataWithLoaderAsync({}, url)
                    .done(function (response) {
                        showInfoDialog(response.Value);
                    }).fail(function (response) {
                        showInfoDialog(response.MessageErrorTextArray.join("\n"));
                    });

            });

        $(".enrollmentLink")
            .off("click")
            .on("click", function () {
                var url = grid.data("enroll-url");
                url += "?groupClassId=" + $(this).attr("id");
                var isFreeRegistration = $("#IsFreeToRegisterSmallGroupClass").val() === "True";
                var confirmationMessage = isFreeRegistration ? grid.data("free-enroll-confirmation-message") : grid.data("enroll-confirmation-message");
                var yesText = isFreeRegistration ? grid.data("free-enroll-yes-text") : grid.data("enroll-yes-text");
                var buttonClass = isFreeRegistration ? "btn-primary" : "btn-success";

                var onSuccessEnrollResponse = function (data) {
                    // Payment
                    if (data.Value !== undefined && data.Value.RedirectUrl !== undefined) {
                        window.location.href = data.Value.RedirectUrl;
                    }
                    // Free
                    else {

                        showAdvancedDialog("Information",
                            grid.data("free-enroll-success-message"),
                            "OK",
                            function () {
                                $("#groupClassMenu").click();
                            });
                    }
                };

                var onFailEnrollResponse = function (data) {
                    if (data.Value !== undefined && data.Value.RedirectUrl !== undefined) {
                        window.location.href = data.Value.RedirectUrl;
                    } else {
                        processErrorPostResponse(data);
                    }
                };

                var yesAction = function () {
                    submitCustomNonFormPost(url, onSuccessEnrollResponse, onFailEnrollResponse);
                };

                showCustomConfirmationDialog(
                    confirmationMessage,
                    yesAction,
                    yesText,
                    buttonClass,
                    function () { },
                    grid.data("enroll-no-text")
                );
            });

        $(".unenrollmentLink")
            .off("click")
            .on("click", function (e) {
                var url = grid.data("unenroll-url");
                url += "?groupClassId=" + $(this).data("id");

                var confirmationMessage = grid.data("unenroll-confirmation-message");

                var yesAction = function () {
                    submitNonFormPost(url, function (data) {
                        showInformation(data.Value.SuccessMessage);
                        reloadPage.call(self);
                    });
                };

                showYesNoConfirmationDialog(confirmationMessage, yesAction);
            });
    }

    function reloadPage() {
        var self = this;
        var groupClassMenu = $("#groupClassMenu");
        var url = groupClassMenu.data("url");

        var successResponse = function (contentData) {
            if (contentData.indexOf('UNAUTHORIZED') >= 0) {
                window.location.href = "/Account/Login";
            } else {
                $('#mainUserContent').html(contentData);
                hideLoadingDialog();

                self.IsDirectToGroupClassList = true;
                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application($('#mainUserContent'), namespace);
                apps.RegisterWithCaller(self);
            }
        };

        loadApplicationContent(url, "GET", successResponse);
    }

    var studentGroupClassIndex = function (element) {
        this.Element = element;
        this.Grid = $(".groupclass-grid", this.Element);
        this.MaintenancePane = $("#maintenancePane", this.Element);
    };

    studentGroupClassIndex.prototype = {
        constructor: studentGroupClassIndex,
        Register: function () {
            var self = this;

            initEventHandler.call(self);
        },

        SetupCaller: function (caller) {
            if (caller.IsDirectToGroupClassList) {
                $(".available-classes").removeClass("hidden");
                $(".unenrolled-view").addClass("hidden");
                scrollToElement("wrapper");
            }
            
        }
    };
    // export javascript classes into window environment 
    window.StudentGroupClassIndex = studentGroupClassIndex;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    function initEventHandler() {
        var self = this;
        var eventHandler = {
            btnBookClicked: function () {

                var onHideGroupClassModal = function () {
                    self.GroupClassDialog.off("hidden.bs.modal");

                    var url = self.MaintenanceForm.data("enroll-url");
                    url += "?groupClassId=" + $("#Id", self.Element).val();

                    var isFreeRegistration = $("#IsFreeToRegister").val() === "True";
                    var confirmationMessage = isFreeRegistration
                        ? self.MaintenanceForm.data("free-enroll-confirmation-message")
                        : self.MaintenanceForm.data("enroll-confirmation-message");

                    var yesText = isFreeRegistration
                        ? self.MaintenanceForm.data("free-enroll-yes-text")
                        : self.MaintenanceForm.data("enroll-yes-text");

                    var buttonClass = isFreeRegistration ? "btn-primary" : "btn-success";

                    var onSuccessEnrollResponse = function (data) {

                        if (data.Value !== undefined && data.Value.RedirectUrl !== undefined) {
                            window.location.href = data.Value.RedirectUrl;
                        }
                        else {
                            showInfoDialog(self.MaintenanceForm.data("free-enroll-success-message"));
                            reloadHomeCalendar.call(self);
                        }

                    };

                    var onFailEnrollResponse = function (data) {                        
                        if (data.Value !== undefined && data.Value.RedirectUrl !== undefined) {
                            window.location.href = data.Value.RedirectUrl;
                        } else {
                            hideProcessingDialog();
                            self.GroupClassDialog.modal("show");
                            advancedErrorPostResponse(data, self.MaintenanceForm.attr("id"));
                        }
                    };

                    var yesAction = function () {
                        submitCustomNonFormPost(url, onSuccessEnrollResponse, onFailEnrollResponse);
                    };

                    var noAction = function () {
                        self.GroupClassDialog.modal("show");
                    };

                    showCustomConfirmationDialog(
                        confirmationMessage,
                        yesAction,
                        yesText,
                        buttonClass,
                        noAction,
                        self.MaintenanceForm.data("enroll-no-text")
                    );
                };

                self.GroupClassDialog.on("hidden.bs.modal", onHideGroupClassModal);
                self.GroupClassDialog.modal("hide");
            },

            btnUnenrolClicked: function (e) {
                e.preventDefault();

                var onHideGroupClassModal = function () {
                    self.GroupClassDialog.off("hidden.bs.modal");

                    var url = self.MaintenanceForm.data("unenroll-url");
                    url += "?groupClassId=" + $("#Id", self.Element).val();

                    var confirmationMessage = self.MaintenanceForm.data("unenroll-confirmation-message");

                    var onSuccessUnenrollResponse = function (data) {
                        showInformation(data.Value.SuccessMessage);
                        reloadHomeCalendar.call(self);
                    };

                    var onFailUnenrollResponse = function (data) {   
                        hideProcessingDialog();
                        self.GroupClassDialog.modal("show");
                        advancedErrorPostResponse(data, self.MaintenanceForm.attr("id"));
                    };

                    var yesAction = function () {
                        submitCustomNonFormPost(url, onSuccessUnenrollResponse, onFailUnenrollResponse);
                    };

                    var noAction = function () {
                        self.GroupClassDialog.modal("show");
                    };

                    showYesNoConfirmationDialog(confirmationMessage, yesAction, noAction);
                };

                self.GroupClassDialog.on("hidden.bs.modal", onHideGroupClassModal);
                self.GroupClassDialog.modal("hide");
            }
        };

        $("#btnBook", self.Element)
            .off("click")
            .on("click", eventHandler.btnBookClicked);

        $("#btnUnenrol", self.Element)
            .off("click")
            .on("click", eventHandler.btnUnenrolClicked);
    }

    function reloadHomeCalendar() {
        var studentHome = new StudentHomeIndex();
        studentHome.GenerateCalendarData();
    }

    var studentGroupClassShowGroupClassDialog = function (element) {
        this.Element = element;
        this.Caller = null;
        this.MaintenanceForm = $("#groupClassForm", this.Element);
        this.GroupClassDialog = $("#groupClassDialog");
    };

    studentGroupClassShowGroupClassDialog.prototype = {
        constructor: studentGroupClassShowGroupClassDialog,
        Register: function () {
            var self = this;

            initEventHandler.call(self);
        },

        SetupCaller: function (caller) {
            this.Caller = caller;
        }

    };
    // export javascript classes into window environment 
    window.StudentGroupClassShowGroupClassDialog = studentGroupClassShowGroupClassDialog;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    function registerWebinar(groupWebinarId, zoomWebinarId, gridElement) {
        var self = this;

        var submitUrl = gridElement.data("register-webinar-url");
        var postData = {
            groupWebinarId: groupWebinarId,
            zoomWebinarId: zoomWebinarId
        };

        advancedSubmitData(postData, submitUrl, function (data) {

            showInformation(data.Value.Message);
            self.ReloadGrid();

        }, function (data) {

            hideProcessingDialog();
            advancedErrorPostResponse(data, "upcoming-error-pane");

        });
    }

    function cancelRegister(groupWebinarId, gridElement) {
        var self = this;
        var cancelConfirmationMessage = gridElement.data("cancel-confirmation-message");
        var submitUrl = gridElement.data("cancel-url");
        var postData = {
            groupWebinarId: groupWebinarId
        };

        submitDataWithAdvancedConfirmDialog(cancelConfirmationMessage, postData,
            submitUrl,
            function (data) {
                showInformation(data.Value.Message);
                self.ReloadGrid();
            },
            function (errorResult) {
                hideProcessingDialog();
                advancedErrorPostResponse(errorResult, "registered-error-pane");
            });
    }

    var studentGroupWebinarIndex = function (element) {
        this.Element = element;
        this.Caller = null;
        this.UpcomingGrid = $("#gridUpcomingGroupWebinar", this.Element);
        this.RegisteredGrid = $("#gridRegisteredGridWebinar", this.Element);
        this.ArchivedGrid = $("#gridArchivedGridWebinar", this.Element);
        this.MaintenancePane = $("#maintenancePane", this.Element);
    };

    studentGroupWebinarIndex.prototype = {
        constructor: studentGroupWebinarIndex,
        Register: function () {
            var self = this;

            self.LoadUpcomingGroupWebinarGrid(self.UpcomingGrid);

            $("#groupWebinarTab li", self.Element)
                .off("click")
                .on("click", function () {
                    self.MaintenancePane.empty();
                });

            $('#groupWebinarTab li a[href="#groupWebinarTab_upcoming"]', self.Element)
                .off("click")
                .on("click", function () {
                    self.LoadUpcomingGroupWebinarGrid(self.UpcomingGrid);
                });

            $('#groupWebinarTab li a[href="#groupWebinarTab_registered"]', self.Element)
                .off("click")
                .on("click", function () {
                    self.LoadRegisteredGroupWebinarGrid(self.RegisteredGrid);
                });

            $('#groupWebinarTab li a[href="#groupWebinarTab_archived"]', self.Element)
                .off("click")
                .on("click", function () {
                    self.LoadArchivedGroupWebinarGrid(self.ArchivedGrid);
                });

        },

        LoadUpcomingGroupWebinarGrid: function (tableGrid) {
            var self = this;

            tableGrid.bootgrid({
                ajax: true,
                post: function () {
                    return {
                        GroupClassId: tableGrid.data("group-class-id")
                    };
                },
                url: tableGrid.data('url'),
                formatters: {
                    "Action": function (column, row) {
                        var wrapper = $("<div>");

                        var registerEl = $("<a>", {
                            "href": "#",
                            "class": "registerLink",
                            "id": row.Id,
                            "data-zoom-webinar-id": row.ZoomWebinarId
                        });

                        var iconEl = $("<i>", {
                            "class": "fa fa-sign-in text-primary",
                            "aria-hidden": true,
                            "data-toggle": "tooltip",
                            "data-placement": "top",
                            "title": "",
                            "data-original-title": "Register for this event"
                        });

                        registerEl.append(iconEl);
                        wrapper.append(registerEl);

                        return wrapper.prop("outerHTML");
                    }
                }
            }).on("loaded.rs.jquery.bootgrid",
                function () {
                    $('[data-toggle="tooltip"]').tooltip();

                    $(".registerLink", tableGrid)
                        .off("click")
                        .on("click", function (e) {
                            e.preventDefault();

                            var id = $(this).attr("id");
                            var zoomWebinarId = $(this).data("zoom-webinar-id");

                            registerWebinar.call(self, id, zoomWebinarId, tableGrid);

                        });

                    tableGrid.data("loaded", true);
                });
        },

        LoadRegisteredGroupWebinarGrid: function (tableGrid) {
            var self = this;

            tableGrid.bootgrid({
                ajax: true,
                post: function () {
                    return {
                        GroupClassId: tableGrid.data("group-class-id")
                    };
                },
                url: tableGrid.data('url'),
                formatters: {
                    "Action": function (column, row) {
                        var wrapper = $("<div>");

                        if (row.IsEnableCancel) {

                            var cancelEl = $("<a>", {
                                "href": "#",
                                "class": "cancelRegisterLink",
                                "id": row.Id
                            });

                            var iconEl = $("<i>", {
                                "class": "fa fa-times-circle text-danger",
                                "aria-hidden": true,
                                "data-toggle": "tooltip",
                                "data-placement": "top",
                                "title": "",
                                "data-original-title": "Cancel Registration"
                            });

                            cancelEl.append(iconEl);
                            wrapper.append(cancelEl);
                        }

                        return wrapper.prop("outerHTML");
                    }
                }
            }).on("loaded.rs.jquery.bootgrid",
                function () {
                    $('[data-toggle="tooltip"]').tooltip();

                    $(".detailGroupWebinarLink", tableGrid)
                        .off("click")
                        .on("click", function (e) {
                            e.preventDefault();

                            var id = $(this).attr("id");
                            showEditMaintenancePane.call(self, id, tableGrid);

                        });

                    $(".cancelRegisterLink", tableGrid)
                        .off("click")
                        .on("click", function (e) {
                            e.preventDefault();

                            var id = $(this).attr("id");
                            cancelRegister.call(self, id, tableGrid);

                        });

                    tableGrid.data("loaded", true);
                });
        },

        LoadArchivedGroupWebinarGrid: function (tableGrid) {
            var self = this;

            tableGrid.bootgrid({
                ajax: true,
                post: function () {
                    return {
                        GroupClassId: tableGrid.data("group-class-id")
                    };
                },
                url: tableGrid.data('url')
            });
        },

        ReloadGrid: function () {
            var self = this;

            if (self.UpcomingGrid.data("loaded")) {
                self.UpcomingGrid.bootgrid('reload');
            }

            if (self.RegisteredGrid.data("loaded")) {
                self.RegisteredGrid.bootgrid('reload');
            }

            if (self.ArchivedGrid.data("loaded")) {
                self.ArchivedGrid.bootgrid('reload');
            }

        },

        SetupCaller: function (caller) {
            this.Caller = caller;
        }

    };
    // export javascript classes into window environment 
    window.StudentGroupWebinarIndex = studentGroupWebinarIndex;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    function initEventHandler() {
        var self = this;
        var eventHandler = {
            startBtnClick: function (e) {
                e.preventDefault();
                closeErrorPane();

                var element = $(this);
                var url = element.data("url") +
                    "?mockTestId=" +
                    element.data("mock-test-id");
                showPopup(url);
            },
            retakeBtnClick: function (e) {
                e.preventDefault();
                closeErrorPane();

                var element = $(this);
                var url = element.data("url") +
                    "?mockTestId=" +
                    element.data("mock-test-id");
                showPopup(url);
            },
            buyBtnClick: function (e) {
                var url = $(this).data("url");
                window.location.href = url;
            }
        };

        $("#btnStart")
            .off("click")
            .on("click", eventHandler.startBtnClick);

        $("#btnBuyAddOns")
            .off("click")
            .on("click", eventHandler.buyBtnClick);

        $("#btnRetake")
            .off("click")
            .on("click", eventHandler.retakeBtnClick);
    }

    // Constructor
    var studentGuidedMockTestIndex = function (element) {
        this.Element = element;
    };

    studentGuidedMockTestIndex.prototype = {
        constructor: studentGuidedMockTestIndex,
        Register: function () {
            var self = this;

            initEventHandler.call(self);
        }      
    };

    // Export javascript class into window environment
    window.StudentGuidedMockTestIndex = studentGuidedMockTestIndex;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    // Private Functions
    function initEventHandler() {
        var self = this;
        var eventHandler = {
            onVideoReady: function (video) {
                $("#spinnerImageVideo").hide();
            }
        };

        window._wq = window._wq || [];
        _wq.push({
            id: "_all",
            onReady: eventHandler.onVideoReady
        });
    }

    // Constructor
    var studentGuidedMockTestStartPage = function (element) {
        this.Element = element;
    };

    studentGuidedMockTestStartPage.prototype = {
        constructor: studentGuidedMockTestStartPage,
        Register: function () {
            var self = this;

            initEventHandler.call(self);
        }      
    };

    // Export javascript class into window environment
    window.StudentGuidedMockTestStartPage = studentGuidedMockTestStartPage;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    // Private Functions
    function initEventHandler() {
        var self = this;
        var eventHandler = {
            nextBtnClick: function (e) {
                e.preventDefault();
                
                var element = $(this);
                var groupIndex = element.data("group-index");
                var index = element.data("index");
                var nextIndex = index + 1;
                var nextGroupIndex = groupIndex + 1;
                if ($("#gmt-" + groupIndex + "-" + nextIndex).length) {
                    goTo.callWithLog(self, groupIndex, nextIndex);
                }
                else if ($("#gmt-" + nextGroupIndex + "-1").length) {
                    goTo.callWithLog(self, nextGroupIndex, 1);
                }
            },
            
            recordButtonClick: function (e) {
                e.preventDefault();
                var btnEl = $(this);

                startCountdown.callWithLog(self, btnEl);

            },

            uploadButtonClick: function (e) {
                e.preventDefault();
                var btnEl = $(this);

                uploadAudioFile.callWithLog(self, btnEl);
            },

            onVideoReady: function (video) {
                var currentActiveElement = $("#gmt-" + self.CurrentGroupIndex + "-" + self.CurrentIndex);
                currentActiveElement.find("#spinnerImageVideo").hide();
            },

            summerNoteKeyUp: function () {
                var wrapper = $(this).parents(".guided-mock-test-question");

                countWord.callWithLog(self, wrapper);
            },

            cutBtnClick: function (e) {
                e.preventDefault();

                var wrapper = $(this).parents(".guided-mock-test-question");

                window.getSelection();
                document.execCommand('cut');
                countWord.callWithLog(self, wrapper);
            },

            pasteBtnClick: function (e) {
                e.preventDefault();
                var wrapper = $(this).parents(".guided-mock-test-question");
                navigator.clipboard.readText()
                    .then(text => {
                        document.execCommand("insertHTML", false, text);
                        countWord.callWithLog(self, wrapper);
                    })
                    .catch(err => { return; });

            },

            undoBtnClick: function (e) {
                e.preventDefault();
                var wrapper = $(this).parents(".guided-mock-test-question");
                var currTextArea = wrapper.find("textarea[id^='SummarizeWritingAnswer']");

                if (currTextArea.length) {
                    $(currTextArea[0]).summernote('undo');
                }
                countWord.callWithLog(self, wrapper);
            },

            selectChange: function (e) {
                e.preventDefault();

                var wrapper = $(this).parents(".guided-mock-test-question");
                var anyUnanswered = false;
                wrapper.find("select").each(function () {
                    var selectedOption = $(this).find("option:selected");
                    if (selectedOption.index() === 0 || selectedOption.text() === "" || selectedOption.text() === "-") {
                        anyUnanswered = true;
                        return false;
                    }
                });
                setButtonEnable.callWithLog(self, !anyUnanswered, wrapper);
            },

            checkboxChange: function () {
                var wrapper = $(this).parents(".guided-mock-test-question");

                var totalChecked = wrapper.find("input:checkbox:checked").length;

                setButtonEnable.callWithLog(self, totalChecked > 0, wrapper);
            },

            inputTextChange: function () {
                var anyUnanswered = false;
                var wrapper = $(this).parents(".guided-mock-test-question");
                wrapper.find("input[type=text]").each(function () {
                    var element = $(this);
                    if (element.val().trim() === "") {
                        anyUnanswered = true;
                        return false;
                    }
                });

                if (!anyUnanswered) {
                    if (wrapper.find("#recordButton").length > 0) {
                        if (wrapper.find("#record-url").attr("href") !== "") {
                            setButtonEnable.callWithLog(self, true, wrapper);
                        }
                    } else {
                        setButtonEnable.callWithLog(self, true, wrapper);
                    }
                } else {
                    setButtonEnable.callWithLog(self, false, wrapper);
                }
            },

            radioChange: function () {
                var wrapper = $(this).parents(".guided-mock-test-question");

                setButtonEnable.callWithLog(self, true, wrapper);
            },
            closeBtnClick: function () {
                window.close();
            },
            highlightClick: function (e) {
                e.preventDefault();
                var wrapper = $(this).parents(".guided-mock-test-question");
                $(this).toggleClass("blank highlighted");

                var isHighlighted = wrapper.find(".highlighted").length > 0;
                setButtonEnable.callWithLog(self, isHighlighted, wrapper);
            }
        };

        $(".btn-next")
            .off("click")
            .on("click", eventHandler.nextBtnClick);

        $(".multipleRecorderButton")
            .off("click")
            .on("click", eventHandler.recordButtonClick);

        $(".multipleUploadButton")
            .off("click")
            .on("click", eventHandler.uploadButtonClick);

        $("textarea[id^='SummarizeWritingAnswer']")
            .on('summernote.keyup', eventHandler.summerNoteKeyUp);

        $("input[type=checkbox]")
            .off("change")
            .on("change", eventHandler.checkboxChange);

        $(".cut-btn")
            .off("click")
            .on("click", eventHandler.cutBtnClick);

        $(".paste-btn")
            .off("click")
            .on("click", eventHandler.pasteBtnClick);

        $(".undo-btn")
            .off("click")
            .on("click", eventHandler.undoBtnClick);

        $("select")
            .off("change")
            .on("change", eventHandler.selectChange);

        $("input[type=radio]")
            .off("change")
            .on("change", eventHandler.radioChange);

        $("input[type=text]")
            .bind("keyup change", eventHandler.inputTextChange);

        $(".closeButton")
            .off("click")
            .on("click", eventHandler.closeBtnClick);

        $(".highlight-word")
            .off("click")
            .on("click", eventHandler.highlightClick);

        window._wq = window._wq || [];
        _wq.push({
            id: "_all",
            onReady: eventHandler.onVideoReady
        });
    }

    function initializeDragAndDrop() {
        var self = this;
        var uniqueAnswerIds = new Array();

        function isInArray(value, array) {
            return array.indexOf(value) > -1;
        }

        $(".draggable")
            .draggable({
                helper: "clone",
                revert: function () {
                    if ($(this).hasClass("drag-revert")) {
                        return true;
                    }
                },
                scroll: 'true'
            });

        $(".droppable")
            .droppable({
                accept: ".draggable",
                tolerance: 'pointer',
                drop: function (e, ui) {
                    var answerId = $(ui.draggable).data("answerid");
                    var sortingIndex = $(ui.draggable).data("sortingindex");
                    var sentenceKey = $(ui.draggable).data("sentencekey");
                    var mockTestQuestionId = $(ui.draggable).data("mocktestquestionid");
                    var orderParagraphId = $(ui.draggable).data("orderparagraphid");
                    var sectionType = $(ui.draggable).data("sectiontype");
                    if ((uniqueAnswerIds.length === 0 || isInArray(answerId, uniqueAnswerIds) === false)) {
                        if ($(this).find(".remove-sentence").hasClass("hidden") &&
                            !$(this).find(".sentence-text").hasClass("correct-answer") &&
                            !$(this).find(".sentence-text").hasClass("wrong-answer")
                        ) {
                            var content = $(this);

                            $(this)
                                .find(".remove-sentence")
                                .click(function (e) {
                                    e.preventDefault();
                                    content.find(".sentence-text").html("");
                                    content.find(".remove-sentence").addClass("hidden");
                                    $("#draggable-" + $(this)[0].dataset["answerid"]).removeClass("hidden");
                                    var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                    uniqueAnswerIds.splice(index, 1);
                                    $(this).parents(".question-container").data("answerid", "");
                                    $(this).data("answerid", "");

                                    var wrapper = $("#gmt-" + self.CurrentGroupIndex + "-" + self.CurrentIndex);
                                    if ($(".remove-sentence.hidden").length) {
                                        wrapper.find(".btn-next").addClass("disabled").attr("disabled", "disabled");
                                    } else {
                                        wrapper.find(".btn-next").removeClass("disabled").removeAttr("disabled");
                                    }
                                });
                            if ($(this).data("answerid") !== "") {
                                var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                uniqueAnswerIds.splice(index, 1);
                            }
                            $(this).data("answerid", answerId);
                            $(this).data("sortingindex", sortingIndex);
                            $(this).data("sentencekey", sentenceKey);
                            $(this).data("mocktestquestionid", mockTestQuestionId);
                            $(this).data("orderparagraphid", orderParagraphId);
                            $(this).data("sectiontype", sectionType);
                            $(this).find(".sentence-text").html($(ui.draggable).html());
                            $(this).find(".remove-sentence").removeClass("hidden")
                                .attr("data-answerid", answerId);

                            $("#draggable-" + answerId).addClass("hidden");

                            uniqueAnswerIds.push($(this).data("answerid"));

                            var wrapper = $("#gmt-" + self.CurrentGroupIndex + "-" + self.CurrentIndex);
                            if (wrapper.find(".remove-sentence.hidden").length) {
                                wrapper.find(".btn-next").addClass("disabled").attr("disabled", "disabled");
                            } else {
                                wrapper.find(".btn-next").removeClass("disabled").removeAttr("disabled");
                            }

                            return $(ui.draggable).removeClass("drag-revert");
                        } else {
                            $("#draggable-" + answerId).removeClass("hidden");
                            return $(ui.draggable).addClass("drag-revert");
                        }
                    }
                }
            });
    }

    function countWord(wrapper) {
        var self = this;

        var wordCountEl = wrapper.find(".wordCount");
        var el = wrapper.find("textarea[id^='SummarizeWritingAnswer']");
        if (wordCountEl.length > 0) {
            var value = el.summernote("code").replace(/<\/p>/gi, "\n")
                .replace(/<br\/?>/gi, "\n")
                .replace(/<\/?[^>]+(>|$)/g, "");
            if (value.trim().length === 0) {
                wordCountEl.html(0);
                wrapper.find(".btn-next").addClass("disabled").attr("disabled", "disabled");
                return;
            }
            var regex = /\s+/gi;
            var wordCount = value.trim().replace(regex, ' ').split(' ').length;
            wrapper.find(".btn-next").removeClass("disabled").removeAttr("disabled");
            wordCountEl.html(wordCount);
        }
        el.summernote('focus');
    }

    function goTo(groupIndex, index) {
        var self = this;

        var currentActiveElement = $("#gmt-" + self.CurrentGroupIndex + "-" + self.CurrentIndex);
        var nextElement = $("#gmt-" + groupIndex + "-" + index);

        var recorderButton = currentActiveElement.find(".multipleRecorderButton");
        if (recorderButton.length !== 0 && !recorderButton.hasClass("hidden")) {
            recorderButton.click();
        }

        var countDownEl = currentActiveElement.find('[id^="beforeRecordingLog"]');
        stopBeforeRecordCountdown.callWithLog(self, currentActiveElement, countDownEl);
        stopRecord.callWithLog(self, currentActiveElement);
        stopAudio.callWithLog(self);
        stopYoutubeVideo.callWithLog(self);
        stopWistiaVideo.callWithLog(self, currentActiveElement);

        clearInterval(self.BeforeRecordCountDown);
        clearInterval(self.BeforePlayAudioCountDown);
        clearInterval(self.TimerCountDown);
        clearInterval(self.QuestionCountDown);
        clearInterval(self.CountDown);

        var isTestHandled = isTestFormHandled.callWithLog(self, currentActiveElement, nextElement);
        if (isTestHandled) {
            return;
        }

        var parent = nextElement.parents(".guided-mock-test-section");
        if (index === 1) {
            parent.addClass("first-page");
        }
        else {
            parent.removeClass("first-page");
        }

        var nextElementDuration = nextElement.data("duration");
        if (nextElementDuration !== 0) {
            prepareTimerForQuestion.callWithLog(self, nextElement);
        }

        if (nextElement.find(".wistia_responsive_wrapper").length) {
            nextElement.find("#spinnerImageVideo").show();
        }
        nextElement.parents(".guided-mock-test-section").show();
        nextElement.show();
        currentActiveElement.hide();
        nextButtonExtendHandler.callWithLog(self, nextElement);

        self.CurrentGroupIndex = groupIndex;
        self.CurrentIndex = index;
    }

    function isTestFormHandled(currentActiveElement, nextElement) {
        var self = this;

        if (currentActiveElement.data("is-test") === "True") {
            var form = currentActiveElement.parents("form");
            if (!currentActiveElement.hasClass("marked")) {
                currentActiveElement.addClass("marked");
                submitAnswer.callWithLog(self, form)

                if ((form.data("section-code") === "REA" || form.data("section-code") === "LIS")
                    && currentActiveElement.data("section-type") !== "[SST]") {
                    form.find(".btn-next").text("Next");
                    form.find(".btn-next").attr("log-action", "BTN_NEXT_CLICK");
                    return true;
                }
            }
        }

        if (nextElement.data("is-test") === "True") {
            nextElement.find(".btn-next").addClass("disabled").attr("disabled", "disabled");

            var nextForm = nextElement.parents("form");
            if (!nextElement.hasClass("marked")
                && (nextForm.data("section-code") === "REA" || nextForm.data("section-code") === "LIS")
                && nextElement.data("section-type") !== "[SST]") {
                nextElement.find(".btn-next").text("Submit");
                nextElement.find(".btn-next").attr("log-action", "BTN_SUBMITANSWER_CLICK");
            }
        }

        return false;
    }

    function submitAnswer(form) {
        var self = this;
        var url = form.data("save-url");
        constructSubmitData.callWithLog(self, form);
        clearInterval(self.QuestionInterval);
        submitFormOverride("#" + form.prop("id"),
            url,
            function (data) {
                if (data.IsSuccess) {
                    markRwfibTest.callWithLog(self, data, true);
                    markMcmaTest.callWithLog(self, data, true);
                    markRopTest.callWithLog(self, data, true);
                    markMcsaTest.callWithLog(self, data, true);
                    markFibTest.callWithLog(self, data, true);
                    markHiwData.callWithLog(self, data, true);
                    markWfdTest.callWithLog(self, data, true);

                    if (data.Value.IsTaken) {
                        updateParentActivityPanel.callWithLog(self, data.Value.Message);
                    }
                }
                else {
                    showErrorMessageDialogWithAction(data, "Close", function () {
                        window.close();
                    });
                }
            });
        return false;
    }

    function constructSubmitData(form) {
        var self = this;
        var highlight = $(".highlighted");
        var j;

        for (j = 0; j < highlight.length; j++) {
            var wrapper = $(highlight[j].closest(".guided-mock-test-question"));
            var answerText = highlight[j].textContent.replace(/\s\s+/g, " ").replace(/\"/g, "&quot;");
            var questionId = highlight[j].getAttribute("data-question-id");
            var index = highlight[j].getAttribute("data-index");
            var mockTestQuestionId = wrapper.data("id");
            var sectionType = wrapper.data("section-type");

            if (answerText !== "") {
                var inputName = "GuidedMockTest_" + sectionType + "_" +
                    mockTestQuestionId +
                    "_" +
                    questionId +
                    "_" +
                    index;
                var input = form.find("input[name='" + inputName + "']");

                if (input.length) {
                    input.remove();
                }

                form.append('<input type="hidden" name="' + inputName +
                    '" value="' +
                    answerText +
                    '" />');
            }
        }

        form.find("input:hidden[name*='GuidedMockTest_[ROP]']").remove();

        $(".droppable")
            .each(function () {
                var sectionKey = $(this).data("sentencekey");
                var questionId = $(this).data("orderparagraphid");
                var mockTestQuestionId = $(this).closest(".guided-mock-test-question").data("id");
                var sectionType = $(this).closest(".guided-mock-test-question").data("section-type");
                var answerId = $(this).data("answerid");
                var sortingIndexTarget = sectionKey.replace("Q", "");

                var input = form.find("input[name='GuidedMockTest_" + sectionType +
                    "_" +
                    mockTestQuestionId +
                    "_" +
                    questionId +
                    "_" +
                    answerId +
                    "']");

                if (input.length) {
                    input.remove();
                }

                if (answerId !== undefined && answerId !== "") {
                    form.append('<input type="hidden" name="GuidedMockTest_' + sectionType +
                        "_" +
                        mockTestQuestionId +
                        "_" +
                        questionId +
                        "_" +
                        answerId +
                        '" value="' +
                        sortingIndexTarget +
                        '" />');
                }
            });

        form.find("input:hidden")
            .not('[name*="MockTestId"]')
            .not('[name*="GuidedMockTest"]')
            .not('[name*="SubSectionId"]')
            .remove();

        $(".disabled").removeAttr("disabled").removeClass("disabled");
    }

    function markMcsaTest(data, isShowCorrectAnswer) {
        var self = this;
        var wrapper = $("#gmt-" + self.CurrentGroupIndex + "-" + self.CurrentIndex);
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedMultipleChoiceAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.IsCorrectAnswer) {
                        var el = wrapper.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                        el.addClass("is-right");
                    }
                });
        };

        $.each(data.Value.CurrentMultipleChoiceAnswers, function (index, element) {
            var el = wrapper.find("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioEl = $("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (element.IsCorrectAnswer) {
                    if (radioEl.length) {
                        radioEl.addClass("is-right");
                    }
                    el.addClass("is-correct");
                } else {
                    if (radioEl.length) {
                        radioEl.addClass("is-wrong");
                    }
                    el.addClass("is-incorrect");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
            }
        });
    }

    function markMcmaTest(data, isShowCorrectAnswer) {
        var self = this;
        var wrapper = $("#gmt-" + self.CurrentGroupIndex + "-" + self.CurrentIndex);
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedMultipleChoiceMultipleAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.IsCorrectAnswer) {
                        var checkBoxEl = wrapper.find("#paragraph-" + element.AnswerId);
                        checkBoxEl.addClass("is-right");
                    }
                });
        };

        $.each(data.Value.CurrentMultipleChoiceMultipleAnswers, function (index, element) {
            var el = wrapper.find("#questionText-" + element.QuestionId);
            if (el.length) {
                var checkBoxEl = wrapper.find("#paragraph-" + element.AnswerId);
                if (element.IsCorrectAnswer) {
                    if (checkBoxEl.length) {
                        checkBoxEl.addClass("is-right");
                    }
                    el.addClass("is-correct");
                } else {
                    if (checkBoxEl.length) {
                        checkBoxEl.addClass("is-wrong");
                    }
                    el.addClass("is-incorrect");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
            }
        });

        wrapper.find("input").addClass("disabled").attr("disabled", "disabled");
    }

    function markFibTest(data, isShowCorrectAnswer) {
        var self = this;
        var wrapper = $("#gmt-" + self.CurrentGroupIndex + "-" + self.CurrentIndex);
        var markCorrectAnswer = function (questionId, mockTestQuestionId, answerKey) {
            $.each(data.Value.ExpectedFillInTheBlankAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.AnswerKey === answerKey) {
                        var el = wrapper.find("input[name^='GuidedMockTest_[" + element.Type + "]_" + mockTestQuestionId + "_" + questionId + "_" + answerKey + "']");
                        var decodedText = $("<div/>").html(element.AnswerValue).text();
                        if (el.val() === "") {
                            el.val(decodedText);
                        } else {
                            el.val(el.val() + " / " + decodedText);
                        }
                    }
                });
        };

        $.each(data.Value.CurrentFillInTheBlankAnswers, function (index, element) {
            var el = wrapper.find("input[name^='GuidedMockTest_[" + element.Type + "]_" + element.MockTestQuestionId + "_" + element.QuestionId + "_" + element.AnswerKey + "']");

            if (el.length) {
                if (element.IsCorrectAnswer) {
                    el.addClass("correct-answer");
                } else {
                    el.addClass("wrong-answer");

                    if (isShowCorrectAnswer) {
                        el.val("");
                        markCorrectAnswer(element.QuestionId, element.MockTestQuestionId, element.AnswerKey);
                    }
                }
            }
        });

        self.Element.find("input[type='text']").each(function () {
            if ($(this).hasClass("flowchart-textbox")) {
                return;
            }
            var updatedWidth = this.scrollWidth + 5;

            if (this.clientWidth !== 0 && this.scrollWidth !== 0 && this.clientWidth < updatedWidth) {
                $(this).attr("style", "width:" + updatedWidth + "px");
            }
        });
    }

    function markRopTest(data, isShowCorrectAnswer) {
        var self = this;
        var wrapper = $("#gmt-" + self.CurrentGroupIndex + "-" + self.CurrentIndex);
        var markCorrectAnswer = function (sortingIndex) {
            $.each(data.Value.ExpectedOrderParagraphAnswers,
                function (index, element) {
                    if (element.CorrectOrderIndex == sortingIndex) {
                        var el = wrapper.find("#question-" + sortingIndex + " .sentence-text");
                        if (el.html() === "") {
                            el.html("(Correct Answer: " + element.AnswerValue + ")");
                        } else {
                            el.html(el.html() + " (Correct Answer: " + element.AnswerValue + ")");
                        }
                        return;
                    }
                });
        };

        wrapper.find(".sentence-text").each(function () {
            var el = $(this);
            var answerEl = el.siblings(".remove-sentence");
            var answerId = answerEl.parents(".droppable").data("answerid");
            var answerKey = el.parents(".dragdrop-section").data("sentencekey").replace("Q", "");
            if (answerId !== undefined && answerId !== "") {
                $.each(data.Value.CurrentOrderParagraphAnswers, function (index, element) {
                    if (answerId == element.AnswerId && answerKey == element.AnswerKey) {
                        if (element.IsCorrectAnswer) {
                            el.addClass("correct-answer");
                            answerEl.addClass("hidden");
                        } else {
                            el.addClass("wrong-answer");
                            answerEl.addClass("hidden");

                            if (isShowCorrectAnswer) {
                                markCorrectAnswer(answerKey);
                            }
                        }
                        return;
                    }
                });
            }
            else {
                el.addClass("wrong-answer");
                answerEl.addClass("hidden");
                if (isShowCorrectAnswer) {
                    markCorrectAnswer(answerKey);
                }
            }
        });
    }

    function markRwfibTest(data, isShowCorrectAnswer) {
        var self = this;

        var wrapper = $("#gmt-" + self.CurrentGroupIndex + "-" + self.CurrentIndex);
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedReadingMultipleChoiceAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId) {
                        var optionEl = wrapper.find("option[value=" + element.AnswerValue + "]");
                        var selectEl = optionEl.parents("select");
                        selectEl.val(element.AnswerId);
                        return;
                    }
                });
        };

        $.each(data.Value.CurrentReadingMultipleChoiceAnswers, function (index, element) {
            var el = wrapper.find("option[value=" + element.AnswerValue + "]");
            if (el.length) {
                var selectEl = el.parents("select");
                if (element.IsCorrectAnswer) {
                    if (selectEl.length) {
                        selectEl.addClass("correct-answer");
                    }
                } else {
                    if (selectEl.length) {
                        selectEl.addClass("wrong-answer");
                    }

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
                selectEl.addClass("disabled").attr("disabled", "disabled");
            }
        });
    }

    function markHiwData(data, isShowCorrectAnswer) {
        var self = this;
        var wrapper = $("#gmt-" + self.CurrentGroupIndex + "-" + self.CurrentIndex);

        $.each(data.Value.CurrentHighlightIncorrectAnswers,
            function (index, element) {
                var selectedCorrectAnswer = wrapper.find('.highlight-word[data-question-id="' +
                    element.QuestionId +
                    '"][data-index="' +
                    element.AnswerId +
                    '"]');

                selectedCorrectAnswer.removeClass("blank highlighted");
                if (!element.IsCorrectAnswer) {
                    selectedCorrectAnswer.addClass("bg-danger");
                }
                else {
                    selectedCorrectAnswer.addClass("bg-success");
                }
            });

        if (isShowCorrectAnswer) {
            $.each(data.Value.ExpectedHighlightIncorrectAnswers,
                function (index, element) {
                    var selectedCorrectAnswer = wrapper.find('*[data-question-id="' + element.QuestionId + '"]').filter(
                        function () {
                            return $(this).text() === element.AnswerValue;
                        });

                    selectedCorrectAnswer.removeClass("blank highlighted");
                    selectedCorrectAnswer.addClass("bg-success");
                });
        }

        wrapper.find(".highlight-word").unbind('click');
    }

    function markWfdTest(data, isShowCorrectAnswer) {
        var self = this;
        var wrapper = $("#gmt-" + self.CurrentGroupIndex + "-" + self.CurrentIndex);
        var markCorrectAnswer = function (questionId, mockTestQuestionId, answerKey) {
            $.each(data.Value.ExpectedWriteFromDictationAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.AnswerKey === answerKey) {
                        var el = wrapper.find("input[name^='GuidedMockTest_[" + element.Type + "]_" + mockTestQuestionId + "_" + questionId + "_" + answerKey + "']");
                        var decodedText = $("<div/>").html(element.AnswerValue).text();
                        if (el.val() === "") {
                            el.val(decodedText);
                        } else {
                            el.val(el.val() + " / " + decodedText);
                        }
                    }
                });
        };

        $.each(data.Value.CurrentWriteFromDictationAnswers, function (index, element) {
            var el = wrapper.find("input[name^='GuidedMockTest_[" + element.Type + "]_" + element.MockTestQuestionId + "_" + element.QuestionId + "_" + element.AnswerKey + "']");

            if (el.length) {
                if (element.IsCorrectAnswer) {
                    el.addClass("correct-answer");
                } else {
                    el.addClass("wrong-answer");

                    if (isShowCorrectAnswer) {
                        el.val("");
                        markCorrectAnswer(element.QuestionId, element.MockTestQuestionId, element.AnswerKey);
                    }
                }
            }
        });

    }

    function prepareTimerForQuestion(wrapper) {
        var self = this;
        var duration = 0;
        var durationPanel = wrapper.find(".timer-duration-panel");
        if (durationPanel.length > 0) {
            duration = $(durationPanel).data("duration");
        }

        var secondaryTimer = wrapper.find(".secondaryTimer");
        if (wrapper.find(".disable-auto-start-timer").length) {
            return;
        }

        if (duration !== 0) {
            var timerId = durationPanel.prop("id");

            self.QuestionInterval = setInterval(function () {
                DynamicTimerWithCustomInterval("#" + timerId, "",
                    function () { questionTimeOut.callWithLog(self, wrapper); },
                    self.QuestionInterval);

                if (secondaryTimer.length) {
                    secondaryTimer.html(durationPanel.html());
                }
            },
                1000);
            self.QuestionCountDown = self.QuestionInterval;
        }
    }

    function stopRecord(section) {
        var recordButton = section.find("#recordButton");
        if (recordButton.length && !recordButton.hasClass("btn-danger")) {
            recordButton.click();
        }
    }

    function stopAudio() {
        var sounds = $(".audio-player");
        var i;
        for (i = 0; i < sounds.length; i++) sounds[i].pause();
    }

    function stopYoutubeVideo() {
        $(".youtube-player").each(function () {
            var el_src = $(this).attr("src");
            $(this).attr("src", el_src);
        });
    }

    function stopWistiaVideo(currentSection) {
        if ($(currentSection).find(".wistia_responasive_wrapper").length) {
            var allVideos = Wistia.api.all();
            for (var i = 0; i < allVideos.length; i++) {
                allVideos[i].pause();
            }
        }
    }

    function nextButtonExtendHandler(wrapper) {
        var self = this;
        var sectionType = wrapper.data("section-type");
        if (sectionType === "") {
            return;
        }

        initAudioPlayerWidget(wrapper.find("#audioPlayerPanel"));

        if (sectionType === "[FIB]" ||
            sectionType === "[MCSA]" ||
            sectionType === "[MCMA]" ||
            sectionType === "[HCS]" ||
            sectionType === "[SMW]" ||
            sectionType === "[HIW]" ||
            sectionType === "[WFD]"
        ) {
            startBeforePlayAudioCountdown.callWithLog(self, wrapper);
        } else if (sectionType === "[RA]") {
            startBeforeRecordCountdown.callWithLog(self, wrapper);
        } else if (sectionType === "[RL]") {
            startBeforePlayAudioRLCountdown.callWithLog(self, wrapper);
            retellLectureAudioPlayerHandler.callWithLog(self, wrapper);
        } else if (sectionType === "[DI]") {
            var playRingBell = function () {
                wrapper.find(".bell-ring")[0].play();
            };
            startBeforeRecordCountdown.callWithLog(self, wrapper, playRingBell);
        } else if (sectionType === "[RS]") {
            wrapper.find(".recorder-exercise-text").hide();
            startBeforePlayAudioCountdown.callWithLog(self, wrapper);
            repeatSentenceAudioPlayerHandler.callWithLog(self, wrapper);
        } else if (sectionType === "[ASQ]") {
            wrapper.find(".recorder-exercise-text").hide();
            startBeforePlayAudioCountdown.callWithLog(self, wrapper);
            answerShortQuestionAudioPlayerHandler.callWithLog(self, wrapper);
        } else if (sectionType === "[SWT]"
            || sectionType === "[ESSAY]") {
            var textInput = wrapper.find("textarea[id^='SummarizeWritingAnswer']");
            if (textInput.length) {
                textInput.summernote('focus');
            }
        } else if (sectionType === "[SST]") {
            startBeforePlayAudioCountdown.callWithLog(self, wrapper);
            spokenTextAudioPlayerHandler.callWithLog(self, wrapper);
        } 
    }

    function spokenTextAudioPlayerHandler(wrapper) {
        var self = this;

        audioPlayerHandler.callWithLog(self, wrapper);
    }

    function startBeforeRecordCountdown(wrapper, onStopCountDown) {
        var self = this;

        wrapper.find(".recorder-exercise-text").show();
        var timerNumber = 0;
        var countDownEl = wrapper.find('[id^="beforeRecordingLog"]');
        var duration = countDownEl.data("duration");
        var isUploadFormVisible = wrapper.find(".uploadControlSection").is(":visible");

        if (isUploadFormVisible) {
            return;
        }

        var stopCountdownAction = function () {
            if (typeof onStopCountDown === "function") {
                onStopCountDown();
            }

            stopBeforeRecordCountdown.callWithLog(self, wrapper, countDownEl);
        };

        wrapper.find("#recordButton").addClass("hidden");

        if (duration === 0 || duration === null || duration === undefined) {
            stopCountdownAction();
            return;
        } else {
            timerNumber = parseInt(duration);
        }

        self.BeforeRecordCountDown = setInterval(function () {
            writeBeforeRecordLogCountDown.callWithLog(self, wrapper, timerNumber);
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                stopCountdownAction();
            }
        },
            1000);
    }

    function writeBeforeRecordLogCountDown(wrapper, number) {
        var label = "seconds";

        if (number <= 1) {
            label = "second";
        }
        var text = wrapper.data("before-recording-text");
        wrapper.find('[id^="beforeRecordingLog"]').html(text + " <strong>" + number + " " + label + "</strong>");
    }

    function stopBeforeRecordCountdown(wrapper, countDownEl) {
        var self = this;
        var recordButtonEl = countDownEl.closest("#recorderControlPanel").find("#recordButton");
        showRecordButton.callWithLog(self, wrapper, recordButtonEl);

        stopBeforeRecordCounter.callWithLog(self);
        hideBeforeRecordLog.callWithLog(self, wrapper);
    }

    function startBeforePlayAudioCountdown(wrapper) {
        var self = this;
        var timerNumber = 3;
        var countDownEl = wrapper.find('.counter-before-play');
        if (countDownEl.length) {
            var duration = countDownEl.data("duration");

            if (duration !== 0) {
                timerNumber = parseInt(duration);
            }

            self.BeforePlayAudioCountDown = setInterval(function () {
                writeBeforePlayAudioLogCountDown.callWithLog(self, wrapper, timerNumber);
                timerNumber = timerNumber - 1;
                if (timerNumber < 0) {
                    wrapper.find(".audioPlayer").removeClass("disabled-audio");
                    stopBeforePlayAudioCountdown.callWithLog(self, wrapper);
                }
            }, 1000);
        } else {
            if (wrapper.find(".audioPlayer").length) {
                wrapper.find(".audioPlayer").removeClass("disabled-audio");
                stopBeforePlayAudioCountdown.callWithLog(self, wrapper);
            }
        }

        audioPlayerHandler.callWithLog(self, wrapper);
    }

    function startBeforePlayAudioRLCountdown(wrapper) {
        var self = this;
        var timerNumber = 3;
        var countDownEl = wrapper.find('.counter-before-play');
        var duration = countDownEl.data("duration");

        if (duration !== 0) {
            timerNumber = parseInt(duration);
        }
        self.BeforePlayAudioCountDown = setInterval(function () {
            writeBeforePlayAudioLogCountDown.callWithLog(self, wrapper, timerNumber);
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                wrapper.find("#audioPlayerPanel").removeClass("disabled-audio");
                stopBeforePlayAudioCountdown.callWithLog(self, wrapper);
            }
        },
            1000);

        audioPlayerHandler.callWithLog(self, wrapper);
    }

    function repeatSentenceAudioPlayerHandler(wrapper) {
        var self = this;

        var onEnded = function () {
            wrapper.find("#recorderControlPanel").closest(".panel-default").removeClass("hidden");
            startBeforeRecordCountdown.callWithLog(self, wrapper);
        };

        audioPlayerHandler.callWithLog(self, wrapper, null, onEnded);
    }

    function retellLectureAudioPlayerHandler(wrapper) {
        var self = this;
        var onPlay = function (currentAudioPlayerEl) {
            if (currentAudioPlayerEl.closest(".audioPlayerPanel").hasClass("disabled-audio")) {
                this.pause();
                this.currentTime = 0;
                return;
            }
        };

        var onEnded = function () {
            wrapper.find(".retell-lecture-recorder").removeClass("hidden");
            startBeforeRecordCountdown.callWithLog(self, wrapper);
        };

        audioPlayerHandler.callWithLog(self, wrapper, onPlay, onEnded);
    }

    function answerShortQuestionAudioPlayerHandler(wrapper) {
        var self = this;

        var onPlay = function (currentAudioPlayerEl) {
            if (currentAudioPlayerEl.hasClass("disabled-audio")) {
                this.pause();
                this.currentTime = 0;
                return;
            }
        };

        var onEnded = function () {
            wrapper.find("#recorderControlPanel").closest(".exercise-text.hidden").removeClass("hidden");
            startBeforeRecordCountdown.callWithLog(self, wrapper);
        };

        audioPlayerHandler.callWithLog(self, wrapper, onPlay, onEnded);
    }

    function audioPlayerHandler(wrapper, onPlay, onEnded) {
        var self = this;
        var audioPlayerEl = wrapper.find("#audioPlayerPanel audio");

        if (audioPlayerEl.length === 0) {
            return;
        }

        self.IsAudioPlayed = false;

        var eventHandler = {
            play: function () {
                audioPlayerEl.find(".e2l-audio-player-footer").addClass("hidden");

                if (self.IsAudioPlayed || self.BeforePlayAudioCountDown !== null) {
                    this.pause();
                    return;
                }

                if (typeof onPlay === "function") {
                    onPlay($(this));
                }
            },
            ended: function () {
                if (self.IsAudioPlayed) {
                    return;
                }

                self.IsAudioPlayed = true;
                if (typeof onEnded === "function") {
                    onEnded();
                }
            }
        };

        audioPlayerEl
            .off("play")
            .on('play', eventHandler.play);

        audioPlayerEl
            .off("ended")
            .on('ended', eventHandler.ended);
    }

    function showRecordButton(wrapper, recordButtonEl) {
        var self = this;

        recordButtonEl.removeClass("hidden");
        showLog.callWithLog(self, wrapper);
        var duration = recordButtonEl.data("duration");
        var timerNumber = 35;
        if (duration !== 0) {
            timerNumber = parseInt(duration);
        }
        writeDown.callWithLog(self, wrapper, timerNumber);

        recordButtonEl.click();
    }

    function stopBeforeRecordCounter() {
        var self = this;
        if (self.BeforeRecordCountDown !== undefined || self.BeforeRecordCountDown !== null) {
            clearInterval(self.BeforeRecordCountDown);
            self.BeforeRecordCountDown = null;
        }
    }

    function stopBeforePlayAudioCountdown(wrapper) {
        var self = this;
        var audioPlayerEl = wrapper.find("#audioPlayerPanel audio");

        if (audioPlayerEl.length && audioPlayerEl[0] !== undefined) {
            var playAudioPromise = audioPlayerEl[0].play();
            if (playAudioPromise !== undefined) {
                playAudioPromise.then(_ => {
                    wrapper.find(".e2l-audio-player-footer").addClass("hidden");
                }).catch(error => {
                    wrapper.find(".e2l-audio-player-footer").removeClass("hidden");
                });
            } else {
                wrapper.find(".e2l-audio-player-footer").removeClass("hidden");
            }
        } else {
            wrapper.find(".e2l-audio-player-footer").removeClass("hidden");
        }

        stopBeforePlayAudioCounter.callWithLog(self);
        hideBeforePlayAudioLog.callWithLog(self, wrapper);
    }

    function stopBeforePlayAudioCounter() {
        var self = this;
        if (self.BeforePlayAudioCountDown !== undefined || self.BeforePlayAudioCountDown !== null) {
            clearInterval(self.BeforePlayAudioCountDown);
            self.BeforePlayAudioCountDown = null;
        }
    }

    function hideBeforePlayAudioLog(wrapper) {
        wrapper.find('.counter-before-play')
            .css("visibility", "hidden")
            .empty();
    }

    function showLog(wrapper) {
        wrapper.find('[id^="recordingLog"]')
            .css("visibility", "visible")
            .empty();
    }

    function hideLog(wrapper) {
        wrapper.find('[id^="recordingLog"]')
            .css("visibility", "hidden")
            .empty();
    }

    function hideBeforeRecordLog(wrapper) {
        wrapper.find('[id^="beforeRecordingLog"]')
            .css("visibility", "hidden")
            .empty();
    }

    function writeDown(wrapper, number) {
        var label = "seconds";

        if (number <= 1) {
            label = "second";
        }

        wrapper.find('[id^="recordingLog"]').html("<strong>Remaining time: " + number + " " + label + "</strong>");
    }
    
    function writeBeforePlayAudioLogCountDown(wrapper, number) {
        var label = "seconds";

        if (number <= 1) {
            label = "second";
        }

        wrapper.find('.counter-before-play').html("Status: Beginning in: <strong>" + number + " " + label + "</strong>");
    }

    function uploadAudioFile(btnEl) {
        var self = this;
        var wrapper = btnEl.parents(".guided-mock-test-question");
        var form = btnEl.parents("form");
        var recordingUrl = form.data("upload-audio-file-url");
        recordingUrl += "?mockTestQuestionId=" + wrapper.data("id");

        var pauseTimer = function () {
            clearInterval(self.QuestionCountDown);
            clearInterval(self.TimerCountDown);
        };

        customUploadAudioSpeakingFile(
            event,
            recordingUrl,
            pauseTimer,
            function (response) {
                resumeSectionTimer.callWithLog(self, wrapper);
                hideLog.callWithLog(self, wrapper);
                var spinner = wrapper.find('[id^="spinnerImage"]');
                spinner.hide();

                if (response.IsSuccess === true) {
                    wrapper.find("#record-result").removeClass("hidden");
                    wrapper.find("#submitSpeakingAnswerButton").removeClass("hidden");
                    wrapper.find('[id^="audio-player"]').attr("src", response.Value.AudioUrl);
                    wrapper.find("#record-url").attr("href", response.Value.AudioUrl);
                    wrapper.find("#record-url").html(response.Value.AudioName);
                    var inputName = 'GuidedMockTest_' +
                        wrapper.data("section-type") +
                        "_" +
                        wrapper.data("id") +
                        "_" +
                        response.Value.QuestionId + "_" +
                        response.Value.AnswerId;

                    var inputNamePattern = "GuidedMockTest_" + wrapper.data("section-type") + "_" + wrapper.data("id");
                    var existingInput = wrapper.find('input[name^="' + inputNamePattern + '"]');
                    if (existingInput.length === 0) {
                        existingInput.remove();
                        form.append('<input type="hidden" name="' +
                            inputName +
                            '" value="' +
                            response.Value.AnswerId +
                            '"/>');
                    }

                    if (wrapper.find(".multipleUploadButton").length > 0) {
                        var anyUnanswered = false;

                        wrapper.find("input[type=text]").each(function () {
                            var element = $(this);
                            if (element.val().trim() === "") {
                                anyUnanswered = true;
                                return;
                            }
                        });
                        setButtonEnable.callWithLog(self, !anyUnanswered, wrapper);
                    }

                    wrapper.find(".uploadControlSection").html("Completed. Click NEXT. <br/>");
                } else {
                    showInfoDialog(response.MessageErrorTextArray);
                    clearInterval(self.TimerCountDown);
                    clearInterval(self.QuestionCountDown);

                    $("#" + self.MaintenanceForm.prop("id"))
                        .find("*")
                        .attr("disabled", "disabled")
                        .addClass("disabled");
                }
            });
    }

    function setButtonEnable(isEnable, wrapper) {
        if (isEnable === true) {
            wrapper.find(".btn-next").removeAttr("disabled").removeClass("disabled");
        } else {
            wrapper.find(".btn-next").attr("disabled", "disabled").addClass("disabled");
        }
    }

    function startCountdown(btnEl) {
        var self = this;
        var wrapper = btnEl.parents(".guided-mock-test-question");
        var timerNumber = 35;
        var duration = btnEl.data("duration");
        startRecording.callWithLog(self, wrapper, btnEl);

        if (duration !== 0) {
            timerNumber = parseInt(duration);
        }
        self.CountDown = setInterval(function () {
            writeDown.callWithLog(self, wrapper, timerNumber);
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                stopCountdown.callWithLog(self, wrapper, btnEl);
            }
        },
            1000);
    }

    function stopCountdown(wrapper, btnEl) {
        var self = this;
        stopCounter.callWithLog(self);
        stopRecording.callWithLog(self, wrapper, btnEl);

        wrapper.find('[id^="spinnerImage"]').show();
        wrapper.find('[id^="recordingLog"]').html("Processing, please wait...");
        wrapper.find(".btn-next").removeClass("disabled").removeAttr("disabled");
    }

    function stopCounter() {
        var self = this;
        if (self.CountDown !== undefined) {
            clearInterval(self.CountDown);
        }
    }

    function startRecording(wrapper, btnEl) {
        var self = this;

        self.E2Logger.MockTestManualLog("START_RECORD", wrapper, btnEl);
        setUploadAudioHandler.callWithLog(self, wrapper);
        stopBeforeRecordCounter.callWithLog(self);
        hideBeforeRecordLog.callWithLog(self, wrapper);

        btnEl.removeClass("btn-danger").removeClass("hidden")
            .html('<i class="fa fa-square fa-fw"></i> Stop')
            .unbind()
            .click(function (e) {
                stopCountdown.callWithLog(self, wrapper, btnEl);
            });

        wrapper.find(".record-instruction").removeClass("hidden").html("<span class='text-danger'>Now Recording</span> <br/>");

        startAudioRecording(function () {
            showManualUploadAudio.callWithLog(self, wrapper);
            stopCounter.callWithLog(self);
        }, btnEl);
    }

    function stopRecording(wrapper, btnEl) {
        var self = this;

        self.E2Logger.MockTestManualLog("STOP_RECORD", wrapper, btnEl);
        setUploadAudioHandler.callWithLog(self, wrapper);
        stopAudioRecording(btnEl);

        btnEl.unbind()
            .click(function () {
                return false;
            });

        btnEl.addClass("hidden");
        wrapper.find(".record-instruction").removeClass("hidden").html("Completed. Click NEXT. <br/>");
    }

    function setUploadAudioHandler(wrapper) {
        var self = this;
        self.CurrentMockTestQuestionId = wrapper.data("id");
        var form = wrapper.parents("form");
        var recordingUrl = form.data("upload-recorder-file-url");
        recordingUrl += "?mockTestQuestionId=" + self.CurrentMockTestQuestionId;

        var onStopRecord = function () {
            clearInterval(self.QuestionCountDown);
            clearInterval(self.TimerCountDown);
        };

        customUploadRecorderSpeakingFile(
            recordingUrl,
            onStopRecord,
            function (response) {
                resumeSectionTimer.callWithLog(self, wrapper);
                hideLog.callWithLog(self, wrapper);
                var spinner = wrapper.find('[id^="spinnerImage"]');
                spinner.hide();
                if (response.IsSuccess === true) {
                    wrapper.find("#submitSpeakingAnswerButton").removeClass("hidden");
                    wrapper.find('[id ^= "audio-player"]').attr("src", response.Value.AudioUrl);
                    wrapper.find("#record-url")
                        .attr("href", response.Value.AudioUrl)
                        .html(response.Value.AudioName);

                    var inputName = 'GuidedMockTest_' +
                        wrapper.data("section-type") +
                        "_" +
                        wrapper.data("id") +
                        "_" +
                        response.Value.QuestionId + "_" +
                        response.Value.AnswerId;

                    var inputNamePattern = "GuidedMockTest_" + wrapper.data("section-type") + "_" + wrapper.data("id");
                    var existingInput = wrapper.find('input[name^="' + inputNamePattern + '"]');
                    if (existingInput.length === 0) {
                        existingInput.remove();
                        form.append('<input type="hidden" name="' +
                            inputName +
                            '" value="' +
                            response.Value.AnswerId +
                            '"/>');
                    }

                    if (wrapper.find("#recordButton").length) {
                        var anyUnanswered = false;

                        wrapper.find("input[type=text]").each(function () {
                            var element = $(this);
                            if (element.val().trim() === "") {
                                anyUnanswered = true;
                                return;
                            }
                        });

                        setButtonEnable.callWithLog(self, !anyUnanswered, wrapper);
                    }
                } else {
                    showInfoDialog(response.MessageErrorTextArray);
                    clearInterval(self.TimerCountDown);
                    clearInterval(self.QuestionCountDown);

                    $("#" + self.MaintenanceForm.prop("id"))
                        .find("*")
                        .attr("disabled", "disabled")
                        .addClass("disabled");
                }
            });
    }

    function resumeSectionTimer(wrapper) {
        var self = this;
        var durationPanel = wrapper.find(".timer-duration-panel");

        if (durationPanel.length) {
            var timerId = durationPanel.prop("id");
            self.QuestionInterval = setInterval(function () {
                DynamicTimerWithCustomInterval("#" + timerId, "",
                    function () { questionTimeOut.callWithLog(self, wrapper); },
                    self.QuestionInterval);
            },
                1000);
            self.QuestionCountDown = self.QuestionInterval;
        }
        else {
            var groupDurationPanel = wrapper.parents(".guided-mock-test-question").find(".timer-duration-panel");
            var groupTimerId = groupDurationPanel.prop("id");

            self.TimerInterval = setInterval(function () {
                DynamicTimerWithCustomInterval("#" + groupTimerId, "",
                    function () { timeOut.callWithLog(self, wrapper); },
                    self.TimerInterval);
            },
                1000);
            self.TimerCountDown = self.TimerInterval;
        }
    }

    function questionTimeOut(wrapper) {
        var self = this;

        var currentActiveElement = $("#gmt-" + self.CurrentGroupIndex + "-" + self.CurrentIndex);

        wrapper
            .find("*")
            .attr("disabled", "disabled")
            .addClass("disabled");

        wrapper
            .find(".btn-next")
            .removeAttr("disabled")
            .removeClass("disabled");

        wrapper
            .find(".note-editable")
            .attr("contenteditable", "false");

        wrapper
            .find(".textarea-button .btn")
            .attr("disabled", "disabled");

        wrapper
            .find('.draggable')
            .addClass("no-click");

        self.E2Logger.MockTestManualLog("TIMEOUT", wrapper);
        stopRecord.callWithLog(self, currentActiveElement);
        stopAudio.callWithLog(self);
        stopYoutubeVideo.callWithLog(self);
        stopWistiaVideo.callWithLog(self, currentActiveElement);
        stopBeforeRecordCounter.callWithLog(self);
    }

    // Constructor
    var studentGuidedMockTestView = function (element) {
        this.Element = element;
        this.CurrentGroupIndex = null;
        this.CurrentIndex = null;
        this.QuestionCountDown = null;
        this.TimerCountDown = null;
        this.BeforeRecordCountDown = null;
        this.CurrentMockTestQuestionId = null;
        this.E2Logger = new E2GuidedMockTestLogger();
    };

    studentGuidedMockTestView.prototype = {
        constructor: studentGuidedMockTestView,
        Register: function () {
            var self = this;

            self.E2Logger.InitializeMockTestLogger(self.Element);
            self.Initialize();
            self.BindEventHandler();

        },
        BindEventHandler: function () {
            var self = this;

            initEventHandler.callWithLog(self);
            initializeDragAndDrop.callWithLog(self);
        },
        Initialize: function () {
            var self = this;

            var currentGroupSection = $('div[class^="guided-mock-test-header-wrapper"]:not(.mmt-hide-panel)');
            self.CurrentGroupIndex = currentGroupSection.data("group-index");
            self.CurrentIndex = currentGroupSection.data("index");
            initializeRecorderPanel();
            nextButtonExtendHandler.callWithLog(self, currentGroupSection);

            $(".wordCount", self.Element).html(0);

            $("textarea[id^='SummarizeWritingAnswer']").summernote({
                toolbar: null,
                height: 250,
                spellCheck: false,
                disableGrammar: true
            });

            $("textarea[id^='SummarizeWritingAnswer']").summernote('enable');
        }
    };

    function updateParentActivityPanel(message) {
        if (window.opener !== null && !window.opener.closed) {
            $("#btnStart", window.opener.document).remove();
            $("#btnRetake", window.opener.document).show();
            $("#GuidedMockTestMessage", window.opener.document).html(message + "<br/><br/>");
            $(".list-guided-mock-test", window.opener.document).remove();
        }
    }

    // Export javascript class into window environment
    window.StudentGuidedMockTestView = studentGuidedMockTestView;
})(jQuery, window);;
var StudentHomeGridSpeakingFeedbackDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.IsReloadModal = false;
    this.ModalDialog = this.Element.closest(".modal");
    this.Grid = $("#gridSpeakingFeedbackAppointment", this.Element);
    this.ModalDialog = this.Element.closest(".modal");
};

StudentHomeGridSpeakingFeedbackDialog.prototype = {
    constructor: StudentHomeGridSpeakingFeedbackDialog,
    Register: function () {
        var self = this;

        self.ModalDialog.modal('show');
        self.LoadGrid(self.Grid);

        self.ModalDialog.on("hidden.bs.modal", function (e) {

            if (self.IsReloadModal) {
                self.IsReloadModal = false;
                window.showBookingSpeakingFeedback("True", self.Grid.data("grid-url"));
            }
        });

        $("#btnAdd", self.Element)
            .off("click")
            .on("click", function () {
                var maintenanceDiv = self._getMaintenanceDiv();
                var url = self.Grid.data("book-url");

                $("#errorPane").remove();
                self.ModalDialog.modal("hide");

                showPartialViewAsync(url, true)
                    .done(function (data) {

                        var afterHideProcessingDialog = function () {
                            maintenanceDiv.html(self.Grid.data("error-pane"));
                            maintenanceDiv.append(data);

                            var helper = new Helper();
                            var namespace = helper.CreateNameSpaceFromURL(url);
                            var apps = new Application(maintenanceDiv, namespace);
                            apps.RegisterWithCaller(self);
                        };

                        hideProcessingDialog(afterHideProcessingDialog);

                    }).fail(function (data) {
                        hideProcessingDialog();
                    });

            });

    },

    LoadGrid: function (grid) {
        var self = this;
        $("#errorPane").hide();
        $("#errorPane").empty();

        grid.bootgrid({
            ajax: true,
            post: function () { },
            url: grid.data("url"),
            rowCount: -1,
            navigation: 0,
            sorting: false,
            templates: {
                search: ""
            },
            formatters: {
                "Action": function (column, row) {
                    var html = "";

                    if (row.MockTestQuestionId !== 0) {
                        html = '<a href="#" class="show-detail-btn"' +
                            'data-url="' + row.AssessmentResultUrl + '">' +
                            '<i class="fa fa-share" aria-hidden="true"></i> View Result</a>';
                        return html;
                    }

                    if (row.Status === "Open" && row.IsValidToCancel) {
                        
                            html = '<a href="#" class="actionReschedule" id="' + row.Id + '" " ' +
                                'data-toggle="tooltip" data-appointment-startdate="' + row.AppointmentStartDateTime + '" data-appointment-date="' + row.AppointmentDate + '" data-appointment-time="' + row.Time + '" data-placement="top" ' +
                                'title="' + grid.data("reschedule-tooltip") + '">' +
                                '<i class="fa fa-exchange" aria-hidden="true"></i>' +
                                '</a>';

                            html += '&nbsp;&nbsp;<a href="#" class="actionCancelAppointment" data-id="' + row.Id + '" " ' +
                                'data-toggle="tooltip" data-appointment-startdate="' + row.AppointmentStartDateTime + '" data-appointment-date="' + row.AppointmentDate + '" data-appointment-time="' + row.Time + '" data-placement="top" ' +
                                'title="' + grid.data("cancel-appointment-tooltip") + '">' +
                                '<i class="fa fa-trash" aria-hidden="true"></i>' +
                                '</a>';
                    }

                    return html;
                }
            }
        }).on("loaded.rs.jquery.bootgrid", function () {

            $('[data-toggle="tooltip"]').tooltip();

            $('.show-detail-btn').on('click', function () {
                var url = $(this).data("url");
                showPopup(url);
            });

            $(".actionReschedule", self.Element).on("click", function () {
                var btnElement = $(this);

                self.ModalDialog.modal("hide");
                submitData({
                    "startDateTime": $(this).data("appointment-startdate"),
                    "appointmentType": grid.data("appointment-type")
                }, grid.data("different-url"), function (data) {

                    if (data.IsLessThan24Hour) {
                        showInfoDialog(data.Message,function() {
                            self.ModalDialog.modal("show");
                        });
                    } else {
                        self.Reschedule(btnElement, grid);
                    }

                });  
            });

            $(".actionCancelAppointment", self.Element)
                .off("click")
                .on("click", function () {

                self.ModalDialog.modal("hide");
                var appointmentStartDate = $(this).data("appointment-startdate");
                var appointmentId = $(this).data("id");

                submitData({
                    "startDateTime": appointmentStartDate,
                    "appointmentType": grid.data("appointment-type")
                }, grid.data("different-url"), function (data) {
                    if (data.IsLessThan24Hour) {
                        showInfoDialog(data.MessageCancel, backdropModalControl);

                    } else {
                        var url = grid.data("cancel-url");
                        url += "?appointmentId=" + appointmentId;

                        submitNonForm(grid.data("delete-message"), url, function (data) {
                            showInformation(grid.data("appointment-cancel"));
                            window.showBookingSpeakingFeedback("True", self.Grid.data("grid-url"));
                            self.ModalDialog.modal("hide");
                            self.ReloadMyCoursePanel();
                            self.ReloadCalendar();
                            
                        }, function () {
                            self.ModalDialog.modal("show");
                        });

                    }
                });

            });

        });
    },

    Reschedule: function (element, grid) {
        var self = this;
        var id = element.attr('id');
        var appointmentDate = element.data('appointment-date') + " " + element.data('appointment-time');

        var message = grid.data("change-message");
        message = message.replace("[DATE TIME]", appointmentDate);
        message = message.replace("[APPOINTMENT TYPE]", "Speaking Feedback");

        showConfirmationDialog(message,
            function () {

                $("#errorPane").remove();
                var maintenanceDiv = self._getMaintenanceDiv();
                var url = grid.data("edit-url");
                url += '?id=' + id;

                showPartialViewAsync(url, true)
                    .done(function (data) {

                        var afterHideProcessingDialog = function () {
                            maintenanceDiv.html(grid.data("error-pane"));
                            maintenanceDiv.append(data);

                            var helper = new Helper();
                            var namespace = helper.CreateNameSpaceFromURL(url);
                            var apps = new Application(maintenanceDiv, namespace);
                            apps.RegisterWithCaller(self);
                        };

                        hideProcessingDialog(afterHideProcessingDialog);

                    }).fail(function (data) {
                    });

            }, function () {
                self.ModalDialog.modal("show");
            }, function () {
                self.ModalDialog.modal("show");
            });
    },

    ReloadMyCoursePanel: function () {
        if ($("#myCoursePanel").length === 0) {
            return;
        }
        var studentHome = new StudentHomeIndex();
        studentHome.GetMyCoursePanel();
    },

    ReloadCalendar: function () {
        if ($("#calendarPanel").length === 0) {
            return;
        }
        var studentHome = new StudentHomeIndex();
        studentHome.ReloadHomeTab();
    },

    ReloadModal: function () {
        var self = this;

        var total = $("#TotalSpeakingFeedback").val();
        var max = $("#NumberOfSpeakingFeedback").val();

        self.ModalDialog.modal('show');

        if (total !== "" || max !== "") {
            if (total >= max) {
                $("#btnAdd").remove();
            }

            var infoMessage = self.Grid.data("info-message");
            infoMessage = infoMessage.replace("{0}", total);
            infoMessage = infoMessage.replace("{1}", max);

            $("#info-total").html(infoMessage);
        }

        self.Grid.bootgrid("reload");
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    _getMaintenanceDiv: function () {
        var self = this;

        if (self.Caller !== null && self.Caller !== undefined && typeof self.Caller.SpeakingFeedbackBodyWrapper === "object") {
            return self.Caller.SpeakingFeedbackBodyWrapper;
        }

        return $("#speakingFeedbackWrapper");
    }
};
var StudentHomeGridTutorialDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.ModalDialog = this.Element.closest(".modal");
    this.Grid = $("#gridTutorialAppointment", this.Element);
};

StudentHomeGridTutorialDialog.prototype = {
    constructor: StudentHomeGridTutorialDialog,
    Register: function () {
        var self = this;

        self.ModalDialog.modal('show');
        self.LoadGrid(self.Grid);

        $("#btnAdd", self.Element)
            .off("click")
            .on("click", function () {
                if ($("#IsStudyPlanBooked").val() === "False") {
                    showInfoDialog(self.Grid.data("study-plan-not-booked-msg"));
                    return;
                }

                var maintenanceDiv = self._getMaintenanceDiv();
                var defaultTutorialUrl = self.Grid.data("book-url");
                var withTeacherTutorialUrl = self.Grid.data("book-with-teacher-url");

                var showBookTutorialForm = function (url) {
                    showPartialViewAsync(url, true)
                        .done(function (data) {

                            var afterHideProcessingDialog = function () {
                                maintenanceDiv.html(self.Grid.data("error-pane"));
                                maintenanceDiv.append(data);

                                var helper = new Helper();
                                var namespace = helper.CreateNameSpaceFromURL(url);
                                var apps = new Application(maintenanceDiv, namespace);
                                apps.RegisterWithCaller(self);
                            };

                            hideProcessingDialog(afterHideProcessingDialog);

                        }).fail(function (data) {
                        });
                };

                self.ModalDialog.on('hidden.bs.modal', function (e) {
                    self.ModalDialog.off('hidden.bs.modal');

                    $("#errorPane").remove();

                    var checkUrl = self.Grid.data("get-latest-teacher-url");
                    var onSuccessResponse = function (response) {
                        if (response.Value.IsAvailable) {
                            withTeacherTutorialUrl += "?teacherId=" + response.Value.TeacherId;

                            showYesNoConfirmationDialog(
                                response.Value.ConfirmationMessage,
                                showBookTutorialForm.bind(self, withTeacherTutorialUrl),
                                showBookTutorialForm.bind(self, defaultTutorialUrl));

                        } else {
                            showBookTutorialForm(defaultTutorialUrl);
                        }
                    };

                    getDataWithLoaderAsync(checkUrl).done(onSuccessResponse);
                });

                self.ModalDialog.modal("hide");

            });

        $("#btnMore").click(function (e) {
            e.preventDefault();
            var url = self.Grid.data("buy-more-url");

            submitData({}, url, function (result) {
                window.location.href = result.Value;
            });
        });

        $("#btnCancel", self.Element)
            .off("click")
            .on("click", function () {
                self.ModalDialog.modal("hide");
            });

    },

    LoadGrid: function (grid) {
        var self = this;
        $("#errorPane").hide();
        $("#errorPane").empty();

        grid.bootgrid({
                ajax: true,
                post: function () {

                },
                rowCount: -1,
                navigation: 0,
                sorting: false,
                templates: {
                    search: ""
                },
                url: grid.data("url"),
                formatters: {
                    "Action": function (column, row) {
                        var html = "";

                        if (row.Status === "Open" && row.IsValidToCancel) {
                            html = '<a href="#" class="actionReschedule" id="' + row.Id + '" " ' +
                                'data-toggle="tooltip" data-appointment-startdate="' + row.AppointmentStartDateTime + '" data-appointment-date="' + row.AppointmentDate + '" data-appointment-time="' + row.Time + '" data-placement="top" ' +
                                'title="' + grid.data("reschedule-tooltip") + '">' +
                                '<i class="fa fa-exchange" aria-hidden="true"></i>' +
                                '</a>';

                            html += '&nbsp;&nbsp;<a href="#" class="actionCancelAppointment" data-id="' + row.Id + '" " ' +
                                'data-toggle="tooltip" data-appointment-startdate="' + row.AppointmentStartDateTime + '" data-appointment-date="' + row.AppointmentDate + '" data-appointment-time="' + row.Time + '" data-placement="top" ' +
                                'title="' + grid.data("cancel-appointment-tooltip") + '">' +
                                '<i class="fa fa-trash" aria-hidden="true"></i>' +
                                '</a>';
                        }

                        return html;
                    }
                }
            }).on("loaded.rs.jquery.bootgrid", function () {

                $('[data-toggle="tooltip"]').tooltip();

                $(".actionReschedule", self.Element)
                    .off("click")
                    .on("click", function () {
                        var btnElement = $(this);

                        self.ModalDialog.on('hidden.bs.modal', function (e) {
                            self.ModalDialog.off('hidden.bs.modal');

                            submitData({
                                "startDateTime": btnElement.data("appointment-startdate"),
                                "appointmentType": grid.data("appointment-type")
                            }, grid.data("different-url"), function (data) {

                                if (data.IsLessThan24Hour) {
                                    showInfoDialog(data.Message, function () {
                                        self.ModalDialog.modal("show");
                                    });
                                } else {
                                    self.Reschedule(btnElement, grid);
                                }

                            });
                        });

                        self.ModalDialog.modal("hide");
                    });

                $(".actionCancelAppointment", self.Element)
                    .off("click")
                    .on("click", function () {
                        var btnElement = $(this);

                        self.ModalDialog.on('hidden.bs.modal', function (e) {
                            self.ModalDialog.off('hidden.bs.modal');

                            var appointmentStartDate = btnElement.data("appointment-startdate");
                            var appointmentId = btnElement.data("id");

                            submitData({
                                "startDateTime": appointmentStartDate,
                                "appointmentType": grid.data("appointment-type")
                            }, grid.data("different-url"), function (data) {
                                if (data.IsLessThan24Hour) {
                                    showInfoDialog(data.MessageCancel, backdropModalControl);

                                } else {
                                    var url = grid.data("cancel-url");
                                    url += "?appointmentId=" + appointmentId;

                                    submitNonForm(grid.data("delete-message"), url, function (data) {
                                        showInformation(grid.data("appointment-cancel"));
                                        self.ModalDialog.modal("hide");
                                        self.ReloadMyCoursePanel();
                                        self.ReloadCalendar();

                                    }, function () {
                                        self.ModalDialog.modal("show");
                                    });

                                }
                            });

                        });

                        self.ModalDialog.modal("hide");
                    });

            });
    },

    Reschedule: function (element, grid) {
        var self = this;
        var id = element.attr('id');
        var appointmentDate = element.data('appointment-date') + " " + element.data('appointment-time');

        var message = grid.data("change-message");
        message = message.replace("[DATE TIME]", appointmentDate);
        message = message.replace("[APPOINTMENT TYPE]", "tutorial");

        showConfirmationDialog(message, self._checkLatestTutorialAppointment.bind(self, id),
            function () {
                self.ModalDialog.modal("show");
            }, function () {
                self.ModalDialog.modal("show");
            });
    },

    ReloadMyCoursePanel: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.GetMyCoursePanel();
    },

    ReloadCalendar: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.ReloadHomeTab();
    },

    ReloadModal: function () {
        var self = this;
        var total = $("#TotalAppointment").val();
        var max = $("#NumberOfTutorial").val();

        self.ModalDialog.modal('show');

        if (total !== "" || max !== "") {
            if (total >= max) {
                $("#btnAdd").remove();
                $("#btnMore").removeClass("hidden");
            }

            var infoMessage = self.Grid.data("info-message");
            infoMessage = infoMessage.replace("{0}", total);
            infoMessage = infoMessage.replace("{1}", max);

            $("#info-total").html(infoMessage);
        }

        self.Grid.bootgrid("reload");
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    _getMaintenanceDiv: function () {
        var self = this;

        if (self.Caller !== null && self.Caller !== undefined && typeof self.Caller.TutorialBodyWrapper === "object") {
            return self.Caller.TutorialBodyWrapper;
        }

        return $("#tutorialWrapper");
    },

    _checkLatestTutorialAppointment: function (appointmentId) {
        var self = this;
        var checkUrl = self.Grid.data("get-latest-teacher-url");

        checkUrl += "?editedAppointmentId=" + appointmentId;

        var onSuccessResponse = function (response) {
            if (response.Value.IsAvailable) {

                showYesNoConfirmationDialog(
                    response.Value.ConfirmationMessage,
                    self._showSchedulerDialog.bind(self, appointmentId, response.Value.TeacherId),
                    self._showSchedulerDialog.bind(self, appointmentId));

            } else {
                self._showSchedulerDialog(appointmentId);
            }
        };

        getDataWithLoaderAsync(checkUrl).done(onSuccessResponse);
    },

    _showSchedulerDialog: function (appointmentId, choicedTeacherId) {
        var self = this;

        $("#errorPane").remove();
        var maintenanceDiv = self._getMaintenanceDiv();
        var url = self.Grid.data("edit-url");
        url += '?id=' + appointmentId;

        if (choicedTeacherId !== null && choicedTeacherId !== undefined) {
            url = self.Grid.data("edit-with-teacher-url");
            url += '?id=' + appointmentId;
            url += '&teacherId=' + choicedTeacherId;
        }
        
        showPartialViewAsync(url, true)
            .done(function (data) {

                var afterHideProcessingDialog = function () {
                    maintenanceDiv.html(self.Grid.data("error-pane"));
                    maintenanceDiv.append(data);

                    var helper = new Helper();
                    var namespace = helper.CreateNameSpaceFromURL(url);
                    var apps = new Application(maintenanceDiv, namespace);
                    apps.RegisterWithCaller(self);
                };

                hideProcessingDialog(afterHideProcessingDialog);

            }).fail(function (data) {
            });
    }
};
var StudentHomePostTestDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#postTestBookForm", this.Element);
};

StudentHomePostTestDialog.prototype = {
    constructor: StudentHomePostTestDialog,
    Register: function() {
        var self = this;
        
        $("#postTestBookDialog").modal();
        self.LoadWeek();

    },

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            },
            "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format"))
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });

    },

    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
                'selectedDate': selectedDate.format(self.form.data("date-format")),
                'appointmentDurationKey': self.form.data("duration-key"),
                'appointmentType': self.form.data("appointment-type")

            },
            self.form.data("time-url"),
            function(data) {

                $("#headTitle", self.Element).html('');
                $("#timeList", self.Element).html('');
                $("#headTitle", self.Element).append(
                    '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                    '<h3 class="text-center">' +
                    selectedDate.format(self.form.data("day-format")) +
                    '</h3>' +
                    '<p class="text-muted text-center">' +
                    selectedDate.format(self.form.data("display-date-format")) +
                    '</p>');

                $("#timeList", self.Element).html("");
                $.each(data.TimeAvailabilities,
                    function(index, item) {
                        var time = "'" + item.AvailableTime24 + "'";
                        $("#timeList", self.Element)
                            .append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' +
                                time +
                                ' data-date=' +
                                selectedDate +
                                '>' +
                            item.AvailableTime +
                                '</button>');
                    });

                $(".timeLink", self.Element).on("click",
                    function(e) {
                        e.preventDefault();
                        self.LoadQuestion($(this).data("time"), $(this).data("date"));

                    });

                $("#backLink", self.Element).on("click",
                    function() {
                        self.Back();
                        $("#btnSubmit", self.Element).hide();
                        $("#questionView", self.Element).hide();
                    });

                $(".wrap-schedule", self.Element).animate({
                        scrollTop: 0
                    },
                    "slow");

            }, function () {
                // onError
                $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
            }, function () {
                // showProgressDialog
                $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
            }, function () {
                // hideProgressDialog
                clearInnerLoader($("#timeList", self.Element));
            });

    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#questionView", self.Element).html("");
        $("#questionView", self.Element).show();

        submitDataWithCustomLoader({
                'appointmentType': self.form.data("appointment-type")
            },
            self.form.data("question-url"),
            function (data) {

                if (data.HaveQuestion) {

                    $.each(data.Questions,
                        function(qIndex, qItem) {
                            var questionGroup = '<div class="appointment-questions" data-question-id="' +
                                qItem.AppointmentQuestionId +
                                '">';
                            var groupCloseTag = '</div>';

                            var questionContent = qItem.Question.split("[NOTE__");
                            var questionWrapper = '<p> ' + questionContent[0] + '</p>';
                            var questionNote = '';
                            if (questionContent.length > 1) {

                                questionNote = '<p>' + questionContent[1].replace("]", "") + '</p>';
                            }

                            var wrapperTagAnswer;
                            var wrapperCloseTag;
                            var questionType = qItem.QuestionType.split("_");
                            var answerType = createInputField("hidden", "answer-" + qItem.AppointmentQuestionId, questionType[0], "answer-type");

                            questionGroup += answerType;

                            if (questionType[0] === "DROPDOWN") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";

                                var selectTagOpen =
                                    '<select class="form-control" data-val="true" data-val-required="The Answer field is required." id="answer_' +
                                    qItem.AppointmentQuestionId +
                                    '" name="SelectAnswer_' +
                                    qItem.AppointmentQuestionId +
                                    '" required="required">';
                                var selectTagClose = '</select>';
                                selectTagOpen += '<option value="0" data-answer-id="0" selected>Select Answer...</option>';

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            var optionTag = "<option data-answer-id='" +
                                                aItem.Id +
                                                "' value='" +
                                                aItem.AnswerText +
                                                "'>" +
                                                aItem.AnswerText +
                                                "</option>";
                                            selectTagOpen += optionTag;
                                        }
                                    });

                                wrapperTagAnswer += selectTagOpen + selectTagClose + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "TEXTBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";
                                var textBoxInput;

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            textBoxInput = '<textarea rows="5" data-answer-id="' +
                                                aItem.Id +
                                                '" required="required" class="form-control" id="answer_' +
                                                qItem.AppointmentQuestionId +
                                                '" name="TextboxAnswer_' +
                                                qItem.AppointmentQuestionId +
                                                '"></textarea>';
                                        }
                                    });

                                wrapperTagAnswer += textBoxInput + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "CHECKBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";
                                var checkboxFields = "";

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            checkboxFields += '<div class="col-xs-12">' +
                                                '<div class="checkbox" >' +
                                                '<label>' +
                                                '<input class="answer-checkbox" name="checkBoxAnwer[' + aIndex + ']" type="checkbox" value="' + aItem.Id + '">' +
                                                '<span>' + aItem.AnswerText + '</span>' +
                                                '</label>' +
                                                '</div>' +
                                                '</div>';
                                        }
                                    });

                                wrapperTagAnswer += checkboxFields + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/>" + questionNote + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                                $(".answer-checkbox").change(function () {

                                    var totalChecked = $('.answer-checkbox:checked').length;
                                    if (totalChecked > questionType[1]) {
                                        showInfoDialog("Please select maximum " + questionType[1] + " option(s)", function () {
                                            backdropModalControl();
                                        });

                                        $(this).prop("checked", false);
                                    }

                                });

                            }
                        });

                    $("#btnSubmit", self.Element).show();

                } else {
                    $("#btnSubmit", self.Element).hide();
                    $("#questionView", self.Element).hide();
                    $("#TimeView", self.Element).removeClass("hidden");

                     self.MakeAppointment(time, selectDate);
                }
                
            }, function () {
                // onError
                $("#questionView", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
            }, function () {
                // showProgressDialog
                $("#questionView", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
            }, function () {
                // hideProgressDialog
                clearInnerLoader($("#questionView", self.Element));
            });

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    },

    PopulateForm: function (time, selectDate) {
        var self = this;

        $("#errorPane").hide();
        self.form.html("");
        self.form.append('<input type="hidden" name="startHour" value="' + time + '" />');
        self.form.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    self.form.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    self.form.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    self.form.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');

                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    self.form.append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                self.form.append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');

            });

        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#errorPane").hide();
        $('#postTestBookDialog').modal('hide');

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("create-url"), function () {
                showInformation(self.form.data("success-message"));
                self.ReloadMyCoursePanel();
                self.ReloadCalendar();

                $("#postTestWrapper").html("");

            },function() {
                    $('#postTestBookDialog').modal('show');
            });

        }, function () {
                $('#postTestBookDialog').modal('show');
        }, function () {
                $('#postTestBookDialog').modal('show');
        });

    },

    ReloadMyCoursePanel: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.GetMyCoursePanel();
    },

    ReloadCalendar: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.ReloadHomeTab();
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    }
};
var StudentHomePreTestDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#preTestBookForm", this.Element);
};

StudentHomePreTestDialog.prototype = {
    constructor: StudentHomePreTestDialog,
    Register: function () {
        var self = this;

        $("#preTestBookDialog").modal();
        self.LoadWeek();

    },

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0 }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format"))
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });

    },

    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type")

        }, self.form.data("time-url"), function (data) {

            $("#headTitle", self.Element).html('');
            $("#timeList", self.Element).html('');
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + '</h3>' +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + '</p>');

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + ' data-date=' + selectedDate + '>' + item.AvailableTime + '</button>');
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back(self.form);
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#questionView", self.Element).html("");
        $("#questionView", self.Element).show();

        submitDataWithCustomLoader({
            'appointmentType': self.form.data("appointment-type")
        },
            self.form.data("question-url"),
            function (data) {

                if (data.HaveQuestion) {

                    $.each(data.Questions,
                        function (qIndex, qItem) {
                            var questionGroup = '<div class="appointment-questions" data-question-id="' + qItem.AppointmentQuestionId + '">';
                            var groupCloseTag = '</div>';

                            var questionContent = qItem.Question.split("[NOTE__");
                            var questionWrapper = '<p> ' + questionContent[0] + '</p>';
                            var questionNote = '';
                            if (questionContent.length > 1) {

                                questionNote = '<p>' + questionContent[1].replace("]", "") + '</p>';
                            }

                            var wrapperTagAnswer;
                            var wrapperCloseTag;
                            var questionType = qItem.QuestionType.split("_");
                            var answerType = createInputField("hidden", "answer-" + qItem.AppointmentQuestionId, questionType[0], "answer-type");

                            questionGroup += answerType;

                            if (questionType[0] === "DROPDOWN") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";

                                var selectTagOpen =
                                    '<select class="form-control" data-val="true" data-val-required="The Answer field is required." id="answer_' + qItem.AppointmentQuestionId + '" name="SelectAnswer_' +
                                        qItem.AppointmentQuestionId +
                                        '" required="required">';
                                var selectTagClose = '</select>';
                                selectTagOpen += '<option value="0" data-answer-id="0" selected>Select Answer...</option>';

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            var optionTag = "<option data-answer-id='" + aItem.Id + "' value='" + aItem.AnswerText + "'>" + aItem.AnswerText + "</option>";
                                            selectTagOpen += optionTag;
                                        }
                                    });

                                wrapperTagAnswer += selectTagOpen + selectTagClose + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "TEXTBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-10">';
                                wrapperCloseTag = "</div></div>";
                                var textBoxInput;

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            textBoxInput = '<textarea rows="5" data-answer-id="' + aItem.Id + '" required="required" class="form-control" id="answer_' + qItem.AppointmentQuestionId + '" name="TextboxAnswer_' + qItem.AppointmentQuestionId + '"></textarea>';
                                        }
                                    });

                                wrapperTagAnswer += textBoxInput + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "CHECKBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";
                                var checkboxFields = "";

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            checkboxFields += '<div class="col-xs-12">' +
                                                '<div class="checkbox" >' +
                                                '<label>' +
                                                '<input class="answer-checkbox" name="checkBoxAnwer[' + aIndex + ']" type="checkbox" value="' + aItem.Id + '">' +
                                                '<span>' + aItem.AnswerText + '</span>' +
                                                '</label>' +
                                                '</div>' +
                                                '</div>';
                                        }
                                    });

                                wrapperTagAnswer += checkboxFields + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/>" + questionNote + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                                $(".answer-checkbox").change(function () {

                                    var totalChecked = $('.answer-checkbox:checked').length;
                                    if (totalChecked > questionType[1]) {
                                        showInfoDialog("Please select maximum " + questionType[1] + " option(s)", function () {
                                            backdropModalControl();
                                        });

                                        $(this).prop("checked", false);
                                    }

                                });

                            }

                        });

                    $("#btnSubmit", self.Element).show();

                } else {
                    $("#btnSubmit", self.Element).hide();
                    $("#questionView", self.Element).hide();
                    $("#TimeView", self.Element).removeClass("hidden");

                    self.MakeAppointment(time, selectDate);
                }
                

            }, function () {
                // onError
                $("#questionView", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
            }, function () {
                // showProgressDialog
                $("#questionView", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
            }, function () {
                // hideProgressDialog
                clearInnerLoader($("#questionView", self.Element));
            });

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    },

    PopulateForm: function (time, selectDate) {
        var self = this;

        $("#errorPane").hide();
        self.form.html("");
        self.form.append('<input type="hidden" name="startHour" value="' + time + '" />');
        self.form.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    self.form.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    self.form.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    self.form.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');

                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    self.form.append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                self.form.append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');

            });

        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#errorPane").hide();
        $('#preTestBookDialog').modal('hide');

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("create-url"), function () {

                showInformation(self.form.data("success-message"));
                self.ReloadMyCoursePanel();
                self.ReloadCalendar();

                $("#preTestWrapper").html("");

            }, function () {
                $('#preTestBookDialog').modal('show');
            });

        }, function () {
            $('#preTestBookDialog').modal('show');
        }, function () {
            $('#preTestBookDialog').modal('show');
        });

    },

    ReloadMyCoursePanel: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.GetMyCoursePanel();
    },

    ReloadCalendar: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.ReloadHomeTab();
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    }
};
var StudentHomeSpeakingFeedbackDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#speakingFeedbackBookForm", this.Element);
    this.ModalDialog = this.Element.closest(".modal");
    this.IsReschedule = $("#IsReschedule").val();
    this.AppointmentId = $("#AppointmentId").val();
}

StudentHomeSpeakingFeedbackDialog.prototype = {
    constructor: StudentHomeSpeakingFeedbackDialog,
    Register: function () {
        var self = this;

        self.LoadWeek();
        self.ModalDialog.modal();

        $("#btnCancel", self.Element)
            .off("click")
            .on("click", function () {
                self._reloadParentModal();
            });

        $(".close", self.Element)
            .off("click")
            .on("click", function () {
                self._reloadParentModal();
            });

    },

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format"))
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });

    },

    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type")

        }, self.form.data("time-url"), function (data) {

            $("#headTitle", self.Element).html('');
            $("#timeList", self.Element).html('');
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + '</h3>' +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + '</p>');

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + ' data-date=' + selectedDate + '>' + item.AvailableTime + '</button>');
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back();
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        self.MakeAppointment(time, selectDate);

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    },

    PopulateForm: function (time, selectDate) {
        var self = this;

        $("#errorPane").hide();
        self.form.html("");
        self.form.append('<input type="hidden" name="startHour" value="' + time + '" />');
        self.form.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');
        self.form.append('<input type="hidden" name="isReschedule" value="' + self.IsReschedule + '" />');
        self.form.append('<input type="hidden" name="appointmentId" value="' + self.AppointmentId + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    self.form.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    self.form.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    self.form.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');

                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    self.form.append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                self.form.append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');

            });

        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#errorPane").hide();
        self.ModalDialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("create-url"), function (data) {

                showInfoDialog(data.InformationMessage, function () {
                    self._reloadParentModal(data);
                });

                self.ReloadMyCoursePanel();
                self.ReloadCalendar();

            }, self.ModalDialog.modal.bind(self.ModalDialog, "show"));

        }, function () {
            self.ModalDialog.modal("show");
        }, function () {
            self.ModalDialog.modal("show");
        });

    },

    ReloadMyCoursePanel: function () {
        if ($("#myCoursePanel").length === 0) {
            return;
        }
        var studentHome = new StudentHomeIndex();
        studentHome.GetMyCoursePanel();
    },

    ReloadCalendar: function () {
        if ($("#calendarPanel").length === 0) {
            return;
        }
        var studentHome = new StudentHomeIndex();
        studentHome.ReloadHomeTab();
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    _reloadParentModal: function (appointmentResponse) {
        var self = this;

        if (self.Caller !== null && self.Caller !== undefined && typeof self.Caller.ReloadModal === "function") {
            if (appointmentResponse !== undefined && appointmentResponse !== null) {
                $("#TotalSpeakingFeedback", self.Caller.Element).val(appointmentResponse.TotalAppointment);
                $("#NumberOfSpeakingFeedback", self.Caller.Element).val(appointmentResponse.NumberOfSpeakingFeedback);
            }
            self.Caller.ReloadModal();
        }
    }
};
var StudentHomeSpeakingFeedbackEditDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#speakingFeedbackEditBookForm", this.Element);
    this.ModalDialog = this.Element.closest(".modal");
};

StudentHomeSpeakingFeedbackEditDialog.prototype = {
    constructor: StudentHomeSpeakingFeedbackEditDialog,
    Register: function () {
        var self = this;

        self.LoadWeek();
        self.ModalDialog.modal();

        $("#btnCancel", self.Element)
            .off("click")
            .on("click", function () {
                self._reloadParentModal();
            });

        $(".close", self.Element)
            .off("click")
            .on("click", function () {
                self._reloadParentModal();
            });
    } ,

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + "</h2>");
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0 }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + "</h2>");

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format"))
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });

    },

    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type")

        }, self.form.data("time-url"), function (data) {

            $("#headTitle", self.Element).html("");
            $("#timeList", self.Element).html("");
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + "</h3>" +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + "</p>");

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + " data-date=" + selectedDate + ">" + item.AvailableTime + "</button>");
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back();
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        self.MakeAppointment(time, selectDate);

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    },

    PopulateForm: function (time, selectDate) {
        var self = this;
        var generatedForm = self.form.find("#generatedForm");

        $("#errorPane").hide();
        generatedForm.html("");
        generatedForm.append('<input type="hidden" name="startHour" value="' + time + '" />');
        generatedForm.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    generatedForm.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');

                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    generatedForm.append('<input type="hidden" name="checkboxAnswer_' + index + "_" + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = "answerType_" + index + "_" + questionId + "";
                $("input[name=" + name + "]").remove();
                generatedForm.append('<input type="hidden" name="answerType_' + index + "_" + questionId + '" value="' + $(this).val() + '" />');

            });

        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
		var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);
		var successMessage = self.form.data("information-message");

        $("#SelectedDate", self.Element).val(selectDate);
        $("#StartHour", self.Element).val(time);
        $("#errorPane").hide();
        self.ModalDialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("edit-url"), function (data) {

                showInfoDialog(data.Value.InformationMessage, function () {
                    self._reloadParentModal();
                });

                self.ReloadMyCoursePanel();
                self.ReloadCalendar();

            }, self.ModalDialog.modal.bind(self.ModalDialog, "show"));

            return false;
        }, function () {
                self.ModalDialog.modal("show");
        }, function () {
                self.ModalDialog.modal("show");
        });

    },

    ReloadMyCoursePanel: function () {
        if ($("#myCoursePanel").length === 0) {
            return;
        }

        var studentHome = new StudentHomeIndex();
        studentHome.GetMyCoursePanel();
    },
    ReloadCalendar: function () {
        if ($("#calendarPanel").length === 0) {
            return;
        }

        var studentHome = new StudentHomeIndex();
        studentHome.ReloadHomeTab();
    },
    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    _reloadParentModal: function () {
        var self = this;

        if (self.Caller !== null && self.Caller !== undefined && typeof self.Caller.ReloadModal === "function") {
            self.Caller.ReloadModal();
        }
    }
};
var StudentHomeStudentOnline = function (element) {
    this.Element = element;
    this.Caller = null;
    this.StudentOnlineGrid = $("#gridStudentOnline");
}

StudentHomeStudentOnline.prototype = {
    constructor: StudentHomeStudentOnline,
    Register: function () {
        var rowCount = [10];

        if (this.StudentOnlineGrid.find("tbody").length > 0) {
            this.ReloadGrid();
        }
        
        this.StudentOnlineGrid
            .bootgrid({
                selection: true,
                navigation:2,
                templates: {
                    search: ''
                },
                sortable: false,
                rowCount: rowCount,
                rowSelect: true,
                ajax: true,
                post: function () { },
                url: this.StudentOnlineGrid.data("url"),
                formatters: {
                    "UserName": function (column, row) {
                        return row.UserName + ' ' + '<a href="#" class="country-flag img-custom img-thumbnail flag flag-icon-background flag-icon-' + row.CountryCode + '" data-toggle="tooltip" title="' +
                            row.CountryName + '"></a>';
                    }
                }
            }).on("loaded.rs.jquery.bootgrid", function() {
                $('[data-toggle="tooltip"]').tooltip();
                $('.pagination li[class^="page"]').remove();
                $('.pagination li[class^="first"]').remove();
                $('.pagination li[class^="last"]').remove();
                $('.pagination li.next a').text('next');
                $('.pagination li.prev a').text('prev');
            });

       
    },
    ReloadGrid: function () {
        this.StudentOnlineGrid.bootgrid("reload");
    },
    SetupCaller: function (caller) {
        this.Caller = caller;
    }
};
var StudentHomeStudyPlanDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#studyPlanForm", this.Element);
}

StudentHomeStudyPlanDialog.prototype = {
    constructor: StudentHomeStudyPlanDialog,
    Register: function () {
        var self = this;

        $("#studyPlanBookDialog").modal();
        self.LoadWeek();

    },

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format"))
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.form, function(data) {
            self.DetailTime(data);
        });

    },

    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type")

        }, self.form.data("time-url"), function (data) {

            $("#headTitle", self.Element).html('');
            $("#timeList", self.Element).html('');
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + '</h3>' +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + '</p>');

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + ' data-date=' + selectedDate + '>' + item.AvailableTime + '</button>');
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back(self.form);
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#questionView", self.Element).html("");
        $("#questionView", self.Element).show();

        submitDataWithCustomLoader({
            'appointmentType': self.form.data("appointment-type")
        },
            self.form.data("question-url"),
            function (data) {

                if (data.HaveQuestion) {

                    $.each(data.Questions,
                        function (qIndex, qItem) {
                            var questionGroup = '<div class="appointment-questions" data-question-id="' + qItem.AppointmentQuestionId + '">';
                            var groupCloseTag = '</div>';

                            var questionContent = qItem.Question.split("[NOTE__");
                            var questionWrapper = '<p> ' + questionContent[0] + '</p>';
                            var questionNote = '';
                            if (questionContent.length > 1) {

                                questionNote = '<p>' + questionContent[1].replace("]", "") + '</p>';
                            }

                            var wrapperTagAnswer;
                            var wrapperCloseTag;
                            var questionType = qItem.QuestionType.split("_");
                            var answerType = createInputField("hidden", "answer-" + qItem.AppointmentQuestionId, questionType[0], "answer-type");

                            questionGroup += answerType;

                            if (questionType[0] === "DROPDOWN") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";

                                var selectTagOpen =
                                    '<select class="form-control" data-val="true" data-val-required="The Answer field is required." id="answer_' + qItem.AppointmentQuestionId + '" name="SelectAnswer_' +
                                        qItem.AppointmentQuestionId +
                                        '" required="required">';
                                var selectTagClose = '</select>';
                                selectTagOpen += '<option value="0" data-answer-id="0" selected>Select Answer...</option>';

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            var optionTag = "<option data-answer-id='" + aItem.Id + "' value='" + aItem.AnswerText + "'>" + aItem.AnswerText + "</option>";
                                            selectTagOpen += optionTag;
                                        }
                                    });

                                wrapperTagAnswer += selectTagOpen + selectTagClose + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "TEXTBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-10">';
                                wrapperCloseTag = "</div></div>";
                                var textBoxInput;

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            textBoxInput = '<textarea rows="5" data-answer-id="' + aItem.Id + '" required="required" class="form-control" id="answer_' + qItem.AppointmentQuestionId + '" name="TextboxAnswer_' + qItem.AppointmentQuestionId + '"></textarea>';
                                        }
                                    });

                                wrapperTagAnswer += textBoxInput + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "CHECKBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";
                                var checkboxFields = "";

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            checkboxFields += '<div class="col-xs-12">' +
                                                '<div class="checkbox" >' +
                                                '<label>' +
                                                '<input class="answer-checkbox" name="checkBoxAnwer[' + aIndex + ']" type="checkbox" value="' + aItem.Id + '">' +
                                                '<span>' + aItem.AnswerText + '</span>' +
                                                '</label>' +
                                                '</div>' +
                                                '</div>';
                                        }
                                    });

                                wrapperTagAnswer += checkboxFields + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/>" + questionNote + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                                $(".answer-checkbox").change(function () {

                                    var totalChecked = $('.answer-checkbox:checked').length;
                                    if (totalChecked > questionType[1]) {
                                        showInfoDialog("Please select maximum " + questionType[1] + " option(s)", function () {
                                            backdropModalControl();
                                        });

                                        $(this).prop("checked", false);
                                    }

                                });

                            }

                        });

                    $("#btnSubmit", self.Element).show();

                } else {
                    $("#btnSubmit", self.Element).hide();
                    $("#questionView", self.Element).hide();
                    $("#TimeView", self.Element).removeClass("hidden");
                    self.MakeAppointment(time, selectDate);
                }

            }, function () {
                // onError
                $("#questionView", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
            }, function () {
                // showProgressDialog
                $("#questionView", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
            }, function () {
                // hideProgressDialog
                clearInnerLoader($("#questionView", self.Element));
            });

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    },

    PopulateForm: function (time, selectDate) {
        var self = this;

        $("#errorPane").hide();
        self.form.html("");
        self.form.append('<input type="hidden" name="startHour" value="' + time + '" />');
        self.form.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    self.form.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    self.form.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    self.form.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');

                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    self.form.append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                self.form.append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');

            });

        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
		var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);
		var successMessage = self.form.data("information-message");

        $("#errorPane").hide();
        $('#studyPlanBookDialog').modal('hide');

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("create-url"), function () {

                showInfoDialog(successMessage);
                self.ReloadMyCoursePanel();
                self.ReloadCalendar();
                $("#studyPlanWrapper").html("");

            }, function () {
                $('#studyPlanBookDialog').modal('show');
            });

        }, function () {
            $('#studyPlanBookDialog').modal('show');
        }, function () {
            $('#studyPlanBookDialog').modal('show');
        });
        
    },

    ReloadMyCoursePanel: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.GetMyCoursePanel();
    },
    ReloadCalendar: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.ReloadHomeTab();
    },
    SetupCaller: function (caller) {
        this.Caller = caller;
    }
};
var StudentHomeTutorialDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#tutorialBookForm", this.Element);
    this.ModalDialog = this.Element.closest(".modal");
}

StudentHomeTutorialDialog.prototype = {
    constructor: StudentHomeTutorialDialog,
    Register: function () {
        var self = this;

        self.LoadWeek();
        self.ModalDialog.modal();

        $("#btnCancel", self.Element)
            .off("click")
            .on("click", function () {
                self._reloadParentModal();
            });

        $(".close", self.Element)
            .off("click")
            .on("click", function () {
                self._reloadParentModal();
            });

    },

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0 }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format"))
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });

    },

    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type")

        }, self.form.data("time-url"), function (data) {

            $("#headTitle", self.Element).html('');
            $("#timeList", self.Element).html('');
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + '</h3>' +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + '</p>');

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + ' data-date=' + selectedDate + '>' + item.AvailableTime + '</button>');
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back();
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            // onError
                $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
                $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
                clearInnerLoader($("#timeList", self.Element));
        });

    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#questionView", self.Element).html("");
        $("#questionView", self.Element).show();

        submitDataWithCustomLoader({
            'appointmentType': self.form.data("appointment-type")
        },
            self.form.data("question-url"),
            function (data) {

                if (data.HaveQuestion) {

                    $.each(data.Questions,
                        function (qIndex, qItem) {
                            var questionGroup = '<div class="appointment-questions" data-question-id="' + qItem.AppointmentQuestionId + '">';
                            var groupCloseTag = '</div>';

                            var questionContent = qItem.Question.split("[NOTE__");
                            var questionWrapper = '<p> ' + questionContent[0] + '</p>';
                            var questionNote = '';
                            if (questionContent.length > 1) {

                                questionNote = '<p>' + questionContent[1].replace("]", "") + '</p>';
                            }

                            var wrapperTagAnswer;
                            var wrapperCloseTag;
                            var questionType = qItem.QuestionType.split("_");
                            var answerType = createInputField("hidden", "answer-" + qItem.AppointmentQuestionId, questionType[0], "answer-type");

                            questionGroup += answerType;

                            if (questionType[0] === "DROPDOWN") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";

                                var selectTagOpen =
                                    '<select class="form-control" data-val="true" data-val-required="The Answer field is required." id="answer_' + qItem.AppointmentQuestionId + '" name="SelectAnswer_' +
                                        qItem.AppointmentQuestionId +
                                        '" required="required">';
                                var selectTagClose = '</select>';
                                selectTagOpen += '<option value="0" data-answer-id="0" selected>Select Answer...</option>';

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            var optionTag = "<option data-answer-id='" + aItem.Id + "' value='" + aItem.AnswerText + "'>" + aItem.AnswerText + "</option>";
                                            selectTagOpen += optionTag;
                                        }
                                    });

                                wrapperTagAnswer += selectTagOpen + selectTagClose + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);
                                

                            } else if (questionType[0] === "TEXTBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-10">';
                                wrapperCloseTag = "</div></div>";
                                var textBoxInput;

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            textBoxInput = '<textarea rows="5" data-answer-id="' + aItem.Id + '" required="required" class="form-control" id="answer_' + qItem.AppointmentQuestionId + '" name="TextboxAnswer_' + qItem.AppointmentQuestionId + '"></textarea>';
                                        }
                                    });

                                wrapperTagAnswer += textBoxInput + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "CHECKBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";
                                var checkboxFields = "";

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            checkboxFields += '<div class="col-xs-12">' +
                                                '<div class="checkbox" >' +
                                                '<label>' +
                                                '<input class="answer-checkbox" name="checkBoxAnwer[' + aIndex + ']" type="checkbox" value="' + aItem.Id + '">' +
                                                '<span>' + aItem.AnswerText + '</span>' +
                                                '</label>' +
                                                '</div>' +
                                                '</div>';
                                        }
                                    });

                                wrapperTagAnswer += checkboxFields + wrapperCloseTag;
                                questionGroup += questionNote + "<br/>" + questionWrapper + wrapperTagAnswer;

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                                $(".answer-checkbox").change(function() {
                                   
                                    var totalChecked = $('.answer-checkbox:checked').length;
                                    if (totalChecked > questionType[1]) {
                                        showInfoDialog("Please select maximum " + questionType[1] + " option(s)", function() {
                                            backdropModalControl();
                                        });

                                        $(this).prop("checked", false);
                                    }

                                });
                            }
                        });

                    
                    $("#btnSubmit", self.Element).show();

                } else {
                    $("#btnSubmit", self.Element).hide();
                    $("#questionView", self.Element).hide();
                    $("#TimeView", self.Element).removeClass("hidden");
                    self.MakeAppointment(time, selectDate);
                }

            }, function () {
                // onError
                $("#questionView", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
            }, function () {
                // showProgressDialog
                $("#questionView", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
            }, function () {
                // hideProgressDialog
                clearInnerLoader($("#questionView", self.Element));
            });

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    },

    PopulateForm: function (time, selectDate) {
        var self = this;

        $("#errorPane").hide();
        self.form.find('#generatedForm').html("");
        self.form.find('#generatedForm').append('<input type="hidden" name="startHour" value="' + time + '" />');
        self.form.find('#generatedForm').append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    self.form.find('#generatedForm').append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    self.form.find('#generatedForm').append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0")
                {
                    var selectId = $(this).attr("id");
                    self.form.find('#generatedForm').append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');

                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    self.form.find('#generatedForm').append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                self.form.find('#generatedForm').append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');

            });

        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
		var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#errorPane").hide();
        self.ModalDialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("create-url"), function (data) {

                showInfoDialog(data.InformationMessage, function () {
                    self._reloadParentModal(data);
                });

                self.ReloadMyCoursePanel();
                self.ReloadCalendar();

            }, self.ModalDialog.modal.bind(self.ModalDialog, "show"));

        }, function () {
            self.ModalDialog.modal("show");
        }, function () {
            self.ModalDialog.modal("show");
        });

    },

    ReloadMyCoursePanel: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.GetMyCoursePanel();
    },
    ReloadCalendar: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.ReloadHomeTab();
    },
    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    _reloadParentModal: function (appointmentResponse) {
        var self = this;

        if (self.Caller !== null && self.Caller !== undefined && typeof self.Caller.ReloadModal === "function") {
            if (appointmentResponse !== undefined && appointmentResponse !== null) {
                $("#TotalAppointment", self.Caller.Element).val(appointmentResponse.TotalAppointment);
                $("#NumberOfTutorial", self.Caller.Element).val(appointmentResponse.NumberOfTutorial);
            }
            self.Caller.ReloadModal();
        }
    }
};
var StudentHomeTutorialEditDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#tutorialEditBookForm", this.Element);
    this.ModalDialog = this.Element.closest(".modal");
};

StudentHomeTutorialEditDialog.prototype = {
    constructor: StudentHomeTutorialEditDialog,
    Register: function () {
        var self = this;

        self.LoadWeek();
        self.ModalDialog.modal();

        $("#btnCancel", self.Element)
            .off("click")
            .on("click", function () {
                self._reloadParentModal();
            });

        $(".close", self.Element)
            .off("click")
            .on("click", function () {
                self._reloadParentModal();
            });
    } ,

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + "</h2>");
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0 }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + "</h2>");

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format"))
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });

    },

    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type")

        }, self.form.data("time-url"), function (data) {

            $("#headTitle", self.Element).html("");
            $("#timeList", self.Element).html("");
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + "</h3>" +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + "</p>");

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + " data-date=" + selectedDate + ">" + item.AvailableTime + "</button>");
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back();
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#questionView", self.Element).html("");
        $("#questionView", self.Element).show();

        submitDataWithCustomLoader({
            'appointmentType': self.form.data("appointment-type")
        },
            self.form.data("question-url"),
            function (data) {

                if (data.HaveQuestion) {

                    $.each(data.Questions,
                        function (qIndex, qItem) {
                            var questionGroup = '<div class="appointment-questions" data-question-id="' + qItem.AppointmentQuestionId + '">';
                            var groupCloseTag = "</div>";

                            var questionContent = qItem.Question.split("[NOTE__");
                            var questionWrapper = "<p> " + questionContent[0] + "</p>";
                            var questionNote = "";
                            if (questionContent.length > 1) {

                                questionNote = "<p>" + questionContent[1].replace("]", "") + "</p>";
                            }

                            var wrapperTagAnswer;
                            var wrapperCloseTag;
                            var questionType = qItem.QuestionType.split("_");
                            var answerType = createInputField("hidden", "answer-" + qItem.AppointmentQuestionId, questionType[0], "answer-type");

                            questionGroup += answerType;

                            if (questionType[0] === "DROPDOWN") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";

                                var selectTagOpen =
                                    '<select class="form-control" data-val="true" data-val-required="The Answer field is required." id="answer_' + qItem.AppointmentQuestionId + '" name="SelectAnswer_' +
                                        qItem.AppointmentQuestionId +
                                        '" required="required">';
                                var selectTagClose = "</select>";
                                selectTagOpen += '<option value="0" data-answer-id="0" selected>Select Answer...</option>';

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            var optionTag = "<option data-answer-id='" + aItem.Id + "' value='" + aItem.AnswerText + "'>" + aItem.AnswerText + "</option>";
                                            selectTagOpen += optionTag;
                                        }
                                    });

                                wrapperTagAnswer += selectTagOpen + selectTagClose + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "TEXTBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-10">';
                                wrapperCloseTag = "</div></div>";
                                var textBoxInput;

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            textBoxInput = '<textarea rows="5" data-answer-id="' + aItem.Id + '" required="required" class="form-control" id="answer_' + qItem.AppointmentQuestionId + '" name="TextboxAnswer_' + qItem.AppointmentQuestionId + '"></textarea>';
                                        }
                                    });

                                wrapperTagAnswer += textBoxInput + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "CHECKBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";
                                var checkboxFields = "";

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            checkboxFields += '<div class="col-xs-12">' +
                                                '<div class="checkbox" >' +
                                                "<label>" +
                                                '<input class="answer-checkbox" name="checkBoxAnwer[' + aIndex + ']" type="checkbox" value="' + aItem.Id + '">' +
                                                "<span>" + aItem.AnswerText + "</span>" +
                                                "</label>" +
                                                "</div>" +
                                                "</div>";
                                        }
                                    });

                                wrapperTagAnswer += checkboxFields + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/>" + questionNote + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                                $(".answer-checkbox").change(function () {

                                    var totalChecked = $(".answer-checkbox:checked").length;
                                    if (totalChecked > questionType[1]) {
                                        showInfoDialog("Please select maximum " + questionType[1] + " option(s)", function () {
                                            backdropModalControl();
                                        });

                                        $(this).prop("checked", false);
                                    }

                                });

                            }
                        });

                    $("#btnSubmit", self.Element).show();

                } else {
                    self.MakeAppointment(time, selectDate);
                }

            }, function () {
                // onError
                $("#questionView", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
            }, function () {
                // showProgressDialog
                $("#questionView", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
            }, function () {
                // hideProgressDialog
                clearInnerLoader($("#questionView", self.Element));
            });

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    },

    PopulateForm: function (time, selectDate) {
        var self = this;
        var generatedForm = self.form.find("#generatedForm");

        $("#errorPane").hide();
        generatedForm.html("");
        generatedForm.append('<input type="hidden" name="startHour" value="' + time + '" />');
        generatedForm.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    generatedForm.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');

                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    generatedForm.append('<input type="hidden" name="checkboxAnswer_' + index + "_" + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = "answerType_" + index + "_" + questionId + "";
                $("input[name=" + name + "]").remove();
                generatedForm.append('<input type="hidden" name="answerType_' + index + "_" + questionId + '" value="' + $(this).val() + '" />');

            });

        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
		var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);
		var successMessage = self.form.data("information-message");

        $("#SelectedDate", self.Element).val(selectDate);
        $("#StartHour", self.Element).val(time);
        $("#errorPane").hide();
        self.ModalDialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("edit-url"), function (data) {

                showInfoDialog(successMessage, function () {
                    self._reloadParentModal();
                });

                self.ReloadMyCoursePanel();
                self.ReloadCalendar();

            }, self.ModalDialog.modal.bind(self.ModalDialog, "show"));

            return false;
        }, function () {
            self.ModalDialog.modal("show");
        }, function () {
            self.ModalDialog.modal("show");
        });

    },

    ReloadMyCoursePanel: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.GetMyCoursePanel();
    },
    ReloadCalendar: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.ReloadHomeTab();
    },
    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    _reloadParentModal: function () {
        var self = this;

        if (self.Caller !== null && self.Caller !== undefined && typeof self.Caller.ReloadModal === "function") {
            self.Caller.ReloadModal();
        }
    }
};
var StudentHomeTutorialEditWithTeacherDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#tutorialEditBookForm", this.Element);
    this.ModalDialog = this.Element.closest(".modal");
};

StudentHomeTutorialEditWithTeacherDialog.prototype = {
    constructor: StudentHomeTutorialEditWithTeacherDialog,
    Register: function () {
        var self = this;

        self.LoadWeek();
        self.ModalDialog.modal();

        $("#btnCancel", self.Element)
            .off("click")
            .on("click", function () {
                self._reloadParentModal();
            });

        $(".close", self.Element)
            .off("click")
            .on("click", function () {
                self._reloadParentModal();
            });
    } ,

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + "</h2>");
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0 }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + "</h2>");

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format")),
            'teacherId': $("#TeacherId", self.Element).val()
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });

    },

    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'teacherId': $("#TeacherId", self.Element).val()
        }, self.form.data("time-url"), function (data) {

            $("#headTitle", self.Element).html("");
            $("#timeList", self.Element).html("");
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + "</h3>" +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + "</p>");

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + " data-date=" + selectedDate + ">" + item.AvailableTime + "</button>");
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back();
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#questionView", self.Element).html("");
        $("#questionView", self.Element).show();

        submitDataWithCustomLoader({
            'appointmentType': self.form.data("appointment-type")
        },
            self.form.data("question-url"),
            function (data) {

                if (data.HaveQuestion) {

                    $.each(data.Questions,
                        function (qIndex, qItem) {
                            var questionGroup = '<div class="appointment-questions" data-question-id="' + qItem.AppointmentQuestionId + '">';
                            var groupCloseTag = "</div>";

                            var questionContent = qItem.Question.split("[NOTE__");
                            var questionWrapper = "<p> " + questionContent[0] + "</p>";
                            var questionNote = "";
                            if (questionContent.length > 1) {

                                questionNote = "<p>" + questionContent[1].replace("]", "") + "</p>";
                            }

                            var wrapperTagAnswer;
                            var wrapperCloseTag;
                            var questionType = qItem.QuestionType.split("_");
                            var answerType = createInputField("hidden", "answer-" + qItem.AppointmentQuestionId, questionType[0], "answer-type");

                            questionGroup += answerType;

                            if (questionType[0] === "DROPDOWN") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";

                                var selectTagOpen =
                                    '<select class="form-control" data-val="true" data-val-required="The Answer field is required." id="answer_' + qItem.AppointmentQuestionId + '" name="SelectAnswer_' +
                                        qItem.AppointmentQuestionId +
                                        '" required="required">';
                                var selectTagClose = "</select>";
                                selectTagOpen += '<option value="0" data-answer-id="0" selected>Select Answer...</option>';

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            var optionTag = "<option data-answer-id='" + aItem.Id + "' value='" + aItem.AnswerText + "'>" + aItem.AnswerText + "</option>";
                                            selectTagOpen += optionTag;
                                        }
                                    });

                                wrapperTagAnswer += selectTagOpen + selectTagClose + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "TEXTBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-10">';
                                wrapperCloseTag = "</div></div>";
                                var textBoxInput;

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            textBoxInput = '<textarea rows="5" data-answer-id="' + aItem.Id + '" required="required" class="form-control" id="answer_' + qItem.AppointmentQuestionId + '" name="TextboxAnswer_' + qItem.AppointmentQuestionId + '"></textarea>';
                                        }
                                    });

                                wrapperTagAnswer += textBoxInput + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "CHECKBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";
                                var checkboxFields = "";

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            checkboxFields += '<div class="col-xs-12">' +
                                                '<div class="checkbox" >' +
                                                "<label>" +
                                                '<input class="answer-checkbox" name="checkBoxAnwer[' + aIndex + ']" type="checkbox" value="' + aItem.Id + '">' +
                                                "<span>" + aItem.AnswerText + "</span>" +
                                                "</label>" +
                                                "</div>" +
                                                "</div>";
                                        }
                                    });

                                wrapperTagAnswer += checkboxFields + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/>" + questionNote + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                                $(".answer-checkbox").change(function () {

                                    var totalChecked = $(".answer-checkbox:checked").length;
                                    if (totalChecked > questionType[1]) {
                                        showInfoDialog("Please select maximum " + questionType[1] + " option(s)", function () {
                                            backdropModalControl();
                                        });

                                        $(this).prop("checked", false);
                                    }

                                });

                            }
                        });

                    $("#btnSubmit", self.Element).show();

                } else {
                    self.MakeAppointment(time, selectDate);
                }

            }, function () {
                // onError
                $("#questionView", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
            }, function () {
                // showProgressDialog
                $("#questionView", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
            }, function () {
                // hideProgressDialog
                clearInnerLoader($("#questionView", self.Element));
            });

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    },

    PopulateForm: function (time, selectDate) {
        var self = this;
        var generatedForm = self.form.find("#generatedForm");

        $("#errorPane").hide();
        generatedForm.html("");
        generatedForm.append('<input type="hidden" name="startHour" value="' + time + '" />');
        generatedForm.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    generatedForm.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');

                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    generatedForm.append('<input type="hidden" name="checkboxAnswer_' + index + "_" + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = "answerType_" + index + "_" + questionId + "";
                $("input[name=" + name + "]").remove();
                generatedForm.append('<input type="hidden" name="answerType_' + index + "_" + questionId + '" value="' + $(this).val() + '" />');

            });

        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
		var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);
		var successMessage = self.form.data("information-message");

        $("#SelectedDate", self.Element).val(selectDate);
        $("#StartHour", self.Element).val(time);
        $("#errorPane").hide();
        self.ModalDialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("edit-url"), function (data) {

                showInfoDialog(successMessage, function () {
                    self._reloadParentModal();
                });

                self.ReloadMyCoursePanel();
                self.ReloadCalendar();
            });

            return false;
        }, function () {
            self.ModalDialog.modal("show");
        }, function () {
            self.ModalDialog.modal("show");
        });

    },

    ReloadMyCoursePanel: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.GetMyCoursePanel();
    },
    ReloadCalendar: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.ReloadHomeTab();
    },
    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    _reloadParentModal: function () {
        var self = this;

        if (self.Caller !== null && self.Caller !== undefined && typeof self.Caller.ReloadModal === "function") {
            self.Caller.ReloadModal();
        }
    }
};
var StudentHomeTutorialWithTeacherDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#tutorialBookForm", this.Element);
    this.ModalDialog = this.Element.closest(".modal");
}

StudentHomeTutorialWithTeacherDialog.prototype = {
    constructor: StudentHomeTutorialWithTeacherDialog,
    Register: function () {
        var self = this;

        self.LoadWeek();
        self.ModalDialog.modal();

        $("#btnCancel", self.Element)
            .off("click")
            .on("click", function () {
                self._reloadParentModal();
            });

        $(".close", self.Element)
            .off("click")
            .on("click", function () {
                self._reloadParentModal();
            });

    },

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format")),
            'teacherId': $("#TeacherId", self.Element).val()
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });

    },

    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'teacherId': $("#TeacherId", self.Element).val()

        }, self.form.data("time-url"), function (data) {

            $("#headTitle", self.Element).html('');
            $("#timeList", self.Element).html('');
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + '</h3>' +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + '</p>');

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + ' data-date=' + selectedDate + '>' + item.AvailableTime + '</button>');
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back();
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#questionView", self.Element).html("");
        $("#questionView", self.Element).show();

        submitDataWithCustomLoader({
            'appointmentType': self.form.data("appointment-type")
        },
            self.form.data("question-url"),
            function (data) {

                if (data.HaveQuestion) {

                    $.each(data.Questions,
                        function (qIndex, qItem) {
                            var questionGroup = '<div class="appointment-questions" data-question-id="' + qItem.AppointmentQuestionId + '">';
                            var groupCloseTag = '</div>';

                            var questionContent = qItem.Question.split("[NOTE__");
                            var questionWrapper = '<p> ' + questionContent[0] + '</p>';
                            var questionNote = '';
                            if (questionContent.length > 1) {

                                questionNote = '<p>' + questionContent[1].replace("]", "") + '</p>';
                            }

                            var wrapperTagAnswer;
                            var wrapperCloseTag;
                            var questionType = qItem.QuestionType.split("_");
                            var answerType = createInputField("hidden", "answer-" + qItem.AppointmentQuestionId, questionType[0], "answer-type");

                            questionGroup += answerType;

                            if (questionType[0] === "DROPDOWN") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";

                                var selectTagOpen =
                                    '<select class="form-control" data-val="true" data-val-required="The Answer field is required." id="answer_' + qItem.AppointmentQuestionId + '" name="SelectAnswer_' +
                                    qItem.AppointmentQuestionId +
                                    '" required="required">';
                                var selectTagClose = '</select>';
                                selectTagOpen += '<option value="0" data-answer-id="0" selected>Select Answer...</option>';

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            var optionTag = "<option data-answer-id='" + aItem.Id + "' value='" + aItem.AnswerText + "'>" + aItem.AnswerText + "</option>";
                                            selectTagOpen += optionTag;
                                        }
                                    });

                                wrapperTagAnswer += selectTagOpen + selectTagClose + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);


                            } else if (questionType[0] === "TEXTBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-10">';
                                wrapperCloseTag = "</div></div>";
                                var textBoxInput;

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            textBoxInput = '<textarea rows="5" data-answer-id="' + aItem.Id + '" required="required" class="form-control" id="answer_' + qItem.AppointmentQuestionId + '" name="TextboxAnswer_' + qItem.AppointmentQuestionId + '"></textarea>';
                                        }
                                    });

                                wrapperTagAnswer += textBoxInput + wrapperCloseTag;
                                questionGroup += questionWrapper + wrapperTagAnswer + "<br/><br/>";

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                            } else if (questionType[0] === "CHECKBOX") {
                                wrapperTagAnswer = '<div class="row"> <div class ="col-sm-6">';
                                wrapperCloseTag = "</div></div>";
                                var checkboxFields = "";

                                $.each(data.Answers,
                                    function (aIndex, aItem) {
                                        if (qItem.Question === aItem.Question) {
                                            checkboxFields += '<div class="col-xs-12">' +
                                                '<div class="checkbox" >' +
                                                '<label>' +
                                                '<input class="answer-checkbox" name="checkBoxAnwer[' + aIndex + ']" type="checkbox" value="' + aItem.Id + '">' +
                                                '<span>' + aItem.AnswerText + '</span>' +
                                                '</label>' +
                                                '</div>' +
                                                '</div>';
                                        }
                                    });

                                wrapperTagAnswer += checkboxFields + wrapperCloseTag;
                                questionGroup += questionNote + "<br/>" + questionWrapper + wrapperTagAnswer;

                                $("#questionView", self.Element).append(questionGroup + groupCloseTag);

                                $(".answer-checkbox").change(function () {

                                    var totalChecked = $('.answer-checkbox:checked').length;
                                    if (totalChecked > questionType[1]) {
                                        showInfoDialog("Please select maximum " + questionType[1] + " option(s)", function () {
                                            backdropModalControl();
                                        });

                                        $(this).prop("checked", false);
                                    }

                                });
                            }
                        });


                    $("#btnSubmit", self.Element).show();

                } else {
                    $("#btnSubmit", self.Element).hide();
                    $("#questionView", self.Element).hide();
                    $("#TimeView", self.Element).removeClass("hidden");
                    self.MakeAppointment(time, selectDate);
                }

            }, function () {
                // onError
                $("#questionView", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
            }, function () {
                // showProgressDialog
                $("#questionView", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
            }, function () {
                // hideProgressDialog
                clearInnerLoader($("#questionView", self.Element));
            });

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    },

    PopulateForm: function (time, selectDate) {
        var self = this;

        $("#errorPane").hide();
        self.form.find('#generatedForm').html("");
        self.form.find('#generatedForm').append('<input type="hidden" name="startHour" value="' + time + '" />');
        self.form.find('#generatedForm').append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    self.form.find('#generatedForm').append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    self.form.find('#generatedForm').append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    self.form.find('#generatedForm').append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');

                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    self.form.find('#generatedForm').append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                self.form.find('#generatedForm').append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');

            });

        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#errorPane").hide();
        self.ModalDialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("create-url"), function (data) {

                showInfoDialog(data.InformationMessage, function () {
                    self._reloadParentModal(data);
                });

                self.ReloadMyCoursePanel();
                self.ReloadCalendar();

            });

        }, function () {
            self.ModalDialog.modal("show");
        }, function () {
            self.ModalDialog.modal("show");
        });

    },

    ReloadMyCoursePanel: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.GetMyCoursePanel();
    },
    ReloadCalendar: function () {
        var studentHome = new StudentHomeIndex();
        studentHome.ReloadHomeTab();
    },
    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    _reloadParentModal: function (appointmentResponse) {
        var self = this;

        if (self.Caller !== null && self.Caller !== undefined && typeof self.Caller.ReloadModal === "function") {
            if (appointmentResponse !== undefined && appointmentResponse !== null) {
                $("#TotalAppointment", self.Caller.Element).val(appointmentResponse.TotalAppointment);
                $("#NumberOfTutorial", self.Caller.Element).val(appointmentResponse.NumberOfTutorial);
            }
            self.Caller.ReloadModal();
        }
    }
};
(function ($, window) {
    "use strict";

    // Private Functions

    function initPlugin() {
        var self = this;

        $(".fcd-correct-answer-tooltip").tooltipster({
            contentAsHTML: true,
            functionBefore: function (instance, helper) {

                var origin = $(helper.origin);
                var answerText = origin.data("correct-answer");
                var headerText = "<p>Correct Answer:</p>";
                var text = headerText + answerText;

                instance.content(text);
                origin.data('loaded', true);
            },
            animation: 'fade',
            delay: 200,
            theme: ['tooltipster-light', 'tooltipster-light-fcd'],
            trigger: 'hover',
            side: 'right',
            maxWidth: 480
        });

        $('.answer-report-tooltip').tooltipster({
            theme: 'tooltipster-light',
            side: 'right'
        });

    }

    function initEventHandler() {
        var self = this;

        var eventHandler = {
            btnViewAssessmentClick: function () {
                var mockTestQuestionId = $(this).data("mock-test-question-id");
                var url = $(this).data("url") + "?mockTestQuestionId=" + mockTestQuestionId;
                showPopup(url)
            }
        };
        $('.view-assessment-btn')
            .off("click")
            .on("click", eventHandler.btnViewAssessmentClick);
    }

    function getScoreChart() {
        var self = this;
        var url = self.ScoreChartPanel.data("get-url");

        self.ScoreChartPanel.html('<span class="icon fa fa-refresh fa-spin"></span> ' + self.ScoreChartPanel.data("loading-message"));

        submitDataWithoutLoader({}, url, function (data) {
            self.ScoreChartPanel.empty();
            generateScoreChart.call(self, data.Value);
            self.ScoreChartPanel.parent().addClass("p-0");
        },
            function () {
                return;
            });
    }

    function generateScoreChart(dataPanel) {
        var self = this;
        var xdata = [];
        var ydata = [];
        var scoreTextData = [];
        var colorData = [];

        $.each(dataPanel,
            function (index, row) {

                xdata.push(row.Title);
                ydata.push(row.BandScore);

                var chartItem = {
                    scoreLabel: row.BandScore,
                    score: row.BandScore,
                    sectionScoreText: row.BandScore
                };
                scoreTextData.push(chartItem);

                if (row.Title === 'OVERALL') {
                    colorData.push(self.ScoreChartPanel.data("overall-color"));
                }
                else {
                    colorData.push(self.ScoreChartPanel.data("default-color"));
                }
            });

        function getScoreText(score) {
            return scoreTextData.find(item => item.score === score).scoreLabel;
        }

        Highcharts.chart('scoreChartWrapper', {
            chart: {
                type: 'bar'
            },
            title: {
                text: 'Overall Score',
                align: 'left',
                style: {
                    "color": "#2D4F7D",
                    "fontSize": "18px",
                    "fontWeight": "500"
                }
            },
            xAxis: {
                categories: xdata,
                title: {
                    text: null
                }
            },
            yAxis: {
                min: 0,
                max: 9,
                title: {
                    text: null
                },
                labels: {
                    overflow: 'justify',
                    step: 1
                },
                lineWidth: 2,
                lineColor: '#bdbdbd'
            },
            tooltip: {
                enabled: false
            },
            plotOptions: {
                bar: {
                    dataLabels: {
                        enabled: true

                    }
                },
                series: {
                    dataLabels: {
                        formatter: function () {
                            return getScoreText(this.y);
                        }
                    },
                    pointWidth: 30,
                    colorByPoint: true
                }
            },
            credits: {
                enabled: false
            },
            exporting: {
                enabled: false
            },
            series: [{
                showInLegend: false,
                data: ydata,
                colors: colorData,

            }],
            navigation: {
                buttonOptions: {
                    verticalAlign: 'top',
                    y: 0
                }
            }
        });

    }

    var studentIeltsAcademicMiniMockTestAnswerReport = function (element) {
        this.Element = element;
        this.MaintenanceForm = null;
        this.ScoreChartPanel = $("#scoreChartPanel");
    };


    studentIeltsAcademicMiniMockTestAnswerReport.prototype = {
        constructor: studentIeltsAcademicMiniMockTestAnswerReport,
        Register: function () {
            var self = this;

            initPlugin.call(self);
            initEventHandler.call(self);
            getScoreChart.call(self);
        },
        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };


    // Export javascript class into window environment
    window.StudentIeltsAcademicMiniMockTestAnswerReport = studentIeltsAcademicMiniMockTestAnswerReport;

})(jQuery, window);;
var StudentIeltsAcademicMiniMockTestAppointmentDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#appointmentBookForm", this.Element);
    this.ModalDialog = this.Element.closest(".modal");
}

StudentIeltsAcademicMiniMockTestAppointmentDialog.prototype = {
    constructor: StudentIeltsAcademicMiniMockTestAppointmentDialog,
    Register: function () {
        var self = this;

        self.LoadWeek();
        self.ModalDialog.modal();

        $("#btnCancel", self.Element)
            .off("click")
            .on("click", function () {

                if (typeof self.Caller.ReloadModal === "function") {
                    self.Caller.ReloadModal();
                }

            });

        $(".close", self.Element)
            .off("click")
            .on("click", function () {

                if (typeof self.Caller.ReloadModal === "function") {
                    self.Caller.ReloadModal();
                }

            });
    },

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format"))
        };

        self.GenerateWeekListForMMT(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });
    },
    GenerateWeekListForMMT: function (postData, element, contentWrapperId, form, onSelectedDate) {

        submitDataWithoutLoader(postData, form.data("week-url"), function (data) {

            $(contentWrapperId, element).html("");
            if (data.WeekAvailabilities.length === 0) {
                $(contentWrapperId, element).html('<p class="text-center">' + data.ErrorMessageWhenNoDaysAvailable + "</p>");
            }

            $.each(data.WeekAvailabilities, function (index, item) {

                var textColor = "text-primary";
                var buttonTagOpen = '<button type="button" class="dateLink list-group-item" data-date=' + item.ShortDate + '>';

                var buttonTagClose = '</button>';

                var rightArrowIcon = '<i class="fa fa-3x fa-arrow-circle-o-right" aria-hidden="true"></i>';
                var leftContent = '<span class="pull-left ' + textColor + '"><b>' + item.DayOfDate + '</b><br/> ' + item.DateLabel + '</span>';
                var rightContent = '<span class="pull-right ' + textColor + '">' + rightArrowIcon + '</span>';

                $(contentWrapperId, element).append(buttonTagOpen + rightContent + leftContent + buttonTagClose);

            });

            $(".dateLink", element).unbind("click").on("click", function (e) {
                e.preventDefault();
                onSelectedDate($(this).data("date"));
            });

            $(".wrap-schedule", element).animate({
                scrollTop: 0
            }, "slow");
        }, null);

    },
    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        submitDataWithoutLoader({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type")
        }, self.form.data("time-url"), function (data) {
            $("#headTitle", self.Element).html('');
            $("#timeList", self.Element).html('');
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + '</h3>' +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + '</p>');

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + ' data-date=' + selectedDate + '>' + item.AvailableTime + '</button>');
            });

            $("#WeekView", self.Element).addClass("hidden");
            $("#TimeView", self.Element).removeClass("hidden");

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back();
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    },

    PopulateForm: function (time, selectDate) {
        var self = this;

        $("#errorPane").hide();
        self.form.find('#generatedForm').html("");
        self.form.find('#generatedForm').append('<input type="hidden" name="startHour" value="' + time + '" />');
        self.form.find('#generatedForm').append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    self.form.find('#generatedForm').append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    self.form.find('#generatedForm').append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    self.form.find('#generatedForm').append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');
                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    self.form.find('#generatedForm').append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                self.form.find('#generatedForm').append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
            });
        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#errorPane").hide();
        self.ModalDialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("create-url"), function (data) {

                showInfoDialog(data.InformationMessage, function () {
                    $("#miniMockTestMenu").click();
                });

                $("#TotalAppointment").val(data.TotalAppointment);
                $("#NumberOfTutorial").val(data.NumberOfTutorial);

            }, self.ModalDialog.modal.bind(self.ModalDialog, "show"));

        }, function () {
            self.ModalDialog.modal("show");
        }, function () {
            self.ModalDialog.modal("show");
        });
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        self.MakeAppointment(time, selectDate);

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    }
}
;
var StudentIeltsAcademicMiniMockTestAppointmentEditDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#appointmentEditBookForm", this.Element);
    this.ModalDialog = this.Element.closest(".modal");
}

StudentIeltsAcademicMiniMockTestAppointmentEditDialog.prototype = {
    constructor: StudentIeltsAcademicMiniMockTestAppointmentEditDialog,
    Register: function () {
        var self = this;

        self.LoadWeek();
        self.ModalDialog.modal();

        $("#btnCancel", self.Element)
            .off("click")
            .on("click", function () {
                if (typeof self.Caller.ReloadModal === "function") {
                    self.Caller.ReloadModal();
                }
            });

        $(".close", self.Element)
            .off("click")
            .on("click", function () {
                if (typeof self.Caller.ReloadModal === "function") {
                    self.Caller.ReloadModal();
                }
            });

    },

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + "</h2>");
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + "</h2>");

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format"))
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });
    },

    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type")
        }, self.form.data("time-url"), function (data) {
            $("#headTitle", self.Element).html("");
            $("#timeList", self.Element).html("");
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + "</h3>" +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + "</p>");

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + " data-date=" + selectedDate + ">" + item.AvailableTime + "</button>");
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back();
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

    },

    PopulateForm: function (time, selectDate) {
        var self = this;
        var generatedForm = self.form.find("#generatedForm");

        $("#errorPane").hide();
        generatedForm.html("");
        generatedForm.append('<input type="hidden" name="startHour" value="' + time + '" />');
        generatedForm.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    generatedForm.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');
                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    generatedForm.append('<input type="hidden" name="checkboxAnswer_' + index + "_" + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = "answerType_" + index + "_" + questionId + "";
                $("input[name=" + name + "]").remove();
                generatedForm.append('<input type="hidden" name="answerType_' + index + "_" + questionId + '" value="' + $(this).val() + '" />');
            });
        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#errorPane").hide();
        self.ModalDialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("edit-url"), function (data) {
                showInfoDialog(data.Value.InformationMessage, function () {
                    $("#miniMockTestMenu").click();
                });
                
            }, self.ModalDialog.modal.bind(self.ModalDialog, "show"));

        }, function () {
            self.ModalDialog.modal("show");
        }, function () {
            self.ModalDialog.modal("show");
        });
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        self.MakeAppointment(time, selectDate);

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    }
};
var StudentIeltsAcademicMiniMockTestGridAppointmentDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.IsReloadModal = false;
    this.ModalDialog = this.Element.closest(".modal");
}

StudentIeltsAcademicMiniMockTestGridAppointmentDialog.prototype = {
    constructor: StudentIeltsAcademicMiniMockTestGridAppointmentDialog,
    Register: function () {
        hideProcessingDialog();

        var self = this;
        self.ModalDialog.modal('show');
        var grid = $("#gridAppointment");

        self.LoadGrid(grid);
        self.ModalDialog.on("hidden.bs.modal", function (e) {
            if (self.IsReloadModal) {
                self.IsReloadModal = false;
            }
        });

        $("#btnAdd", self.Element).on("click", function () {
            $("#errorPane").remove();
            var maintenanceDiv = $("#appointmentWrapper");
            var url = grid.data("book-url");

            loadApplicationContent(url, "GET", function (data) {
                maintenanceDiv.html(grid.data("error-pane"));
                maintenanceDiv.append(data);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application(maintenanceDiv, namespace);
                apps.RegisterWithCaller(self);
            });
        });
    },

    ReloadModal: function () {
        var self = this;
        var total = $("#TotalAppointment").val();
        var max = $("#NumberOfAppointment").val();

        self.ModalDialog.modal('show');

        if (total !== "" || max !== "") {
            if (total >= max) {
                $("#btnAdd").remove();
            }

            var infoMessage = $("#gridAppointment").data("info-message");
            infoMessage = infoMessage.replace("{0}", total);
            infoMessage = infoMessage.replace("{1}", max);

            $("#info-total").html(infoMessage);
        }
        $("#gridAppointment").bootgrid("reload");

    },

    LoadGrid: function (grid) {
        var self = this;
        $("#errorPane").hide();
        $("#errorPane").empty();

        grid.bootgrid({
            ajax: true,
            post: function () {
            },
            url: grid.data("url"),
            formatters: {
                "Action": function (column, row) {
                    var html = "";

                    if (row.Status === "Open" && row.IsValidToCancel) {
                        html = '<a href="#" class="actionReschedule" id="' + row.Id + '" " ' +
                            'data-toggle="tooltip" data-appointment-startdate="' + row.AppointmentStartDateTime + '" data-appointment-date="' + row.AppointmentDate + '" data-appointment-time="' + row.Time + '" data-placement="top" ' +
                            'title="' + grid.data("reschedule-tooltip") + '">' +
                            '<i class="fa fa-exchange" aria-hidden="true"></i>' +
                            '</a>';

                        html += '&nbsp;&nbsp;<a href="#" class="actionCancelAppointment" data-id="' + row.Id + '" " ' +
                            'data-toggle="tooltip" data-appointment-startdate="' + row.AppointmentStartDateTime + '" data-appointment-date="' + row.AppointmentDate + '" data-appointment-time="' + row.Time + '" data-placement="top" ' +
                            'title="' + grid.data("cancel-appointment-tooltip") + '">' +
                            '<i class="fa fa-trash" aria-hidden="true"></i>' +
                            '</a>';
                    }

                    return html;
                }
            }
        }).on("loaded.rs.jquery.bootgrid", function () {
            $('[data-toggle="tooltip"]').tooltip();

            $(".actionReschedule", self.Element).on("click", function () {
                var btnElement = $(this);

                self.ModalDialog.modal("hide");

                submitData({
                    "startDateTime": $(this).data("appointment-startdate"),
                    "appointmentType": grid.data("appointment-type")
                }, grid.data("different-url"), function (data) {
                    if (data.IsLessThan24Hour) {
                        showInfoDialog(data.Message, function () {
                            self.ModalDialog.modal("show");
                        });
                    } else { self.Reschedule(btnElement, grid); }
                });
            });

            $(".actionCancelAppointment", self.Element).on("click", function () {

                self.ModalDialog.modal("hide");

                var appointmentStartDate = $(this).data("appointment-startdate");
                var appointmentId = $(this).data("id");

                submitData({
                    "startDateTime": appointmentStartDate,
                    "appointmentType": grid.data("appointment-type")
                }, grid.data("different-url"), function (data) {
                    if (data.IsLessThan24Hour) {
                        showInfoDialog(data.MessageCancel, function () {
                            self.ModalDialog.modal("show");
                        });
                    } else {
                        var url = grid.data("cancel-url");
                        url += "?appointmentId=" + appointmentId;

                        submitNonForm(grid.data("delete-message"), url, function (data) {
                            self.ModalDialog.modal("hide");
                            showInformation(grid.data("appointment-cancel"));
                            self.IsReloadModal = true;

                            $("#miniMockTestMenu").click();
                        }, function () {
                            self.ModalDialog.modal("show");
                        });
                    }
                });
            });
        });
    },

    Reschedule: function (element, grid) {
        var self = this;
        var id = element.attr('id');
        var appointmentDate = element.data('appointment-date') + " " + element.data('appointment-time');

        var message = grid.data("change-message");
        message = message.replace("[DATE TIME]", appointmentDate);
        message = message.replace("[APPOINTMENT TYPE]", "appointment");

        showConfirmationDialog(message,
            function () {
                $("#errorPane").remove();
                var maintenanceDiv = $("#appointmentWrapper");
                var url = grid.data("edit-url");
                url += '?id=' + id;

                showPartialViewAsync(url, true)
                    .done(function (data) {

                        var afterHideProcessingDialog = function () {
                            maintenanceDiv.html(grid.data("error-pane"));
                            maintenanceDiv.append(data);

                            var helper = new Helper();
                            var namespace = helper.CreateNameSpaceFromURL(url);
                            var apps = new Application(maintenanceDiv, namespace);
                            apps.RegisterWithCaller(self);
                        };

                        hideProcessingDialog(afterHideProcessingDialog);

                    }).fail(function (data) {
                    });
            }, function () { self.ModalDialog.modal("show"); }
             , function () { self.ModalDialog.modal("show"); });
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    }
};
(function ($, window) {
    "use strict";

    // Private Functions

    function initEventHandler() {
        var self = this;

        var eventHandler = {
            btnStartClick: function (e) {
                e.preventDefault();
                closeErrorPane();

                var element = $(this);
                var url = element.data("url") +
                    "?mockTestId=" +
                    element.data("mock-test-id");
                showPopup(url);
            },
            viewScoreReportBtnClick: function (e) {
                e.preventDefault();
                closeErrorPane();

                var element = $(this);
                var url = element.data("url") +
                    "?mockTestId=" +
                    element.data("mock-test-id");
                showPopup(url);
            },
            buyAddOnsBtnClick: function (e) {
                e.preventDefault();

                showLoadingDialog();
                var url = $(this).data("payment-url");

                if (url !== "") {
                    $.get(url, function (contentData) {
                        $('#mainUserContent').html(contentData);
                        hideLoadingDialog();

                        var helper = new Helper();
                        var namespace = helper.CreateNameSpaceFromURL(contentUrl);
                        var apps = new Application($('#mainUserContent'), namespace);
                        apps.Register();
                    });
                }
            },
            scoreSummaryBtnClick: function (e) {
                e.preventDefault();
                var element = $(this);
                var url = element.data("url");
                var container = $("#mainUserContent");

                loadApplicationContent(url, "GET",
                    function (result) {
                        container.html(result);
                    });
            },
            bookAppointmentBtnClick: function (e) {
                e.preventDefault();
                var maintenanceDiv = $("#appointmentWrapper");
                var appointmentUrl = $(this).data("appointment-url");

                generateApplicationDialog.call(self, appointmentUrl, maintenanceDiv);
            },
            viewAppointmentBtnClick: function (e) {
                e.preventDefault();
                var maintenanceDiv = $("#gridAppointmentWrapper");
                var appointmentUrl = $(this).data("grid-appointment-url");

                generateApplicationDialog.call(self, appointmentUrl, maintenanceDiv);
            },
            answerDetailLinkClick: function () {
                var mockTestQuestionId = $(this).data("mock-test-question-id");
                var url = $(this).data("url") + "?mockTestQuestionId=" + mockTestQuestionId;
                showPopup(url);
            }
        };

        $("#btnStart")
            .off("click")
            .on("click", eventHandler.btnStartClick)

        $("#btnViewScoreReport")
            .off("click")
            .on("click", eventHandler.viewScoreReportBtnClick);

        $("#btnBuyAddOns")
            .off("click")
            .on("click", eventHandler.buyAddOnsBtnClick);

        $("#btnScoreSummary")
            .off("click")
            .on("click", eventHandler.scoreSummaryBtnClick);

        $("#btnBookAppointment")
            .off("click")
            .on("click", eventHandler.bookAppointmentBtnClick);

        $("#btnViewAppointment")
            .off("click")
            .on("click", eventHandler.viewAppointmentBtnClick);

        $('.answerDetailLink')
            .click(eventHandler.answerDetailLinkClick);
    }

    function generateApplicationDialog(url, maintenanceDiv) {
        var self = this;

        $("#errorPane").remove();
        maintenanceDiv.html("");

        $.get(url,
            function (data) {
                maintenanceDiv.html('');
                maintenanceDiv.append(data);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application(maintenanceDiv, namespace);
                apps.RegisterWithCaller(self);

            });
    }

    function getAnswerReport() {
        var self = this;
        var url = self.AnswerReportPanel.data("url");

        self.AnswerReportPanel.html('<span class="icon fa fa-refresh fa-spin"></span> ' + self.AnswerReportPanel.data("loading-message"));

        showPartialViewAsync(url)
            .then(function (data) {
                self.AnswerReportPanel.html(data);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application(self.AnswerReportPanel, namespace);
                apps.RegisterWithCaller(self);

                scrollToElement("viewMessage");
                hideLoadingDialog();
            });
    }


    // Constructor
    var studentIeltsAcademicMiniMockTestIndex = function (element) {
        this.Element = element;
        this.AnswerReportPanel = $("#answerReportPanel");
    }

    studentIeltsAcademicMiniMockTestIndex.prototype = {
        constructor: studentIeltsAcademicMiniMockTestIndex,
        Register: function () {
            var self = this;

            initEventHandler.call(self);
            getAnswerReport.call(self);
        }
    }


    // Export javascript class into window environment
    window.StudentIeltsAcademicMiniMockTestIndex = studentIeltsAcademicMiniMockTestIndex;
})(jQuery, window);;
var StudentIeltsAcademicMiniMockTestView = function (element) {
    this.Element = element;
    this.MaintenanceForm = null;
    this.CountDown = null;
    this.CurrentGroupSectionIndex = null;
    this.CurrentGroupName = null;
    this.CurrentSectionId = null;
    this.CurrentSectionName = null;
    this.BeforePlayAudioCountDown = null;
    this.LastHighlight = null;
    this.E2Logger = new E2Logger();
    this.Message = {
        WordLimitMessage: "",
        WritingTimeOut: "",
        ListeningTimeOut: "",
        ReadingTimeOut: ""
    };
    this.SectionGroupCode = {
        Listening: "",
        Writing: "",
        Speaking: "",
        Reading: ""
    };
};


StudentIeltsAcademicMiniMockTestView.prototype = {
    constructor: StudentIeltsAcademicMiniMockTestView,
    Register: function () {
        var self = this;

        self.E2Logger.InitializeMockTestLogger(self.Element);
        self.Initialize();

        $(".collapse").on("hide.bs.collapse", function () {
            var contentIelts = $(this).parents(".wrapper-section").find(".panelContent");
            if (contentIelts.length !== 0) {
                contentIelts.addClass("collapsibleActive")
                contentIelts.removeClass("collapsibleInactive")
            }
        });
        $(".collapse").on("show.bs.collapse", function () {
            var contentIelts = $(this).parents(".wrapper-section").find(".panelContent");
            if (contentIelts.length !== 0) {
                contentIelts.removeClass("collapsibleActive")
                contentIelts.addClass("collapsibleInactive")
            }
        });
    },
    Initialize: function () {
        var self = this;

        var currentGroupSection = $('div[class^="wrapper-section"]:not(.mmt-hide-panel)');
        self.CurrentGroupSectionIndex = currentGroupSection.data("group-index");
        self.CurrentGroupName = currentGroupSection.data("group-name");

        var currentSection = currentGroupSection.find('div[class^="panelSection"]:not(.mmt-hide-panel)');
        self.CurrentSectionId = currentSection.data("section-id");
        self.CurrentSectionName = currentSection.data("section-name");

        $(".wrapper-section")
            .each(function () {
                var wrapper = $(this);
                self._initializeQuestionPalette.callWithLog(self, wrapper);
                self._initializeSectionNavigateButton.callWithLog(self, wrapper);
                self._initializeDragAndDrop.callWithLog(self, wrapper);
                self._initializeHighlight.callWithLog(self, wrapper);
                self._dropDownListChangeHandler.callWithLog(self, wrapper);
                self._textBoxChangeHandler.callWithLog(self, wrapper);
                self._radioButtonChangeHandler.callWithLog(self, wrapper);
                self._checkBoxChangeHandler.callWithLog(self, wrapper);
                self._inputTextAreaChangeHandler.callWithLog(self, wrapper);
                self._prepareTimer.callWithLog(self, wrapper);

            });
        self._initializeSectionSubmitButton.callWithLog(self);
        self._initializeSectionStartButton.callWithLog(self);
        self._initializeCloseButton.callWithLog(self);
        self._initializeWordCount.callWithLog(self);
        self._initializeHighlightBar.callWithLog(self);
        self._refreshPageWrapper.callWithLog(self);
    },
    GoTo: function (groupSectionWrapper, targetSectionId, currentSectionId) {
        var self = this;
        var currentSection = $(groupSectionWrapper.find(".panelSection").filter("[data-section-id='" + currentSectionId + "']"));
        var targetSection = $(groupSectionWrapper.find(".panelSection").filter("[data-section-id='" + targetSectionId + "']"));

        var validateTextAreaResult = self._validateTextArea(currentSection);

        if (validateTextAreaResult.includes(false)) {
            return;
        }

        if (targetSection.length) {
            currentSection.hide();
            targetSection.show();

            self.CurrentSectionId = targetSectionId;
            $(".formatbar").hide();
        }
    },
    SetFocus: function (groupSectionWrapper, question) {
        var inputEl;
        if (groupSectionWrapper.find("#question-" + question).find(".form-control").length) {
            inputEl = groupSectionWrapper.find("#question-" + question).find(".form-control");
        }
        else if (groupSectionWrapper.find("#question-" + question).find("input").length) {
            inputEl = groupSectionWrapper.find("#question-" + question).find("input")[0];
        }
        else if (groupSectionWrapper.find("#question-" + question + " .sentence-text").length) {
            inputEl = groupSectionWrapper.find("#question-" + question + " .sentence-text")[0];
            $(inputEl).attr("tabIndex", "0");
        }
        else if (groupSectionWrapper.find("#question-" + question).length) {
            inputEl = groupSectionWrapper.find("#question-" + question)[0];
            $(inputEl).attr("tabIndex", "0");
        }
        else {
            return;
        }

        inputEl.focus();
    },
    SaveAnswer: function (formName, currGroupIndex, nextGroupIndex) {
        var self = this;
        self.StopAudio();

        var url = $("#" + formName + " .wrapper-section").data("save-url");
        self._constructSubmitData.callWithLog(self, formName);

        submitFormOverride("#" + formName,
            url,
            function (data) {
                if (data.IsSuccess) {
                    var currSectionGroup = $("#section-group-" + currGroupIndex);
                    var nextSectionGroup = $("#section-group-" + nextGroupIndex);
                    if (nextSectionGroup.length) {
                        self.CurrentGroupSectionIndex = nextGroupIndex;
                        self.CurrentGroupName = nextSectionGroup.data("group-name");

                        $(currSectionGroup).hide();
                        $(nextSectionGroup).show();

                        var currentSection = nextSectionGroup.find('div[class^="panelSection"]:not(.mmt-hide-panel)');
                        self.CurrentSectionId = currentSection.data("section-id");
                        self.CurrentSectionName = currentSection.data("section-name");

                        self._prepareTimer.callWithLog(self, nextSectionGroup);
                        self.ClearIntervalBeforePlayAudio();
                        self.PrepareAudio(nextSectionGroup);
                    }
                    else {
                        $(".page-main-activity").empty();
                        $("#SubmittedView").show();
                        $("#SubmittedMessage").html(data.Value.Message);

                        self._updateParentActivityPanel.callWithLog(self, data);
                    }

                    self._refreshPageWrapper.callWithLog(self);
                    $(".formatbar").hide();
                }
                else {
                    showInfoDialog(data.MessageErrorTextArray);
                    clearInterval(self.CountDown);

                    $("#" + formName)
                        .find("*")
                        .attr("disabled", "disabled")
                        .addClass("disabled");
                }
            });
    },
    StopAudio: function () {
        var sounds = $(".audio-player");
        var i;
        for (i = 0; i < sounds.length; i++) sounds[i].pause();
    },

    ClearIntervalBeforePlayAudio: function () {
        var self = this;
        clearInterval(self.BeforePlayAudioCountDown);
    },
    PrepareAudio: function (wrapper) {
        var self = this;
        initAudioPlayerWidget(wrapper.find("#audioPlayerPanel"));
        self._startAudio.callWithLog(self, wrapper);
    },
    _startAudio: function (wrapper) {
        var self = this;
        var timerNumber = 0;

        self.BeforePlayAudioCountDown = setInterval(function () {
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                $(".audioPlayer", wrapper).removeClass("disabled-audio");
                self._stopBeforePlayAudioCountdown.callWithLog(self, wrapper);
            }
        },
            1000);

        self._audioPlayerHandle.callWithLog(self, wrapper);
    },
    _audioPlayerHandle: function (wrapper, onPlay, onEnded) {
        var self = this;
        var audioPlayerEl = wrapper.find("#audioPlayerPanel audio");

        if (audioPlayerEl.length === 0) {
            return;
        }

        self.IsAudioPlayed = false;

        audioPlayerEl.off("play").on('play', function () {
            if (self.IsAudioPlayed || self.BeforePlayAudioCountDown !== null) {
                this.pause();
                return;
            }

            if (typeof onPlay === "function") {
                onPlay($(this));
            }
        });

        audioPlayerEl.off("ended").on('ended', function () {
            if (self.IsAudioPlayed) {
                return;
            }

            self.IsAudioPlayed = true;
            if (typeof onEnded === "function") {
                onEnded();
            }
        });
    },
    _stopBeforePlayAudioCountdown: function (wrapper) {
        var self = this;
        var audioPlayerEl = wrapper.find("#audioPlayerPanel audio");
        var id = audioPlayerEl.prop("id");

        if (audioPlayerEl.length) {
            document.getElementById(id).play();
            document.getElementById(id).muted = false;
        }
        if (self.BeforePlayAudioCountDown !== undefined || self.BeforePlayAudioCountDown !== null) {
            clearInterval(self.BeforePlayAudioCountDown);
            self.BeforePlayAudioCountDown = null;
        }
    },
    _prepareTimer(wrapper) {
        var self = this;
        if (wrapper.data("group-index") !== self.CurrentGroupSectionIndex) {
            return;
        }

        if (self.CountDown !== undefined) {
            clearInterval(self.CountDown);
        }

        var duration = 0;
        var durationPanel = wrapper.find(".timer-duration-panel");
        if (durationPanel.length) {
            duration = durationPanel.data("duration");
        }

        if (duration !== 0) {
            var timerId = durationPanel.prop("id");

            interval = setInterval(function () {
                DynamicTimerWithoutPopup("#" + timerId, "",
                    function () { self._timeOut.callWithLog(self, wrapper); });
            },
                1000);
            self.CountDown = interval;
        }
    },
    _initializeSectionSubmitButton() {
        var self = this;
        $(".submit-btn")
            .click(function () {
                var el = $(this);

                var sectionForm = el.data("form-id");
                var currGroupIndex = parseInt(el.data("group-index"));
                var nextGroupIndex = currGroupIndex + 1;
                var currWrapper = $("#section-group-" + currGroupIndex);
                var message = currWrapper.data("confirmation-message");
                var timer = currWrapper.find(".timer-duration-panel").html();

                var currentSectionEl = currWrapper.find("div[data-section-id='" + self.CurrentSectionId + "']");

                var validateTextAreaResult = self._validateTextArea(currentSectionEl);

                if (validateTextAreaResult.includes(false)) {
                    return;
                }

                if (timer !== '00:00') {
                    showYesNoConfirmationDialog(message,
                        function () {
                            self.SaveAnswer(sectionForm, currGroupIndex, nextGroupIndex);
                        },
                        function () { return; }
                    );
                }
                else {
                    self.SaveAnswer(sectionForm, currGroupIndex, nextGroupIndex);
                }
            });
    },
    _initializeSectionStartButton() {
        var self = this;
        $(".start-btn")
            .click(function () {
                var el = $(this);

                var currGroupIndex = parseInt(el.data("group-index"));
                var nextGroupIndex = currGroupIndex + 1;

                var currSectionGroup = $("#section-group-" + currGroupIndex);
                var nextSectionGroup = $("#section-group-" + nextGroupIndex);
                if (nextSectionGroup.length) {
                    self.CurrentGroupSectionIndex = nextGroupIndex;
                    self.CurrentGroupName = nextSectionGroup.data("group-name");

                    var currentSection = nextSectionGroup.find('div[class^="panelSection"]:not(.mmt-hide-panel)');
                    self.CurrentSectionId = currentSection.data("section-id");
                    self.CurrentSectionName = currentSection.data("section-name");

                    $(currSectionGroup).hide();
                    $(nextSectionGroup).show();

                    self.ClearIntervalBeforePlayAudio();
                    self.PrepareAudio(nextSectionGroup);

                    self._prepareTimer.callWithLog(self, nextSectionGroup);
                    self._refreshPageWrapper.callWithLog(self);
                }
            });
    },
    _initializeCloseButton() {
        var self = this;
        $(".closeButton")
            .click(function () {
                window.close();
            });
    },
    _initializeDragAndDrop(wrapper) {
        var uniqueAnswerIds = new Array();

        function isInArray(value, array) {
            return array.indexOf(value) > -1;
        }

        wrapper.find(".draggable")
            .draggable({
                helper: "clone",
                revert: function () {
                    if ($(this).hasClass("drag-revert")) {
                        return true;
                    }
                },
                scroll: 'true'
            });

        wrapper.find(".droppable")
            .droppable({
                accept: ".draggable",
                tolerance: 'pointer',
                drop: function (e, ui) {
                    var answerId = $(ui.draggable).data("answerid");
                    var sortingIndex = $(ui.draggable).data("sortingindex");
                    var sentenceKey = $(ui.draggable).data("sentencekey");
                    var mockTestQuestionId = $(ui.draggable).data("mocktestquestionid");
                    var orderParagraphId = $(ui.draggable).data("orderparagraphid");
                    var sectionType = $(ui.draggable).data("sectiontype");
                    if ((uniqueAnswerIds.length === 0 || isInArray(answerId, uniqueAnswerIds) === false)) {
                        if ($(this).find(".remove-sentence").hasClass("hidden") &&
                            !$(this).hasClass("correct-answer")) {
                            var content = $(this);

                            $(this)
                                .find(".remove-sentence")
                                .click(function (e) {
                                    e.preventDefault();
                                    content.find(".sentence-text").html("");
                                    content.find(".remove-sentence").addClass("hidden");
                                    $("#draggable-" + $(this)[0].dataset["answerid"]).removeClass("hidden");
                                    var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                    uniqueAnswerIds.splice(index, 1);
                                    $(this).parents(".question-container").data("answerid", "");

                                    var questionLabel = content.data("question-label");
                                    var circleEl = wrapper.find("#circle-" + questionLabel);

                                    if (circleEl.length === 0) {
                                        return;
                                    }

                                    circleEl.removeClass("answered").addClass("unanswered");
                                });
                            if ($(this).data("answerid") !== "") {
                                var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                uniqueAnswerIds.splice(index, 1);
                            }
                            $(this).data("answerid", answerId);
                            $(this).data("sortingindex", sortingIndex);
                            $(this).data("sentencekey", sentenceKey);
                            $(this).data("mocktestquestionid", mockTestQuestionId);
                            $(this).data("orderparagraphid", orderParagraphId);
                            $(this).data("sectiontype", sectionType);
                            $(this).find(".sentence-text").html($(ui.draggable).html());
                            $(this).find(".remove-sentence").removeClass("hidden")
                                .attr("data-answerid", answerId);

                            $("#draggable-" + answerId).addClass("hidden");

                            uniqueAnswerIds.push($(this).data("answerid"));

                            var questionLabel = content.data("question-label");
                            var circleEl = wrapper.find("#circle-" + questionLabel);

                            if (circleEl.length === 0) {
                                return;
                            }
                            circleEl.removeClass("unanswered").addClass("answered");

                            return $(ui.draggable).removeClass("drag-revert");
                        } else {
                            $("#draggable-" + answerId).removeClass("hidden");
                            return $(ui.draggable).addClass("drag-revert");
                        }
                    }
                }
            });
    },
    _initializeSectionNavigateButton(wrapper) {
        var self = this;
        wrapper.find(".section-btn .btn")
            .click(function () {
                var el = $(this);
                var currentSectionName = el.data("current-section-name");
                var targetSectionName = el.data("target-section-name");

                var currentSectionId = wrapper.find("#section-" + currentSectionName).data("section-id");
                var targetSectionId = wrapper.find("#section-" + targetSectionName).data("section-id");

                self.GoTo.callWithLog(self, wrapper, targetSectionId, currentSectionId);
            });
    },
    _initializeQuestionPalette(wrapper) {
        var self = this;
        wrapper.find(".question-palette-pane .circle-question-palette")
            .click(function () {
                var el = $(this);
                var question = el.data("question");
                var sectionId = el.data("section-id");

                if (sectionId !== self.CurrentSectionId) {
                    self.GoTo.callWithLog(self, wrapper, sectionId, self.CurrentSectionId);
                }

                self.SetFocus(wrapper, question);
            });

    },
    _initializeWordCount() {
        $(".wordCount").html('0');
    },
    _initializeHighlightBar() {
        var self = this;
        $(".highlighter").click(function (e) {
            e.preventDefault();
            var css = $(e.currentTarget).data("css");
            self._highlightText.callWithLog(self, css);
        });

        $(".unhighlight").click(function (e) {
            e.preventDefault();
            self._unHighlightText.callWithLog(self);
        });
    },
    _initializeHighlight(wrapper) {
        var self = this;
        wrapper.find(".selectable-text").off("mouseup").on("mouseup", function (n) {
            var el = $(n.target);

            if (!el.hasClass("dragdrop") && !el.hasClass("form-control")) {
                var parentEl = el.parents(".content-panel");
                self._markSelection.callWithLog(self, parentEl);
                n.target.tagName === "SPAN" && n.target.className.includes("highlight") && (self.LastHighlight = n.target);
            }
            else {
                $(".formatbar").hide();
            }
        });
    },
    _markSelection(wrapper) {
        $(".formatbar").hide();
        var i = "﻿",
            r = "&#xfeff;",
            n, t = "sel_" + (new Date).getTime() + "_" + Math.random().toString().substr(2);
            var u, f;
        if (document.selection && document.selection.createRange ? (f = document.selection.createRange().duplicate(), f.collapse(!1), f.pasteHTML('<span id="' + t + '" style="position: relative;">' + r + "<\/span>"), n = document.getElementById(t)) : window.getSelection && (u = window.getSelection(), u.getRangeAt ? u.rangeCount > 0 && (f = u.getRangeAt(0).cloneRange()) : (f.setStart(u.anchorNode, u.anchorOffset), f.setEnd(u.focusNode, u.focusOffset), f.collapsed !== u.isCollapsed && (f.setStart(u.focusNode, u.focusOffset), f.setEnd(u.anchorNode, u.anchorOffset))), u.toString() !== "" && u.toString() !== " " && (f.collapse(!0), n = document.createElement("span"), n.id = t, n.appendChild(document.createTextNode(i)), f.insertNode(n))), n) {
            u.toString() !== "" && wrapper.find(".formatbar").show();
            var s = n;
            var left = 0;
            var top = 0;

            typeof viewAnswerMode === "undefined" ? (left += s.offsetLeft, top += s.offsetTop) : (left += $(s).offset().left - $(".selectable-text").offset().left, top += $(s).offset().top - $(".selectable-text").offset().top);
            top = top - 38;
            if ($(s).parents(".question.selectable-text").length) {
                var currTop = $(s).parents(".question.selectable-text")[0].offsetTop;
                var currLeft = $(s).parents(".question.selectable-text")[0].offsetLeft;
                top = top + currTop;
                left = left + currLeft;
            } else if ($(s).parents("table").length) {
                var tableTop = $(s).parents("table")[0].offsetTop;
                var tableLeft = $(s).parents("table")[0].offsetLeft;

                var colTop = $(s).parents("td")[0].offsetTop;
                var colLeft = $(s).parents("td")[0].offsetLeft;

                top = top + tableTop + colTop;
                left = left + tableLeft + colLeft;
            }
            typeof extraHeightCom !== "undefined" && (top = top + extraHeightCom);

            wrapper.find(".formatbar").css("top", top).css("left", left);
            n.parentNode && n.parentNode.removeChild(n);

        }
    },
    _getSelectedText() {
        var text = "";
        return window.getSelection ? text = window.getSelection() : document.getSelection ? text = document.getSelection() : document.selection && (text = document.selection.createRange().text), text;
    },
    _getSelectedHtml() {
        var self =this;
        var html = "";
        if (typeof window.getSelection !== "undefined") {
            var sel = window.getSelection();
            if (sel.rangeCount) {
                var container = document.createElement("div");
                for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                    var range = sel.getRangeAt(i);
                    var fragment = range.cloneContents();
                    container.appendChild(fragment);
                    self._unHighlightChildElement.callWithLog(self, $(container));
                }
                html = container.innerHTML;
            }
        } else if (typeof document.selection !== "undefined") {
            if (document.selection.type === "Text") {
                html = document.selection.createRange().htmlText;
            }
        }
        return html;
    },
    _highlightText(className) {
        var self = this;
        var r = self._getSelectedText(),
            u = self._getSelectedHtml(),
            t, i;
        if (u !== "") {
            i = r.getRangeAt(0);
            if ($(i.commonAncestorContainer).is("span[class^='highlight']")) {
                if ($(i.commonAncestorContainer).html() === u) {
                    $(i.commonAncestorContainer).attr("class", className);
                    document.getSelection().removeAllRanges();
                    return;
                }
            }
            t = document.createElement("SPAN");
            t.className = className;
            t.innerHTML = u;
            i.deleteContents();
            i.insertNode(t);
            self.LastHighlight = t;
            $(".formatbar").hide();
            
            document.getSelection().removeAllRanges();
        };
    },
    _unHighlightText() {
        var self = this;
        var range = window.getSelection().getRangeAt(0);
        var node = $(range.commonAncestorContainer);
        var content = self._getSelectedHtml();

        var spanTag = document.createElement("span");
        spanTag.className = "highlight-transparent";
        spanTag.innerHTML = content;

        range.deleteContents();
        range.insertNode(spanTag);

        var parents = $(spanTag).parents("span[class^='highlight']");
        if (parents.length !== 0) {

            var topParent =$(parents[parents.length - 1]);
            var parentContent = topParent.wrap("</p>").parent().html();
            topParent.unwrap();

            var contentReplacement = self._generateHighlightContentReplacement(content, parents);

            parentContent = parentContent.replace('<span class="highlight-transparent">' + content + '</span>', contentReplacement);
            topParent.replaceWith(parentContent);
        }

        node.find("span.highlight-transparent").each(function () {
            var html = $(this).html();
            $(this).replaceWith(html);
        });

        $(".formatbar").hide();

        self._initializeHighlight.callWithLog(self, $(range.commonAncestorContainer).closest(".wrapper-section"));
    },
    _generateHighlightContentReplacement: function (content, parents) {
        var self = this;

        var spanClasses = [];

        parents.each(function (index, row) {
            spanClasses.push($(row).attr("class"));
        });

        var spanCloseTag = spanClasses.map(item => { return '</span>' }).join('');
        var spanOpenTag = spanClasses.slice(0).reverse().map(item => { return '<span class="' + item + '">' }).join('');

        return spanCloseTag + content + spanOpenTag;
    },
    _unHighlightChildElement: function (element) {
        var self = this;
        element.find("span[class^='highlight']").each(function () {
           
            if ($(this).find("span[class^='highlight']").length !== 0) {
                self._unHighlightChildElement.callWithLog(self, $(this));
            }

            var children = $(this).html();
            $(this).replaceWith(children);
        });
    },
    _dropDownListChangeHandler(wrapper) {
        wrapper.find("select").change(
            function () {
                var selectEl = $(this);
                var selectedOption = selectEl.find("option:selected");
                var questionLabel = selectedOption.parents(".question-container").data("question-label");
                var circleEl = wrapper.find("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }

                if (selectedOption.index() === 0 || selectedOption.text() === "" || selectedOption.text() === "-") {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
                else {
                    circleEl.removeClass("unanswered").addClass("answered");
                }

            });
    },
    _textBoxChangeHandler(wrapper) {
        wrapper.find("input[type=text]").bind("keyup change",
            function () {
                var element = $(this);
                var questionLabel = element.parents(".question-container").data("question-label");
                var circleEl = wrapper.find("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }
                if (element.val().trim() === "") {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
                else {
                    circleEl.removeClass("unanswered").addClass("answered");
                }
            });
    },
    _radioButtonChangeHandler(wrapper) {
        wrapper.find("input[type=radio]")
            .change(function () {
                var element = $(this);
                var questionLabel = element.parents(".question-container").data("question-label");
                var circleEl = wrapper.find("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }
                if (element.value !== null) {
                    circleEl.removeClass("unanswered").addClass("answered");
                }
                else {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
            });
    },
    _checkBoxChangeHandler(wrapper) {
        wrapper.find("input[type=checkbox]")
            .change(function () {
                var element = $(this);
                var questionContainer = element.parents(".question-container");
                var questionLabel = questionContainer.data("question-label");
                var circleEl = wrapper.find("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }

                var totalChecked = questionContainer.find("input:checkbox:checked").length;
                var maxCheckedAnswer = questionContainer.data("max-answer");

                if (totalChecked > maxCheckedAnswer) {
                    $(this).prop("checked", false);
                    return;
                }

                if (totalChecked > 0) {
                    circleEl.removeClass("unanswered").addClass("answered");
                } else {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
            });
    },
    _inputTextAreaChangeHandler(wrapper) {
        var self = this;
        wrapper.find("textarea").bind("keyup change",
            function () {
                var element = $(this);

                var maxWord = element.data("max-word");
                var value = element.val();
                var questionPanel = element.parents(".panelQuestion");
                if (questionPanel.find(".wordCount").length > 0) {

                    if (value.length === 0) {
                        questionPanel.find('.wordCount').html(0);
                    }
                    var regex = /\s+/gi;
                    var wordCount = value.trim().replace(regex, ' ').split(' ').length;

                    questionPanel.find('.wordCount').html(wordCount);

                    if (maxWord !== 0 && wordCount <= maxWord) {
                        self._hideWritingErrorPanel.callWithLog(self, element);
                    }
                }

                var questionLabel = element.parents(".question-container").data("question-label");
                var circleEl = wrapper.find("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }
                if (element.val().trim() === "") {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
                else {
                    circleEl.removeClass("unanswered").addClass("answered");
                }
            });
    },
    _constructSubmitData(formName) {
        var self = this;

        $("#" + formName + " .droppable")
            .each(function () {
                var sectionKey = $(this).data("sentencekey");
                var questionId = $(this).data("orderparagraphid");
                var mockTestQuestionId = $(this).data("mocktestquestionid");
                var sectionType = $(this).data("sectiontype");
                var answerId = $(this).data("answerid");
                var sortingIndexTarget = sectionKey.replace("Q", "");

                if (answerId !== undefined && answerId !== "") {
                    $("#" + formName).append('<input type="hidden" name="MiniMockTest_' + sectionType +
                        "_" +
                        mockTestQuestionId +
                        "_" +
                        questionId +
                        "_" +
                        answerId +
                        '" value="' +
                        sortingIndexTarget +
                        '" />');
                }
            });

        $("#" + formName + " input:hidden")
            .not('[name*="MockTestId"]')
            .not('[name*="SectionGroupCode"]')
            .not('[name*="MiniMockTest"]')
            .remove();

        $("#" + formName + " .disabled").removeAttr("disabled").removeClass("disabled");
    },
    _updateParentActivityPanel(response) {
        if (window.opener !== null && !window.opener.closed) {
            $("#btnStart", window.opener.document).remove();
            $("#MiniMockTestMessage", window.opener.document).html(response.Value.Message);
            $("#btnBookAppointment", window.opener.document).removeClass("hidden");
        }
    },
    _refreshPageWrapper() {
        var self = this;
        if (self.CurrentGroupName === 'INS') {
            $("#page-wrapper").removeClass("page-fixed");
        }
        else {
            $("#page-wrapper").addClass("page-fixed");
        }
    },
    _timeOut(wrapper) {
        var self = this;

        self.E2Logger.MockTestManualLog("TIMEOUT", wrapper);

        var sectionGroupCode = wrapper.data("sectionGroupCode");

        if (sectionGroupCode === self.SectionGroupCode.Writing) {
            showInfoDialog(self.Message.WritingTimeOut);
            return;

        } else if (sectionGroupCode === self.SectionGroupCode.Listening) {
            showInfoDialog(self.Message.ListeningTimeOut);
            return;

        } else if (sectionGroupCode === self.SectionGroupCode.Reading) {
            showInfoDialog(self.Message.ReadingTimeOut);
            return;

        }
        
    },
    _validateTextArea(wrapper) {
        var self = this;
        var validTextAreas = [];
        wrapper.find("textarea").each(function () {
            var result = self._isValidTextAreaValue($(this));
            validTextAreas.push(result);
        });

        return validTextAreas;
    },
    _isValidTextAreaValue(textAreaEl) {
        var self = this;
        var value = textAreaEl.val();
        var minWord = textAreaEl.data("min-word");
        var maxWord = textAreaEl.data("max-word");
        var regex = /\s+/gi;
        var wordCount = value.trim().replace(regex, ' ').split(' ').length;

        if (wordCount < minWord || wordCount > maxWord) {
            showInfoDialog(self.Message.WordLimitMessage);
            return false;
        }

        return true;
    },
    _hideWritingErrorPanel(textAreaEl) {
        var errorPane = textAreaEl.parent(".writing-section").find(".alert");
        errorPane.empty();
        errorPane.hide();
    }
};;
var StudentIeltsAcademicMiniMockTestViewDetail = function (element) {
    this.Element = element;
};

StudentIeltsAcademicMiniMockTestViewDetail.prototype = {
    constructor: StudentIeltsAcademicMiniMockTestViewDetail,
    Register: function () {
        var self = this;

        self.GenerateComment();

        $(".closeButton").click(function () {
            window.close();
        });
    },
    GenerateComment: function () {
        $(".panel-section").each(function () {
            var comment = "";
            $(this).find(".form-group").each(function () {
                var selectedInput = $(this).find("input[type=radio]:checked");
                if (selectedInput.length) {
                    var currentComment = selectedInput[0].dataset["comment"];
                    if (currentComment !== "")
                        comment += "<p>" + currentComment + "</p>";

                }
            });
            $(this).find("[id^=comment]").html(comment);
        });
    }
};
var StudentIeltsAcademicMiniMockTestViewDetailV2 = function (element) {
    this.Element = element;
};

StudentIeltsAcademicMiniMockTestViewDetailV2.prototype = {
    constructor: StudentIeltsAcademicMiniMockTestViewDetailV2,
    Register: function () {
        var self = this;

        $(".closeButton").click(function () {
            window.close();
        });
    }
};
(function ($, window) {
    "use strict";

    // Private Functions

    function initPlugin() {
        var self = this;

        $(".fcd-correct-answer-tooltip").tooltipster({
            contentAsHTML: true,
            functionBefore: function (instance, helper) {

                var origin = $(helper.origin);
                var answerText = origin.data("correct-answer");
                var headerText = "<p>Correct Answer:</p>";
                var text = headerText + answerText;

                instance.content(text);
                origin.data('loaded', true);
            },
            animation: 'fade',
            delay: 200,
            theme: ['tooltipster-light', 'tooltipster-light-fcd'],
            trigger: 'hover',
            side: 'right',
            maxWidth: 480
        });

        $('.answer-report-tooltip').tooltipster({
            theme: 'tooltipster-light',
            side: 'right'
        });

    }

    function initEventHandler() {
        var self = this;

        var eventHandler = {
            btnViewAssessmentClick: function () {
                var mockTestQuestionId = $(this).data("mock-test-question-id");
                var url = $(this).data("url") + "?mockTestQuestionId=" + mockTestQuestionId;
                showPopup(url)
            }
        };
        $('.view-assessment-btn')
            .off("click")
            .on("click", eventHandler.btnViewAssessmentClick);
    }

    function getScoreChart() {
        var self = this;
        var url = self.ScoreChartPanel.data("get-url");

        self.ScoreChartPanel.html('<span class="icon fa fa-refresh fa-spin"></span> ' + self.ScoreChartPanel.data("loading-message"));

        submitDataWithoutLoader({}, url, function (data) {
            self.ScoreChartPanel.empty();
            generateScoreChart.call(self, data.Value);
            self.ScoreChartPanel.parent().addClass("p-0");
        },
            function () {
                return;
            });
    }

    function generateScoreChart(dataPanel) {
        var self = this;
        var xdata = [];
        var ydata = [];
        var scoreTextData = [];
        var colorData = [];

        $.each(dataPanel,
            function (index, row) {

                xdata.push(row.Title);
                ydata.push(row.BandScore);

                var chartItem = {
                    scoreLabel: row.BandScore,
                    score: row.BandScore,
                    sectionScoreText: row.BandScore
                };
                scoreTextData.push(chartItem);

                if (row.Title === 'OVERALL') {
                    colorData.push(self.ScoreChartPanel.data("overall-color"));
                }
                else {
                    colorData.push(self.ScoreChartPanel.data("default-color"));
                }
            });

        function getScoreText(score) {
            return scoreTextData.find(item => item.score === score).scoreLabel;
        }

        Highcharts.chart('scoreChartWrapper', {
            chart: {
                type: 'bar'
            },
            title: {
                text: 'Overall Score',
                align: 'left',
                style: {
                    "color": "#2D4F7D",
                    "fontSize": "18px",
                    "fontWeight": "500"
                }
            },
            xAxis: {
                categories: xdata,
                title: {
                    text: null
                }
            },
            yAxis: {
                min: 0,
                max: 9,
                title: {
                    text: null
                },
                labels: {
                    overflow: 'justify',
                    step: 1
                },
                lineWidth: 2,
                lineColor: '#bdbdbd'
            },
            tooltip: {
                enabled: false
            },
            plotOptions: {
                bar: {
                    dataLabels: {
                        enabled: true

                    }
                },
                series: {
                    dataLabels: {
                        formatter: function () {
                            return getScoreText(this.y);
                        }
                    },
                    pointWidth: 30,
                    colorByPoint: true
                }
            },
            credits: {
                enabled: false
            },
            exporting: {
                enabled: false
            },
            series: [{
                showInLegend: false,
                data: ydata,
                colors: colorData,

            }],
            navigation: {
                buttonOptions: {
                    verticalAlign: 'top',
                    y: 0
                }
            }
        });

    }

    var studentIeltsGeneralMiniMockTestAnswerReport = function (element) {
        this.Element = element;
        this.MaintenanceForm = null;
        this.ScoreChartPanel = $("#scoreChartPanel");
    };


    studentIeltsGeneralMiniMockTestAnswerReport.prototype = {
        constructor: studentIeltsGeneralMiniMockTestAnswerReport,
        Register: function () {
            var self = this;

            initPlugin.call(self);
            initEventHandler.call(self);
            getScoreChart.call(self);
        },
        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };


    // Export javascript class into window environment
    window.StudentIeltsGeneralMiniMockTestAnswerReport = studentIeltsGeneralMiniMockTestAnswerReport;

})(jQuery, window);;
var StudentIeltsGeneralMiniMockTestAppointmentDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#appointmentBookForm", this.Element);
    this.ModalDialog = this.Element.closest(".modal");
}

StudentIeltsGeneralMiniMockTestAppointmentDialog.prototype = {
    constructor: StudentIeltsGeneralMiniMockTestAppointmentDialog,
    Register: function () {
        var self = this;

        self.LoadWeek();
        self.ModalDialog.modal();

        $("#btnCancel", self.Element)
            .off("click")
            .on("click", function () {

                if (typeof self.Caller.ReloadModal === "function") {
                    self.Caller.ReloadModal();
                }

            });

        $(".close", self.Element)
            .off("click")
            .on("click", function () {

                if (typeof self.Caller.ReloadModal === "function") {
                    self.Caller.ReloadModal();
                }

            });
    },

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format"))
        };

        self.GenerateWeekListForMMT(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });
    },
    GenerateWeekListForMMT: function (postData, element, contentWrapperId, form, onSelectedDate) {

        submitDataWithoutLoader(postData, form.data("week-url"), function (data) {

            $(contentWrapperId, element).html("");
            if (data.WeekAvailabilities.length === 0) {
                $(contentWrapperId, element).html('<p class="text-center">' + data.ErrorMessageWhenNoDaysAvailable + "</p>");
            }

            $.each(data.WeekAvailabilities, function (index, item) {

                var textColor = "text-primary";
                var buttonTagOpen = '<button type="button" class="dateLink list-group-item" data-date=' + item.ShortDate + '>';

                var buttonTagClose = '</button>';

                var rightArrowIcon = '<i class="fa fa-3x fa-arrow-circle-o-right" aria-hidden="true"></i>';
                var leftContent = '<span class="pull-left ' + textColor + '"><b>' + item.DayOfDate + '</b><br/> ' + item.DateLabel + '</span>';
                var rightContent = '<span class="pull-right ' + textColor + '">' + rightArrowIcon + '</span>';

                $(contentWrapperId, element).append(buttonTagOpen + rightContent + leftContent + buttonTagClose);

            });

            $(".dateLink", element).unbind("click").on("click", function (e) {
                e.preventDefault();
                onSelectedDate($(this).data("date"));
            });

            $(".wrap-schedule", element).animate({
                scrollTop: 0
            }, "slow");
        }, null);

    },
    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        submitDataWithoutLoader({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type")
        }, self.form.data("time-url"), function (data) {
            $("#headTitle", self.Element).html('');
            $("#timeList", self.Element).html('');
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + '</h3>' +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + '</p>');

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + ' data-date=' + selectedDate + '>' + item.AvailableTime + '</button>');
            });

            $("#WeekView", self.Element).addClass("hidden");
            $("#TimeView", self.Element).removeClass("hidden");

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back();
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    },

    PopulateForm: function (time, selectDate) {
        var self = this;

        $("#errorPane").hide();
        self.form.find('#generatedForm').html("");
        self.form.find('#generatedForm').append('<input type="hidden" name="startHour" value="' + time + '" />');
        self.form.find('#generatedForm').append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    self.form.find('#generatedForm').append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    self.form.find('#generatedForm').append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    self.form.find('#generatedForm').append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');
                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    self.form.find('#generatedForm').append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                self.form.find('#generatedForm').append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
            });
        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#errorPane").hide();
        self.ModalDialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("create-url"), function (data) {

                showInfoDialog(data.InformationMessage, function () {
                    $("#miniMockTestMenu").click();
                });

                $("#TotalAppointment").val(data.TotalAppointment);
                $("#NumberOfTutorial").val(data.NumberOfTutorial);

            }, self.ModalDialog.modal.bind(self.ModalDialog, "show"));

        }, function () {
            self.ModalDialog.modal("show");
        }, function () {
            self.ModalDialog.modal("show");
        });
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        self.MakeAppointment(time, selectDate);

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    }
};
var StudentIeltsGeneralMiniMockTestAppointmentEditDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#appointmentEditBookForm", this.Element);
    this.ModalDialog = this.Element.closest(".modal");
}

StudentIeltsGeneralMiniMockTestAppointmentEditDialog.prototype = {
    constructor: StudentIeltsGeneralMiniMockTestAppointmentEditDialog,
    Register: function () {
        var self = this;

        self.LoadWeek();
        self.ModalDialog.modal();

        $("#btnCancel", self.Element)
            .off("click")
            .on("click", function () {
                if (typeof self.Caller.ReloadModal === "function") {
                    self.Caller.ReloadModal();
                }
            });

        $(".close", self.Element)
            .off("click")
            .on("click", function () {
                if (typeof self.Caller.ReloadModal === "function") {
                    self.Caller.ReloadModal();
                }
            });

    },

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + "</h2>");
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + "</h2>");

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format"))
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });
    },

    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type")
        }, self.form.data("time-url"), function (data) {
            $("#headTitle", self.Element).html("");
            $("#timeList", self.Element).html("");
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + "</h3>" +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + "</p>");

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + " data-date=" + selectedDate + ">" + item.AvailableTime + "</button>");
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back();
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");
        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

    },

    PopulateForm: function (time, selectDate) {
        var self = this;
        var generatedForm = self.form.find("#generatedForm");

        $("#errorPane").hide();
        generatedForm.html("");
        generatedForm.append('<input type="hidden" name="startHour" value="' + time + '" />');
        generatedForm.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    generatedForm.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');
                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    generatedForm.append('<input type="hidden" name="checkboxAnswer_' + index + "_" + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = "answerType_" + index + "_" + questionId + "";
                $("input[name=" + name + "]").remove();
                generatedForm.append('<input type="hidden" name="answerType_' + index + "_" + questionId + '" value="' + $(this).val() + '" />');
            });
        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#errorPane").hide();
        self.ModalDialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("edit-url"), function (data) {
                showInfoDialog(data.Value.InformationMessage, function () {
                    $("#miniMockTestMenu").click();
                });

            }, self.ModalDialog.modal.bind(self.ModalDialog, "show"));

        }, function () {
            self.ModalDialog.modal("show");
        }, function () {
            self.ModalDialog.modal("show");
        });
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        self.MakeAppointment(time, selectDate);

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    }
}
;
var StudentIeltsGeneralMiniMockTestGridAppointmentDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.IsReloadModal = false;
    this.ModalDialog = this.Element.closest(".modal");
}

StudentIeltsGeneralMiniMockTestGridAppointmentDialog.prototype = {
    constructor: StudentIeltsGeneralMiniMockTestGridAppointmentDialog,
    Register: function () {
        hideProcessingDialog();

        var self = this;
        self.ModalDialog.modal('show');
        var grid = $("#gridAppointment");

        self.LoadGrid(grid);

        self.ModalDialog.on("hidden.bs.modal", function (e) {
            if (self.IsReloadModal) {
                self.IsReloadModal = false;
            }
        });

        $("#btnAdd", self.Element).on("click", function () {
            $("#errorPane").remove();
            var maintenanceDiv = $("#appointmentWrapper");
            var url = grid.data("book-url");

            loadApplicationContent(url, "GET", function (data) {
                maintenanceDiv.html(grid.data("error-pane"));
                maintenanceDiv.append(data);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application(maintenanceDiv, namespace);
                apps.RegisterWithCaller(self);
            });
        });
    },

    ReloadModal: function () {
        var self = this;
        var total = $("#TotalAppointment").val();
        var max = $("#NumberOfAppointment").val();

        self.ModalDialog.modal('show');

        if (total !== "" || max !== "") {
            if (total >= max) {
                $("#btnAdd").remove();
            }

            var infoMessage = $("#gridAppointment").data("info-message");
            infoMessage = infoMessage.replace("{0}", total);
            infoMessage = infoMessage.replace("{1}", max);

            $("#info-total").html(infoMessage);
        }
        $("#gridAppointment").bootgrid("reload");

    },

    LoadGrid: function (grid) {
        var self = this;
        $("#errorPane").hide();
        $("#errorPane").empty();

        grid.bootgrid({
            ajax: true,
            post: function () {
            },
            url: grid.data("url"),
            formatters: {
                "Action": function (column, row) {
                    var html = "";

                    if (row.Status === "Open" && row.IsValidToCancel) {
                        html = '<a href="#" class="actionReschedule" id="' + row.Id + '" " ' +
                            'data-toggle="tooltip" data-appointment-startdate="' + row.AppointmentStartDateTime + '" data-appointment-date="' + row.AppointmentDate + '" data-appointment-time="' + row.Time + '" data-placement="top" ' +
                            'title="' + grid.data("reschedule-tooltip") + '">' +
                            '<i class="fa fa-exchange" aria-hidden="true"></i>' +
                            '</a>';

                        html += '&nbsp;&nbsp;<a href="#" class="actionCancelAppointment" data-id="' + row.Id + '" " ' +
                            'data-toggle="tooltip" data-appointment-startdate="' + row.AppointmentStartDateTime + '" data-appointment-date="' + row.AppointmentDate + '" data-appointment-time="' + row.Time + '" data-placement="top" ' +
                            'title="' + grid.data("cancel-appointment-tooltip") + '">' +
                            '<i class="fa fa-trash" aria-hidden="true"></i>' +
                            '</a>';
                    }

                    return html;
                }
            }
        }).on("loaded.rs.jquery.bootgrid", function () {
            $('[data-toggle="tooltip"]').tooltip();

            $(".actionReschedule", self.Element).on("click", function () {
                var btnElement = $(this);

                self.ModalDialog.modal("hide");

                submitData({
                    "startDateTime": $(this).data("appointment-startdate"),
                    "appointmentType": grid.data("appointment-type")
                }, grid.data("different-url"), function (data) {
                    if (data.IsLessThan24Hour) {
                        showInfoDialog(data.Message, function () {
                            self.ModalDialog.modal("show");
                        });
                    } else { self.Reschedule(btnElement, grid); }
                });
            });

            $(".actionCancelAppointment", self.Element).on("click", function () {

                self.ModalDialog.modal("hide");

                var appointmentStartDate = $(this).data("appointment-startdate");
                var appointmentId = $(this).data("id");

                submitData({
                    "startDateTime": appointmentStartDate,
                    "appointmentType": grid.data("appointment-type")
                }, grid.data("different-url"), function (data) {
                    if (data.IsLessThan24Hour) {
                        showInfoDialog(data.MessageCancel, function () {
                            self.ModalDialog.modal("show");
                        });
                    } else {
                        var url = grid.data("cancel-url");
                        url += "?appointmentId=" + appointmentId;

                        submitNonForm(grid.data("delete-message"), url, function (data) {
                            self.ModalDialog.modal("hide");
                            showInformation(grid.data("appointment-cancel"));
                            self.IsReloadModal = true;

                            $("#miniMockTestMenu").click();
                        }, function () {
                            self.ModalDialog.modal("show");
                        });
                    }
                });
            });
        });
    },

    Reschedule: function (element, grid) {
        var self = this;
        var id = element.attr('id');
        var appointmentDate = element.data('appointment-date') + " " + element.data('appointment-time');

        var message = grid.data("change-message");
        message = message.replace("[DATE TIME]", appointmentDate);
        message = message.replace("[APPOINTMENT TYPE]", "appointment");

        showConfirmationDialog(message,
            function () {
                $("#errorPane").remove();
                var maintenanceDiv = $("#appointmentWrapper");
                var url = grid.data("edit-url");
                url += '?id=' + id;

                showPartialViewAsync(url, true)
                    .done(function (data) {

                        var afterHideProcessingDialog = function () {
                            maintenanceDiv.html(grid.data("error-pane"));
                            maintenanceDiv.append(data);

                            var helper = new Helper();
                            var namespace = helper.CreateNameSpaceFromURL(url);
                            var apps = new Application(maintenanceDiv, namespace);
                            apps.RegisterWithCaller(self);
                        };

                        hideProcessingDialog(afterHideProcessingDialog);

                    }).fail(function (data) {
                    });
            }, function () { self.ModalDialog.modal("show"); }
             , function () { self.ModalDialog.modal("show"); });
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    }
}
;
(function ($, window) {
    "use strict";

    // Private Functions

    function initEventHandler() {
        var self = this;

        var eventHandler = {
            btnStartClick: function (e) {
                e.preventDefault();
                closeErrorPane();

                var element = $(this);
                var url = element.data("url") +
                    "?mockTestId=" +
                    element.data("mock-test-id");
                showPopup(url);
            },
            viewScoreReportBtnClick: function (e) {
                e.preventDefault();
                closeErrorPane();

                var element = $(this);
                var url = element.data("url") +
                    "?mockTestId=" +
                    element.data("mock-test-id");
                showPopup(url);
            },
            buyAddOnsBtnClick: function (e) {
                e.preventDefault();

                showLoadingDialog();
                var url = $(this).data("payment-url");

                if (url !== "") {
                    $.get(url, function (contentData) {
                        $('#mainUserContent').html(contentData);
                        hideLoadingDialog();

                        var helper = new Helper();
                        var namespace = helper.CreateNameSpaceFromURL(contentUrl);
                        var apps = new Application($('#mainUserContent'), namespace);
                        apps.Register();
                    });
                }
            },
            scoreSummaryBtnClick: function (e) {
                e.preventDefault();
                var element = $(this);
                var url = element.data("url");
                var container = $("#mainUserContent");

                loadApplicationContent(url, "GET",
                    function (result) {
                        container.html(result);
                    });
            },
            bookAppointmentBtnClick: function (e) {
                e.preventDefault();
                var maintenanceDiv = $("#appointmentWrapper");
                var appointmentUrl = $(this).data("appointment-url");

                generateApplicationDialog.call(self, appointmentUrl, maintenanceDiv);
            },
            viewAppointmentBtnClick: function (e) {
                e.preventDefault();
                var maintenanceDiv = $("#gridAppointmentWrapper");
                var appointmentUrl = $(this).data("grid-appointment-url");

                generateApplicationDialog.call(self, appointmentUrl, maintenanceDiv);
            },
            answerDetailLinkClick: function () {
                var mockTestQuestionId = $(this).data("mock-test-question-id");
                var url = $(this).data("url") + "?mockTestQuestionId=" + mockTestQuestionId;
                showPopup(url);
            }
        };

        $("#btnStart")
            .off("click")
            .on("click", eventHandler.btnStartClick)

        $("#btnViewScoreReport")
            .off("click")
            .on("click", eventHandler.viewScoreReportBtnClick);

        $("#btnBuyAddOns")
            .off("click")
            .on("click", eventHandler.buyAddOnsBtnClick);

        $("#btnScoreSummary")
            .off("click")
            .on("click", eventHandler.scoreSummaryBtnClick);

        $("#btnBookAppointment")
            .off("click")
            .on("click", eventHandler.bookAppointmentBtnClick);

        $("#btnViewAppointment")
            .off("click")
            .on("click", eventHandler.viewAppointmentBtnClick);

        $('.answerDetailLink')
            .click(eventHandler.answerDetailLinkClick);
    }

    function generateApplicationDialog(url, maintenanceDiv) {
        var self = this;

        $("#errorPane").remove();
        maintenanceDiv.html("");

        $.get(url,
            function (data) {
                maintenanceDiv.html('');
                maintenanceDiv.append(data);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application(maintenanceDiv, namespace);
                apps.RegisterWithCaller(self);

            });
    }

    function getAnswerReport() {
        var self = this;
        var url = self.AnswerReportPanel.data("url");

        self.AnswerReportPanel.html('<span class="icon fa fa-refresh fa-spin"></span> ' + self.AnswerReportPanel.data("loading-message"));

        showPartialViewAsync(url)
            .then(function (data) {
                self.AnswerReportPanel.html(data);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application(self.AnswerReportPanel, namespace);
                apps.RegisterWithCaller(self);

                scrollToElement("viewMessage");
                hideLoadingDialog();
            });
    }


    // Constructor
    var studentIeltsGeneralMiniMockTestIndex = function (element) {
        this.Element = element;
        this.AnswerReportPanel = $("#answerReportPanel");
    }

    studentIeltsGeneralMiniMockTestIndex.prototype = {
        constructor: studentIeltsGeneralMiniMockTestIndex,
        Register: function () {
            var self = this;

            initEventHandler.call(self);
            getAnswerReport.call(self);
        }
    }


    // Export javascript class into window environment
    window.StudentIeltsGeneralMiniMockTestIndex = studentIeltsGeneralMiniMockTestIndex;
})(jQuery, window);;
var StudentIeltsGeneralMiniMockTestView = function (element) {
    this.Element = element;
    this.MaintenanceForm = null;
    this.CountDown = null;
    this.CurrentGroupSectionIndex = null;
    this.CurrentGroupName = null;
    this.CurrentSectionId = null;
    this.CurrentSectionName = null;
    this.BeforePlayAudioCountDown = null;
    this.LastHighlight = null;
    this.E2Logger = new E2Logger();
    this.Message = {
        WordLimitMessage: "",
        WritingTimeOut: "",
        ListeningTimeOut: "",
        ReadingTimeOut: ""
    };
    this.SectionGroupCode = {
        Listening: "",
        Writing: "",
        Speaking: "",
        Reading: ""
    };
};


StudentIeltsGeneralMiniMockTestView.prototype = {
    constructor: StudentIeltsGeneralMiniMockTestView,
    Register: function () {
        var self = this;

        self.E2Logger.InitializeMockTestLogger(self.Element);
        self.Initialize();

        $(".collapse").on("hide.bs.collapse", function () {
            var contentIelts = $(this).parents(".wrapper-section").find(".panelContent");
            if (contentIelts.length !== 0) {
                contentIelts.addClass("collapsibleActive")
                contentIelts.removeClass("collapsibleInactive")
            }
        });
        $(".collapse").on("show.bs.collapse", function () {
            var contentIelts = $(this).parents(".wrapper-section").find(".panelContent");
            if (contentIelts.length !== 0) {
                contentIelts.removeClass("collapsibleActive")
                contentIelts.addClass("collapsibleInactive")
            }
        });
    },
    Initialize: function () {
        var self = this;

        var currentGroupSection = $('div[class^="wrapper-section"]:not(.mmt-hide-panel)');
        self.CurrentGroupSectionIndex = currentGroupSection.data("group-index");
        self.CurrentGroupName = currentGroupSection.data("group-name");

        var currentSection = currentGroupSection.find('div[class^="panelSection"]:not(.mmt-hide-panel)');
        self.CurrentSectionId = currentSection.data("section-id");
        self.CurrentSectionName = currentSection.data("section-name");

        $(".wrapper-section")
            .each(function () {
                var wrapper = $(this);
                self._initializeQuestionPalette.callWithLog(self, wrapper);
                self._initializeSectionNavigateButton.callWithLog(self, wrapper);
                self._initializeDragAndDrop.callWithLog(self, wrapper);
                self._initializeHighlight.callWithLog(self, wrapper);
                self._dropDownListChangeHandler.callWithLog(self, wrapper);
                self._textBoxChangeHandler.callWithLog(self, wrapper);
                self._radioButtonChangeHandler.callWithLog(self, wrapper);
                self._checkBoxChangeHandler.callWithLog(self, wrapper);
                self._inputTextAreaChangeHandler.callWithLog(self, wrapper);
                self._prepareTimer.callWithLog(self, wrapper);

            });
        self._initializeSectionSubmitButton.callWithLog(self);
        self._initializeSectionStartButton.callWithLog(self);
        self._initializeCloseButton.callWithLog(self);
        self._initializeWordCount.callWithLog(self);
        self._initializeHighlightBar.callWithLog(self);
        self._refreshPageWrapper.callWithLog(self);
    },
    GoTo: function (groupSectionWrapper, targetSectionId, currentSectionId) {
        var self = this;
        var currentSection = $(groupSectionWrapper.find(".panelSection").filter("[data-section-id='" + currentSectionId + "']"));
        var targetSection = $(groupSectionWrapper.find(".panelSection").filter("[data-section-id='" + targetSectionId + "']"));

        var validateTextAreaResult = self._validateTextArea(currentSection);

        if (validateTextAreaResult.includes(false)) {
            return;
        }

        if (targetSection.length) {
            currentSection.hide();
            targetSection.show();

            self.CurrentSectionId = targetSectionId;
            $(".formatbar").hide();
        }
    },
    SetFocus: function (groupSectionWrapper, question) {
        var inputEl;
        if (groupSectionWrapper.find("#question-" + question).find(".form-control").length) {
            inputEl = groupSectionWrapper.find("#question-" + question).find(".form-control");
        }
        else if (groupSectionWrapper.find("#question-" + question).find("input").length) {
            inputEl = groupSectionWrapper.find("#question-" + question).find("input")[0];
        }
        else if (groupSectionWrapper.find("#question-" + question + " .sentence-text").length) {
            inputEl = groupSectionWrapper.find("#question-" + question + " .sentence-text")[0];
            $(inputEl).attr("tabIndex", "0");
        }
        else if (groupSectionWrapper.find("#question-" + question).length) {
            inputEl = groupSectionWrapper.find("#question-" + question)[0];
            $(inputEl).attr("tabIndex", "0");
        }
        else {
            return;
        }

        inputEl.focus();
    },
    SaveAnswer: function (formName, currGroupIndex, nextGroupIndex) {
        var self = this;
        self.StopAudio.callWithLog(self);

        var url = $("#" + formName + " .wrapper-section").data("save-url");
        self._constructSubmitData.callWithLog(self, formName);

        submitFormOverride("#" + formName,
            url,
            function (data) {
                if (data.IsSuccess) {
                    var currSectionGroup = $("#section-group-" + currGroupIndex);
                    var nextSectionGroup = $("#section-group-" + nextGroupIndex);
                    if (nextSectionGroup.length) {
                        self.CurrentGroupSectionIndex = nextGroupIndex;
                        self.CurrentGroupName = nextSectionGroup.data("group-name");

                        $(currSectionGroup).hide();
                        $(nextSectionGroup).show();

                        var currentSection = nextSectionGroup.find('div[class^="panelSection"]:not(.mmt-hide-panel)');
                        self.CurrentSectionId = currentSection.data("section-id");
                        self.CurrentSectionName = currentSection.data("section-name");

                        self._prepareTimer.callWithLog(self, nextSectionGroup);
                        self.ClearIntervalBeforePlayAudio.callWithLog(self);
                        self.PrepareAudio.callWithLog(self, nextSectionGroup);
                    }
                    else {
                        $(".page-main-activity").empty();
                        $("#SubmittedView").show();
                        $("#SubmittedMessage").html(data.Value.Message);

                        self._updateParentActivityPanel.callWithLog(self, data);
                    }

                    self._refreshPageWrapper.callWithLog(self);
                    $(".formatbar").hide();
                }
                else {
                    showInfoDialog(data.MessageErrorTextArray);
                    clearInterval(self.CountDown);

                    $("#" + formName)
                        .find("*")
                        .attr("disabled", "disabled")
                        .addClass("disabled");
                }
            });
    },
    StopAudio: function () {
        var sounds = $(".audio-player");
        var i;
        for (i = 0; i < sounds.length; i++) sounds[i].pause();
    },

    ClearIntervalBeforePlayAudio: function () {
        var self = this;
        clearInterval(self.BeforePlayAudioCountDown);
    },
    PrepareAudio: function (wrapper) {
        var self = this;
        initAudioPlayerWidget(wrapper.find("#audioPlayerPanel"));
        self._startAudio.callWithLog(self, wrapper);
    },
    _startAudio: function (wrapper) {
        var self = this;
        var timerNumber = 0;

        self.BeforePlayAudioCountDown = setInterval(function () {
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                $(".audioPlayer", wrapper).removeClass("disabled-audio");
                self._stopBeforePlayAudioCountdown.callWithLog(self, wrapper);
            }
        },
            1000);

        self._audioPlayerHandle.callWithLog(self, wrapper);
    },
    _audioPlayerHandle: function (wrapper, onPlay, onEnded) {
        var self = this;
        var audioPlayerEl = wrapper.find("#audioPlayerPanel audio");

        if (audioPlayerEl.length === 0) {
            return;
        }

        self.IsAudioPlayed = false;

        audioPlayerEl.off("play").on('play', function () {
            if (self.IsAudioPlayed || self.BeforePlayAudioCountDown !== null) {
                this.pause();
                return;
            }

            if (typeof onPlay === "function") {
                onPlay($(this));
            }
        });

        audioPlayerEl.off("ended").on('ended', function () {
            if (self.IsAudioPlayed) {
                return;
            }

            self.IsAudioPlayed = true;
            if (typeof onEnded === "function") {
                onEnded();
            }
        });
    },
    _stopBeforePlayAudioCountdown: function (wrapper) {
        var self = this;
        var audioPlayerEl = wrapper.find("#audioPlayerPanel audio");
        var id = audioPlayerEl.prop("id");

        if (audioPlayerEl.length) {
            document.getElementById(id).play();
            document.getElementById(id).muted = false;
        }
        if (self.BeforePlayAudioCountDown !== undefined || self.BeforePlayAudioCountDown !== null) {
            clearInterval(self.BeforePlayAudioCountDown);
            self.BeforePlayAudioCountDown = null;
        }
    },
    _prepareTimer(wrapper) {
        var self = this;
        if (wrapper.data("group-index") !== self.CurrentGroupSectionIndex) {
            return;
        }

        if (self.CountDown !== undefined) {
            clearInterval(self.CountDown);
        }

        var duration = 0;
        var durationPanel = wrapper.find(".timer-duration-panel");
        if (durationPanel.length) {
            duration = durationPanel.data("duration");
        }

        if (duration !== 0) {
            var timerId = durationPanel.prop("id");

            interval = setInterval(function () {
                DynamicTimerWithoutPopup("#" + timerId, "",
                    function () { self._timeOut.callWithLog(self, wrapper); });
            },
                1000);
            self.CountDown = interval;
        }
    },
    _initializeSectionSubmitButton() {
        var self = this;
        $(".submit-btn")
            .click(function () {
                var el = $(this);

                var sectionForm = el.data("form-id");
                var currGroupIndex = parseInt(el.data("group-index"));
                var nextGroupIndex = currGroupIndex + 1;
                var currWrapper = $("#section-group-" + currGroupIndex);
                var message = currWrapper.data("confirmation-message");
                var timer = currWrapper.find(".timer-duration-panel").html();
                var currentSectionEl = currWrapper.find("div[data-section-id='" + self.CurrentSectionId + "']");

                var validateTextAreaResult = self._validateTextArea(currentSectionEl);

                if (validateTextAreaResult.includes(false)) {
                    return;
                }

                if (timer !== '00:00') {
                    showYesNoConfirmationDialog(message,
                        function () {
                            self.SaveAnswer.callWithLog(self, sectionForm, currGroupIndex, nextGroupIndex);
                        },
                        function () { return; }
                    );
                }
                else {
                    self.SaveAnswer.callWithLog(self, sectionForm, currGroupIndex, nextGroupIndex);
                }
            });
    },
    _initializeSectionStartButton() {
        var self = this;
        $(".start-btn")
            .click(function () {
                var el = $(this);

                var currGroupIndex = parseInt(el.data("group-index"));
                var nextGroupIndex = currGroupIndex + 1;

                var currSectionGroup = $("#section-group-" + currGroupIndex);
                var nextSectionGroup = $("#section-group-" + nextGroupIndex);
                if (nextSectionGroup.length) {
                    self.CurrentGroupSectionIndex = nextGroupIndex;
                    self.CurrentGroupName = nextSectionGroup.data("group-name");

                    var currentSection = nextSectionGroup.find('div[class^="panelSection"]:not(.mmt-hide-panel)');
                    self.CurrentSectionId = currentSection.data("section-id");
                    self.CurrentSectionName = currentSection.data("section-name");

                    $(currSectionGroup).hide();
                    $(nextSectionGroup).show();

                    self.ClearIntervalBeforePlayAudio.callWithLog(self);
                    self.PrepareAudio.callWithLog(self, nextSectionGroup);

                    self._prepareTimer.callWithLog(self, nextSectionGroup);
                    self._refreshPageWrapper.callWithLog(self);
                }
            });
    },
    _initializeCloseButton() {
        var self = this;
        $(".closeButton")
            .click(function () {
                window.close();
            });
    },
    _initializeDragAndDrop(wrapper) {
        var uniqueAnswerIds = new Array();

        function isInArray(value, array) {
            return array.indexOf(value) > -1;
        }

        wrapper.find(".draggable")
            .draggable({
                helper: "clone",
                revert: function () {
                    if ($(this).hasClass("drag-revert")) {
                        return true;
                    }
                },
                scroll: 'true'
            });

        wrapper.find(".droppable")
            .droppable({
                accept: ".draggable",
                tolerance: 'pointer',
                drop: function (e, ui) {
                    var answerId = $(ui.draggable).data("answerid");
                    var sortingIndex = $(ui.draggable).data("sortingindex");
                    var sentenceKey = $(ui.draggable).data("sentencekey");
                    var mockTestQuestionId = $(ui.draggable).data("mocktestquestionid");
                    var orderParagraphId = $(ui.draggable).data("orderparagraphid");
                    var sectionType = $(ui.draggable).data("sectiontype");
                    if ((uniqueAnswerIds.length === 0 || isInArray(answerId, uniqueAnswerIds) === false)) {
                        if ($(this).find(".remove-sentence").hasClass("hidden") &&
                            !$(this).hasClass("correct-answer")) {
                            var content = $(this);

                            $(this)
                                .find(".remove-sentence")
                                .click(function (e) {
                                    e.preventDefault();
                                    content.find(".sentence-text").html("");
                                    content.find(".remove-sentence").addClass("hidden");
                                    $("#draggable-" + $(this)[0].dataset["answerid"]).removeClass("hidden");
                                    var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                    uniqueAnswerIds.splice(index, 1);
                                    $(this).parents(".question-container").data("answerid", "");

                                    var questionLabel = content.data("question-label");
                                    var circleEl = wrapper.find("#circle-" + questionLabel);

                                    if (circleEl.length === 0) {
                                        return;
                                    }

                                    circleEl.removeClass("answered").addClass("unanswered");
                                });
                            if ($(this).data("answerid") !== "") {
                                var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                uniqueAnswerIds.splice(index, 1);
                            }
                            $(this).data("answerid", answerId);
                            $(this).data("sortingindex", sortingIndex);
                            $(this).data("sentencekey", sentenceKey);
                            $(this).data("mocktestquestionid", mockTestQuestionId);
                            $(this).data("orderparagraphid", orderParagraphId);
                            $(this).data("sectiontype", sectionType);
                            $(this).find(".sentence-text").html($(ui.draggable).html());
                            $(this).find(".remove-sentence").removeClass("hidden")
                                .attr("data-answerid", answerId);

                            $("#draggable-" + answerId).addClass("hidden");

                            uniqueAnswerIds.push($(this).data("answerid"));

                            var questionLabel = content.data("question-label");
                            var circleEl = wrapper.find("#circle-" + questionLabel);

                            if (circleEl.length === 0) {
                                return;
                            }
                            circleEl.removeClass("unanswered").addClass("answered");

                            return $(ui.draggable).removeClass("drag-revert");
                        } else {
                            $("#draggable-" + answerId).removeClass("hidden");
                            return $(ui.draggable).addClass("drag-revert");
                        }
                    }
                }
            });
    },
    _initializeSectionNavigateButton(wrapper) {
        var self = this;
        wrapper.find(".section-btn .btn")
            .click(function () {
                var el = $(this);
                var currentSectionName = el.data("current-section-name");
                var targetSectionName = el.data("target-section-name");

                var currentSectionId = wrapper.find("#section-" + currentSectionName).data("section-id");
                var targetSectionId = wrapper.find("#section-" + targetSectionName).data("section-id");

                self.GoTo.callWithLog(self, wrapper, targetSectionId, currentSectionId);
            });
    },
    _initializeQuestionPalette(wrapper) {
        var self = this;
        wrapper.find(".question-palette-pane .circle-question-palette")
            .click(function () {
                var el = $(this);
                var question = el.data("question");
                var sectionId = el.data("section-id");

                if (sectionId !== self.CurrentSectionId) {
                    self.GoTo.callWithLog(self, wrapper, sectionId, self.CurrentSectionId);
                }

                self.SetFocus.callWithLog(self, wrapper, question);
            });

    },
    _initializeWordCount() {
        $(".wordCount").html('0');
    },
    _initializeHighlightBar() {
        var self = this;
        $(".highlighter").click(function (e) {
            e.preventDefault();
            var css = $(e.currentTarget).data("css");
            self._highlightText.callWithLog(self, css);
        });

        $(".unhighlight").click(function (e) {
            e.preventDefault();
            self._unHighlightText.callWithLog(self);
        });
    },
    _initializeHighlight(wrapper) {
        var self = this;
        wrapper.find(".selectable-text").off("mouseup").on("mouseup", function (n) {
            var el = $(n.target);

            if (!el.hasClass("dragdrop") && !el.hasClass("form-control")) {
                var parentEl = el.parents(".content-panel");
                self._markSelection.callWithLog(self, parentEl);
                n.target.tagName === "SPAN" && n.target.className.includes("highlight") && (self.LastHighlight = n.target);
            }
            else {
                $(".formatbar").hide();
            }
        });
    },
    _markSelection(wrapper) {
        $(".formatbar").hide();
        var i = "﻿",
            r = "&#xfeff;",
            n, t = "sel_" + (new Date).getTime() + "_" + Math.random().toString().substr(2);
        var u, f;
        if (document.selection && document.selection.createRange ? (f = document.selection.createRange().duplicate(), f.collapse(!1), f.pasteHTML('<span id="' + t + '" style="position: relative;">' + r + "<\/span>"), n = document.getElementById(t)) : window.getSelection && (u = window.getSelection(), u.getRangeAt ? u.rangeCount > 0 && (f = u.getRangeAt(0).cloneRange()) : (f.setStart(u.anchorNode, u.anchorOffset), f.setEnd(u.focusNode, u.focusOffset), f.collapsed !== u.isCollapsed && (f.setStart(u.focusNode, u.focusOffset), f.setEnd(u.anchorNode, u.anchorOffset))), u.toString() !== "" && u.toString() !== " " && (f.collapse(!0), n = document.createElement("span"), n.id = t, n.appendChild(document.createTextNode(i)), f.insertNode(n))), n) {
            u.toString() !== "" && wrapper.find(".formatbar").show();
            var s = n;
            var left = 0;
            var top = 0;

            typeof viewAnswerMode === "undefined" ? (left += s.offsetLeft, top += s.offsetTop) : (left += $(s).offset().left - $(".selectable-text").offset().left, top += $(s).offset().top - $(".selectable-text").offset().top);
            top = top - 38;
            if ($(s).parents(".question.selectable-text").length) {
                var currTop = $(s).parents(".question.selectable-text")[0].offsetTop;
                var currLeft = $(s).parents(".question.selectable-text")[0].offsetLeft;
                top = top + currTop;
                left = left + currLeft;
            } else if ($(s).parents("table").length) {
                var tableTop = $(s).parents("table")[0].offsetTop;
                var tableLeft = $(s).parents("table")[0].offsetLeft;

                var colTop = $(s).parents("td")[0].offsetTop;
                var colLeft = $(s).parents("td")[0].offsetLeft;

                top = top + tableTop + colTop;
                left = left + tableLeft + colLeft;
            }
            typeof extraHeightCom !== "undefined" && (top = top + extraHeightCom);

            wrapper.find(".formatbar").css("top", top).css("left", left);
            n.parentNode && n.parentNode.removeChild(n);

        }
    },
    _getSelectedText() {
        var text = "";
        return window.getSelection ? text = window.getSelection() : document.getSelection ? text = document.getSelection() : document.selection && (text = document.selection.createRange().text), text;
    },
    _getSelectedHtml() {
        var self = this;
        var html = "";
        if (typeof window.getSelection !== "undefined") {
            var sel = window.getSelection();
            if (sel.rangeCount) {
                var container = document.createElement("div");
                for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                    var range = sel.getRangeAt(i);
                    var fragment = range.cloneContents();
                    container.appendChild(fragment);
                    self._unHighlightChildElement.callWithLog(self, $(container));
                }
                html = container.innerHTML;
            }
        } else if (typeof document.selection !== "undefined") {
            if (document.selection.type === "Text") {
                html = document.selection.createRange().htmlText;
            }
        }
        return html;
    },
    _highlightText(className) {
        var self = this;
        var r = self._getSelectedText(),
            u = self._getSelectedHtml(),
            t, i;
        if (u !== "") {
            i = r.getRangeAt(0);
            if ($(i.commonAncestorContainer).is("span[class^='highlight']")) {
                if ($(i.commonAncestorContainer).html() === u) {
                    $(i.commonAncestorContainer).attr("class", className);
                    document.getSelection().removeAllRanges();
                    return;
                }
            }
            t = document.createElement("SPAN");
            t.className = className;
            t.innerHTML = u;
            i.deleteContents();
            i.insertNode(t);
            self.LastHighlight = t;
            $(".formatbar").hide();

            document.getSelection().removeAllRanges();
        };
    },
    _unHighlightText() {
        var self = this;
        var range = window.getSelection().getRangeAt(0);
        var node = $(range.commonAncestorContainer);
        var content = self._getSelectedHtml();

        var spanTag = document.createElement("span");
        spanTag.className = "highlight-transparent";
        spanTag.innerHTML = content;

        range.deleteContents();
        range.insertNode(spanTag);

        var parents = $(spanTag).parents("span[class^='highlight']");
        if (parents.length !== 0) {

            var topParent = $(parents[parents.length - 1]);
            var parentContent = topParent.wrap("</p>").parent().html();
            topParent.unwrap();

            var contentReplacement = self._generateHighlightContentReplacement(content, parents);

            parentContent = parentContent.replace('<span class="highlight-transparent">' + content + '</span>', contentReplacement);
            topParent.replaceWith(parentContent);
        }

        node.find("span.highlight-transparent").each(function () {
            var html = $(this).html();
            $(this).replaceWith(html);
        });

        $(".formatbar").hide();

        self._initializeHighlight.callWithLog(self, $(range.commonAncestorContainer).closest(".wrapper-section"));
    },
    _generateHighlightContentReplacement: function (content, parents) {
        var self = this;

        var spanClasses = [];

        parents.each(function (index, row) {
            spanClasses.push($(row).attr("class"));
        });

        var spanCloseTag = spanClasses.map(item => { return '</span>' }).join('');
        var spanOpenTag = spanClasses.slice(0).reverse().map(item => { return '<span class="' + item + '">' }).join('');

        return spanCloseTag + content + spanOpenTag;
    },
    _unHighlightChildElement: function (element) {
        var self = this;
        element.find("span[class^='highlight']").each(function () {

            if ($(this).find("span[class^='highlight']").length !== 0) {
                self._unHighlightChildElement.callWithLog(self, $(this));
            }

            var children = $(this).html();
            $(this).replaceWith(children);
        });
    },
    _dropDownListChangeHandler(wrapper) {
        wrapper.find("select").change(
            function () {
                var selectEl = $(this);
                var selectedOption = selectEl.find("option:selected");
                var questionLabel = selectedOption.parents(".question-container").data("question-label");
                var circleEl = wrapper.find("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }

                if (selectedOption.index() === 0 || selectedOption.text() === "" || selectedOption.text() === "-") {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
                else {
                    circleEl.removeClass("unanswered").addClass("answered");
                }

            });
    },
    _textBoxChangeHandler(wrapper) {
        wrapper.find("input[type=text]").bind("keyup change",
            function () {
                var element = $(this);
                var questionLabel = element.parents(".question-container").data("question-label");
                var circleEl = wrapper.find("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }
                if (element.val().trim() === "") {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
                else {
                    circleEl.removeClass("unanswered").addClass("answered");
                }
            });
    },
    _radioButtonChangeHandler(wrapper) {
        wrapper.find("input[type=radio]")
            .change(function () {
                var element = $(this);
                var questionLabel = element.parents(".question-container").data("question-label");
                var circleEl = wrapper.find("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }
                if (element.value !== null) {
                    circleEl.removeClass("unanswered").addClass("answered");
                }
                else {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
            });
    },
    _checkBoxChangeHandler(wrapper) {
        wrapper.find("input[type=checkbox]")
            .change(function () {
                var element = $(this);
                var questionContainer = element.parents(".question-container");
                var questionLabel = questionContainer.data("question-label");
                var circleEl = wrapper.find("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }

                var totalChecked = questionContainer.find("input:checkbox:checked").length;
                var maxCheckedAnswer = questionContainer.data("max-answer");

                if (totalChecked > maxCheckedAnswer) {
                    $(this).prop("checked", false);
                    return;
                }

                if (totalChecked > 0) {
                    circleEl.removeClass("unanswered").addClass("answered");
                } else {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
            });
    },
    _inputTextAreaChangeHandler(wrapper) {
        var self = this;
        wrapper.find("textarea").bind("keyup change",
            function () {
                var element = $(this);

                var maxWord = element.data("max-word");
                var value = element.val();
                var questionPanel = element.parents(".panelQuestion");
                if (questionPanel.find(".wordCount").length > 0) {

                    if (value.length === 0) {
                        questionPanel.find('.wordCount').html(0);
                    }
                    var regex = /\s+/gi;
                    var wordCount = value.trim().replace(regex, ' ').split(' ').length;

                    questionPanel.find('.wordCount').html(wordCount);

                    if (maxWord !== 0 && wordCount <= maxWord) {
                        self._hideWritingErrorPanel.callWithLog(self, element);
                    }
                }

                var questionLabel = element.parents(".question-container").data("question-label");
                var circleEl = wrapper.find("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }
                if (element.val().trim() === "") {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
                else {
                    circleEl.removeClass("unanswered").addClass("answered");
                }
            });
    },
    _constructSubmitData(formName) {
        var self = this;

        $("#" + formName + " .droppable")
            .each(function () {
                var sectionKey = $(this).data("sentencekey");
                var questionId = $(this).data("orderparagraphid");
                var mockTestQuestionId = $(this).data("mocktestquestionid");
                var sectionType = $(this).data("sectiontype");
                var answerId = $(this).data("answerid");
                var sortingIndexTarget = sectionKey.replace("Q", "");

                if (answerId !== undefined && answerId !== "") {
                    $("#" + formName).append('<input type="hidden" name="MiniMockTest_' + sectionType +
                        "_" +
                        mockTestQuestionId +
                        "_" +
                        questionId +
                        "_" +
                        answerId +
                        '" value="' +
                        sortingIndexTarget +
                        '" />');
                }
            });

        $("#" + formName + " input:hidden")
            .not('[name*="MockTestId"]')
            .not('[name*="SectionGroupCode"]')
            .not('[name*="MiniMockTest"]')
            .remove();

        $("#" + formName + " .disabled").removeAttr("disabled").removeClass("disabled");
    },
    _updateParentActivityPanel(response) {
        if (window.opener !== null && !window.opener.closed) {
            $("#btnStart", window.opener.document).remove();
            $("#MiniMockTestMessage", window.opener.document).html(response.Value.Message);
            $("#btnBookAppointment", window.opener.document).removeClass("hidden");
        }
    },
    _refreshPageWrapper() {
        var self = this;
        if (self.CurrentGroupName === 'INS') {
            $("#page-wrapper").removeClass("page-fixed");
        }
        else {
            $("#page-wrapper").addClass("page-fixed");
        }
    },
    _timeOut(wrapper) {
        var self = this;

        self.E2Logger.MockTestManualLog("TIMEOUT", wrapper);

        var sectionGroupCode = wrapper.data("sectionGroupCode");

        if (sectionGroupCode === self.SectionGroupCode.Writing) {
            showInfoDialog(self.Message.WritingTimeOut);
            return;

        } else if (sectionGroupCode === self.SectionGroupCode.Listening) {
            showInfoDialog(self.Message.ListeningTimeOut);
            return;

        } else if (sectionGroupCode === self.SectionGroupCode.Reading) {
            showInfoDialog(self.Message.ReadingTimeOut);
            return;

        }
    },
    _validateTextArea(wrapper) {
        var self = this;
        var validTextAreas = [];
        wrapper.find("textarea").each(function () {
            var result = self._isValidTextAreaValue($(this));
            validTextAreas.push(result);
        });

        return validTextAreas;
    },
    _isValidTextAreaValue(textAreaEl) {
        var self = this;
        var value = textAreaEl.val();
        var minWord = textAreaEl.data("min-word");
        var maxWord = textAreaEl.data("max-word");
        var regex = /\s+/gi;
        var wordCount = value.trim().replace(regex, ' ').split(' ').length;

        if (wordCount < minWord || wordCount > maxWord) {
            showInfoDialog(self.Message.WordLimitMessage);
            return false;
        }

        return true;
    },
    _hideWritingErrorPanel(textAreaEl) {
        var errorPane = textAreaEl.parent(".writing-section").find(".alert");
        errorPane.empty();
        errorPane.hide();
    }
};;
var StudentIeltsGeneralMiniMockTestViewDetail = function (element) {
    this.Element = element;
};

StudentIeltsGeneralMiniMockTestViewDetail.prototype = {
    constructor: StudentIeltsGeneralMiniMockTestViewDetail,
    Register: function () {
        var self = this;

        self.GenerateComment();

        $(".closeButton").click(function () {
            window.close();
        });
    },
    GenerateComment: function () {
        $(".panel-section").each(function () {
            var comment = "";
            $(this).find(".form-group").each(function () {
                var selectedInput = $(this).find("input[type=radio]:checked");
                if (selectedInput.length) {
                    var currentComment = selectedInput[0].dataset["comment"];
                    if (currentComment !== "")
                        comment += "<p>" + currentComment + "</p>";

                }
            });
            $(this).find("[id^=comment]").html(comment);
        });
    }
};
var StudentIeltsGeneralMiniMockTestViewDetailV2 = function (element) {
    this.Element = element;
};

StudentIeltsGeneralMiniMockTestViewDetailV2.prototype = {
    constructor: StudentIeltsGeneralMiniMockTestViewDetailV2,
    Register: function () {
        var self = this;

        $(".closeButton").click(function () {
            window.close();
        });
    }
};
(function ($, window) {
    "use strict";

    // Private Methods

    function prepareAudio() {
        var self = this;
        initAudioPlayerWidget($("#audioPlayerPanel"), true);
        stopAudio.call(self);
    }

    function stopAudio() {
        var sounds = $(".audio-player");
        var i;
        for (i = 0; i < sounds.length; i++) sounds[i].pause();
    }

    // Constructor
    var studentIeltsListeningMockTestStartPage = function (element) {
        this.Element = element;
    };

    studentIeltsListeningMockTestStartPage.prototype = {
        constructor: studentIeltsListeningMockTestStartPage,
        Register: function () {
            var self = this;

            self.Initialize();
        },
        Initialize: function () {
            var self = this;
            prepareAudio.call(self);

            $("#btnContinue")
                .off("click")
                .on("click", function (e) {
                    e.preventDefault();
                    stopAudio.call(self);
                    $("#audioInstructionPanel").addClass("hidden");
                    $("#startTestPanel").removeClass("hidden");
                });
        }
    };

    // Export javascript class into window environment
    window.StudentIeltsListeningMockTestStartPage = studentIeltsListeningMockTestStartPage;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    // Private Methods

    function prepareAudio() {
        var self = this;
        initAudioPlayerWidget($("#audioPlayerPanel"));
        startAudio.call(self);
    }

    function prepareTimer() {
        var self = this;

        if (self.CountDown !== undefined) {
            clearInterval(self.CountDown);
        }

        if (self.Interval !== undefined) {
            clearInterval(self.Interval);
        }

        var duration = 0;
        var wrapper = $(".wrapper-section");
        if (wrapper.length) {
            duration = wrapper.data("duration");
        }

        $("#mock-test-timer").html($("#mock-test-timer").data("duration"));

        if (duration !== 0) {
            self.Interval = setInterval(function () {
                DynamicTimerWithCustomInterval("#mock-test-timer", "",
                    function () { timeOut.call(self); },
                self.Interval);
            },
                1000);
            self.CountDown = self.Interval;
        }
    }

    function initEventHandler() {
        var self = this;
        var eventHandler = {
            textKeyUpChange: function () {
                var element = $(this);
                var questionLabel = element.parents(".question-container").data("question-label");
                var circleEl = $("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }
                if (element.val().trim() === "") {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
                else {
                    circleEl.removeClass("unanswered").addClass("answered");
                }
            },
            textChange: function () {
                var updatedWidth = this.scrollWidth + 5;
                $(this).attr("style", "width:" + updatedWidth + "px");
            },
            radioChange: function () {
                var element = $(this);
                var questionLabel = element.parents(".question-container").data("question-label");
                var circleEl = $("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }
                if (element.value !== null) {
                    circleEl.removeClass("unanswered").addClass("answered");
                }
                else {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
            },
            checkboxChange: function () {
                var element = $(this);
                var questionContainer = element.parents(".question-container");
                var questionLabel = questionContainer.data("question-label");
                var circleEl = $("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }

                var totalChecked = questionContainer.find("input:checkbox:checked").length;
                var maxCheckedAnswer = questionContainer.data("max-answer");

                if (totalChecked > maxCheckedAnswer) {
                    $(this).prop("checked", false);
                    return;
                }

                if (totalChecked > 0) {
                    circleEl.removeClass("unanswered").addClass("answered");
                } else {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
            },
            submitBtnClick: function (e) {
                e.preventDefault();

                var currWrapper = $(".wrapper-section");
                var message = currWrapper.data("confirmation-message");
                var timer = currWrapper.find(".timer-duration-panel").html();
                var isNoTimer = currWrapper.find(".timer-duration-panel").length === 0;

                if (timer !== '00:00' || isNoTimer) {
                    if (isNoTimer) {
                        message = currWrapper.data("submit-confirmation-message");
                    }

                    showYesNoConfirmationDialog(message,
                        function () {
                            saveAnswer.call(self, "maintenanceForm");
                        },
                        function () { return; }
                    );
                }
                else {
                    saveAnswer.call(self, "maintenanceForm");
                }
            },
            retryBtnClick: function (e) {
                e.preventDefault();
                setTestEnabled.call(self, true);

                updateStateFibTest.call(self, self.SubmitResponse);
                updateStateTcTest.call(self, self.SubmitResponse);
                updateStateMcsaTest.call(self, self.SubmitResponse);
                updateStateMcmaTest.call(self, self.SubmitResponse);

                $(".retry-btn").addClass("hidden");
                $(".submit-btn").removeClass("hidden");
                $(".show-answer-btn").addClass("hidden");
                self.DisabledMode = false;

                goTo.call(self, 1, self.CurrentSectionGroupIndex);
                prepareTimer.call(self);
                prepareAudio.call(self);
            },
            closeBtnClick: function () {
                window.close();
            },
            prevBtnClick: function (e) {
                e.preventDefault();
                var targetSectionGroupIndex = parseInt(self.CurrentSectionGroupIndex) - 1;
                goTo.call(self, targetSectionGroupIndex, self.CurrentSectionGroupIndex);
            },
            nextBtnClick: function (e) {
                e.preventDefault();
                var targetSectionGroupIndex = parseInt(self.CurrentSectionGroupIndex) + 1;
                goTo.call(self, targetSectionGroupIndex, self.CurrentSectionGroupIndex);
            },
            showAnswerBtnClick: function (e) {
                e.preventDefault();

                $(e.currentTarget).hide();

                var currentSectionGroup = $("#section-group-" + self.CurrentSectionGroupIndex);

                var mainElement = self.Element;
                self.Element = currentSectionGroup;
                self.Element.data("is-show-answer", "False");
                markMcsaTest.call(self, self.SubmitResponse, true);
                markMcmaTest.call(self, self.SubmitResponse, true);
                markTcTest.call(self, self.SubmitResponse, true);
                markFibTest.call(self, self.SubmitResponse, true);
                self.Element = mainElement;
            }
        };

        $("input[type=text]").bind("keyup change", eventHandler.textKeyUpChange);

        $("input[type=text]").change(eventHandler.textChange);

        $("input[type=radio]")
            .off("change")
            .on("change", eventHandler.radioChange);

        $("input[type=checkbox]")
            .off("change")
            .on("change", eventHandler.checkboxChange);

        $(".submit-btn")
            .off("click")
            .on("click", eventHandler.submitBtnClick);

        $(".retry-btn")
            .off("click")
            .on("click", eventHandler.retryBtnClick);

        $(".closeButton")
            .off("click")
            .on("click", eventHandler.closeBtnClick);

        $(".prev-btn")
            .off("click")
            .on("click", eventHandler.prevBtnClick);

        $(".next-btn")
            .off("click")
            .on("click", eventHandler.nextBtnClick);

        $(".show-answer-btn")
            .off("click")
            .on("click", eventHandler.showAnswerBtnClick);
    }

    function initializeQuestionPalette() {
        var self = this;
        $(".question-palette-pane .circle-question-palette")
            .off("click")
            .on("click", function (e) {
                e.preventDefault();
                var el = $(this);
                var question = el.data("question");
                setFocus.call(self, question);
            });

    }

    function initializeWordCount() {
        $(".wordCount").html('0');
    }

    function initializeHighlightBar() {
        var self = this;
        $(".highlighter").click(function (e) {
            e.preventDefault();
            var css = $(e.currentTarget).data("css");
            highlightText.call(self, css);
        });

        $(".unhighlight").click(function (e) {
            e.preventDefault();
            unHighlightText.call(self);
        });
    }

    function initializeHighlight() {
        var self = this;
        $(".selectable-text")
            .off("mouseup")
            .on("mouseup", function (n) {
                var el = $(n.target);

                if (!el.hasClass("dragdrop") && !el.hasClass("form-control")) {
                    markSelection.call(self);
                    n.target.tagName === "SPAN" && n.target.className.includes("highlight") && (self.LastHighlight = n.target);
                }
                else {
                    $(".formatbar").hide();
                }
            });
    }

    function setInputEnabled(isEnabled) {
        var self = this;
        var form = self.MaintenanceForm;

        if (self.DisabledMode !== true) {
            return;
        }

        if (isEnabled) {
            form.find("input")
                .not('[name*="MockTestId"]')
                .not('[name*="ActivityId"]')
                .removeAttr("disabled");
        }
        else {
            form.find("input")
                .not('[name*="MockTestId"]')
                .not('[name*="ActivityId"]')
                .attr("disabled", "disabled");
        }
    }

    function setFocus(question) {
        var self = this;
        var inputEl;
        if ($("#question-" + question).find(".form-control").length) {
            inputEl = $("#question-" + question).find(".form-control")[0];
        }
        else if ($("#question-" + question + " .sentence-text").length) {
            inputEl = $("#question-" + question + " .sentence-text")[0];
            $(inputEl).attr("tabIndex", "0");
        }
        else if ($("#question-" + question).length) {
            inputEl = $("#question-" + question)[0];
            $(inputEl).attr("tabIndex", "0");
        }
        else {
            return;
        }

        var targetSectionGroupIndex = $("#question-" + question).parents(".panelSectionGroup").data("index");
        goTo.call(self, targetSectionGroupIndex, self.CurrentSectionGroupIndex);

        setInputEnabled.call(self, true);
        $(inputEl).focus();
        setInputEnabled.call(self, false);
    }

    function saveAnswer(formName) {
        var self = this;
        clearInterval(self.CountDown);
        stopAudio.call(self);

        var url = $("#" + formName + " .wrapper-section").data("save-url");
        constructSubmitData.call(self, formName);

        submitForm("#" + formName,
            url,
            function (data) {
                self.SubmitResponse = data;
                self.NumberOfRetry++;
                $('#firstInfo').html(data.Value.PanelResult.FirstAnsweredMessage);
                $('#lastInfo').html(data.Value.PanelResult.LastAnsweredMessage);
                $('.band-score').html(data.Value.IeltsBandScore);
                markAnswer.call(self, data);
                updateParentActivityPanel.call(self, data);
                $(".formatbar").hide();
                $(".content-panel").scrollTop(0);
            });
    }

    function stopAudio() {
        var sounds = $(".audio-player");
        var i;
        for (i = 0; i < sounds.length; i++) sounds[i].pause();
    }

    function markAnswer(data) {
        var self = this;

        if (self.NumberOfRetry === 2) {
            $(".panelSectionGroup", self.Element).data("is-show-answer", "True");
            $(".show-answer-btn").show();
            $(".show-answer-btn").removeClass("hidden");            
        }

        if (self.NumberOfRetry < 3 && (data.Value.ActualTotalPoint !== data.Value.ExpectedTotalPoint)) {
            $('#info-submit-section').removeClass("hidden");            
            $('#info-submit-section').html(data.Value.SubmitAnsweredMessage + '<br/><br/>');
            $('#info-submit-section').append(self.Element.data('answer-text'));
            markMcsaTest.call(self, data, false);
            markMcmaTest.call(self, data, false);
            markTcTest.call(self, data, false);
            markFibTest.call(self, data, false);

            $(".retry-btn").removeClass("hidden");
            $(".submit-btn").addClass("hidden");
        }
        else {

            markMcsaTest.call(self, data, true);
            markMcmaTest.call(self, data, true);
            markTcTest.call(self, data, true);
            markFibTest.call(self, data, true);

            $('#info-submit-section').html(data.Value.SubmitAnsweredMessage);
            $(".retry-btn").addClass("hidden");
            $(".submit-btn").addClass("hidden");
        }
        setTestEnabled.call(self, false);
        self.DisabledMode = true;
    }

    function setTestEnabled(isEnabled) {
        var self = this;
        var form = self.MaintenanceForm;
        if (isEnabled) {
            form.find("input.wrong-answer").removeAttr("disabled");
            form.find(".is-incorrect input").removeAttr("disabled");
            form.find(".is-incorrect").parents(".mcsa.list-questions").find("input").removeAttr("disabled");
            form.find(".is-incorrect").parents(".mcma.list-questions").find("input").removeAttr("disabled");
            form.find(".question-container td.is-incorrect").each(
                function () {
                    var id = $(this).prop("id").replace("questionText-", "");
                    $(".radio[id^='radioSection-" + id + "'] input").removeAttr("disabled");
                });
            $(".player-control").removeClass("disabled");
            $("input[name='showDefaultAudioPlayerCheckbox']").removeAttr("disabled");
        }
        else {
            form.find("input")
                .not('[name*="MockTestId"]')
                .not('[name*="ActivityId"]')
                .attr("disabled", "disabled");
            $(".player-control").addClass("disabled");
            $("input[name='showDefaultAudioPlayerCheckbox']").attr("disabled", "disabled");
        }
    }

    function markMcsaTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedMultipleChoiceAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.IsCorrectAnswer) {
                        var el = self.Element.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                        el.addClass("is-right");
                    }
                });
        };

        $.each(data.Value.CurrentMultipleChoiceAnswers, function (index, element) {
            var el = self.Element.find("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioEl = $("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (element.IsCorrectAnswer) {
                    if (radioEl.length) {
                        radioEl.addClass("is-right");
                    }
                    el.addClass("is-correct");
                } else {
                    if (radioEl.length) {
                        radioEl.addClass("is-wrong");
                    }
                    el.addClass("is-incorrect");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
            }
        });
    }

    function markMcmaTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedMultipleChoiceMultipleAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.IsCorrectAnswer) {
                        var checkBoxEl = self.Element.find("#paragraph-" + element.AnswerId);
                        checkBoxEl.addClass("is-right");
                    }
                });
        };

        $.each(data.Value.CurrentMultipleChoiceMultipleAnswers, function (index, element) {
            var el = self.Element.find("#questionText-" + element.QuestionId);
            if (el.length) {
                var checkBoxEl = self.Element.find("#paragraph-" + element.AnswerId);
                if (element.IsCorrectAnswer) {
                    if (checkBoxEl.length) {
                        checkBoxEl.addClass("is-right");
                    }
                    el.addClass("is-correct");
                } else {
                    if (checkBoxEl.length) {
                        checkBoxEl.addClass("is-wrong");
                    }
                    el.addClass("is-incorrect");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
            }
        });
    }

    function markTcTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedTickableColumnAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.IsCorrectAnswer) {
                        var el = self.Element.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                        el.addClass("is-right");
                    }
                });
        };

        $.each(data.Value.CurrentTickableColumnAnswers, function (index, element) {
            var el = self.Element.find("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioEl = self.Element.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (element.IsCorrectAnswer) {
                    if (radioEl.length) {
                        radioEl.addClass("is-right");
                    }
                    el.addClass("is-correct");
                } else {
                    if (radioEl.length) {
                        radioEl.addClass("is-wrong");
                    }
                    el.addClass("is-incorrect");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
            }
        });
    }

    function markFibTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId, answerKey) {
            $.each(data.Value.ExpectedFillInTheBlankAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.AnswerKey === answerKey) {
                        var el = self.Element.find("#input-" + element.QuestionId + "-" + element.AnswerKey);
                        if (el.val() === "") {
                            el.val(element.AnswerText);
                        } else {
                            el.val(el.val() + " / " + element.AnswerText);
                        }
                    }
                });
        };

        $.each(data.Value.CurrentFillInTheBlankAnswers, function (index, element) {
            var el = self.Element.find("#input-" + element.QuestionId + "-" + element.AnswerKey);
            if (el.length) {
                if (element.IsCorrectAnswer) {
                    el.addClass("correct-answer");
                } else {
                    el.addClass("wrong-answer");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId, element.AnswerKey);
                    }
                }
            }
        });

        self.Element.find("input[type='text']").each(function () {
            var updatedWidth = this.scrollWidth + 5;

            if (this.clientWidth !== 0 && this.scrollWidth !== 0 && this.clientWidth < updatedWidth) {
                $(this).attr("style", "width:" + updatedWidth + "px");
            }            
        });
    }

    function updateStateFibTest(data) {
        $.each(data.Value.CurrentFillInTheBlankAnswers, function (index, element) {
            var el = $("#input-" + element.QuestionId + "-" + element.AnswerKey);
            if (el.length) {
                if (!element.IsCorrectAnswer) {
                    el.removeClass("wrong-answer");
                    el.removeClass("correct-answer");
                    el.val("");

                    var questionId = el.parents(".question-container").data("question-label");
                    $("#circle-" + questionId).removeClass("answered").addClass("unanswered");
                }
            }
        });
    }

    function updateStateTcTest(data) {
        $.each(data.Value.CurrentTickableColumnAnswers, function (index, element) {
            var el = $("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioWrapper = el.parents("table.tickable-table").find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (!element.IsCorrectAnswer) {
                    if (radioWrapper.length) {
                        radioWrapper.removeClass("is-wrong");
                        radioWrapper.removeClass("is-right");
                        radioWrapper.find("input[type='radio']").prop("checked", false);
                    }
                    el.removeClass("is-incorrect");

                    var questionId = el.parents(".question-container").data("question-label");
                    $("#circle-" + questionId).removeClass("answered").addClass("unanswered");
                }

                el.parents("table.tickable-table").find("div[id^='radioSection']").each(function () {
                    var isCheckedRadioEl = $(this).find("input[type='radio']").is(":checked");
                    if (!isCheckedRadioEl) {
                        $(this).removeClass("is-right");
                    }
                });
            }
        });
    }

    function updateStateMcsaTest(data) {
        $.each(data.Value.CurrentMultipleChoiceAnswers, function (index, element) {
            var el = $("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioWrapper = el.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (!element.IsCorrectAnswer) {
                    if (radioWrapper.length) {
                        radioWrapper.removeClass("is-wrong");
                        radioWrapper.removeClass("is-right");
                        radioWrapper.find("input[type='radio']").prop("checked", false);
                    }
                    el.removeClass("is-incorrect");
                }

                el.find("div[id^='radioSection']").each(function () {
                    var isCheckedRadioEl = $(this).find("input[type='radio']").is(":checked");
                    if (!isCheckedRadioEl) {
                        $(this).removeClass("is-right");
                    }
                });
            }
        });
    }

    function updateStateMcmaTest(data) {
        $.each(data.Value.CurrentMultipleChoiceMultipleAnswers, function (index, element) {
            var el = $("#questionText-" + element.QuestionId);
            if (el.length) {
                var questionContainer = el.parents(".list-questions");
                var checkBoxWrapper = el.parent().find("#paragraph-" + element.AnswerId);

                if (!element.IsCorrectAnswer) {
                    if (checkBoxWrapper.length) {
                        checkBoxWrapper.removeClass("is-wrong");
                        checkBoxWrapper.find("input[type='checkbox']").prop("checked", false);
                    }
                    el.removeClass("is-incorrect");
                }

                if (questionContainer.find("input[type='checkbox']:checked").length === 0) {
                    var questionId = el.parents(".question-container").data("question-label");
                    $("#circle-" + questionId).removeClass("answered").addClass("unanswered");
                }
                else if (questionContainer.find("input[type='checkbox']:checked").length < questionContainer.data("totalcorrectanswer")) {
                    questionContainer.find("input[type='checkbox']").removeAttr("disabled");
                }
            }
        });
    }

    function startAudio() {
        var self = this;
        var timerNumber = 0;

        self.BeforePlayAudioCountDown = setInterval(function () {
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                $(".audioPlayer").removeClass("disabled-audio");
                stopBeforePlayAudioCountdown.call(self);
            }
        },
            1000);

        audioPlayerHandle.call(self);
    }

    function audioPlayerHandle(onPlay, onEnded) {
        var self = this;
        var audioPlayerEl = $("#audioPlayerPanel audio");

        if (audioPlayerEl.length === 0) {
            return;
        }

        var eventHandler = {
            play: function () {
                audioPlayerEl.find(".e2l-audio-player-footer").addClass("hidden");

                if (self.BeforePlayAudioCountDown !== null || self.DisabledMode) {
                    this.pause();
                    return;
                }

                if (typeof onPlay === "function") {
                    onPlay($(this));
                }
            },
            ended: function () {
                if (self.DisabledMode) {
                    return;
                }

                if (typeof onEnded === "function") {
                    onEnded();
                }
            }
        };

        audioPlayerEl
            .off("play")
            .on('play', eventHandler.play);

        audioPlayerEl
            .off("ended")
            .on('ended', eventHandler.ended);
    }

    function stopBeforePlayAudioCountdown() {
        var self = this;
        var audioPlayerEl = $("#audioPlayerPanel audio");
        var id = audioPlayerEl.prop("id");

        if (audioPlayerEl.length && audioPlayerEl[0] !== undefined) {
            var playAudioPromise = audioPlayerEl[0].play();
            if (playAudioPromise !== undefined) {
                playAudioPromise.then(_ => {
                    $(".e2l-audio-player-footer").addClass("hidden");
                }).catch(error => {
                    $(".e2l-audio-player-footer").removeClass("hidden");
                });
            } else {
                $(".e2l-audio-player-footer").removeClass("hidden");
            }
        } else {
            $(".e2l-audio-player-footer").removeClass("hidden");
        }

        if (self.BeforePlayAudioCountDown !== undefined || self.BeforePlayAudioCountDown !== null) {
            clearInterval(self.BeforePlayAudioCountDown);
            self.BeforePlayAudioCountDown = null;
        }
    }

    function markSelection() {
        $(".formatbar").hide();
        var i = "﻿",
            r = "&#xfeff;",
            n, t = "sel_" + (new Date).getTime() + "_" + Math.random().toString().substr(2);
        var u, f;
        if (document.selection && document.selection.createRange ? (f = document.selection.createRange().duplicate(), f.collapse(!1), f.pasteHTML('<span id="' + t + '" style="position: relative;">' + r + "<\/span>"), n = document.getElementById(t)) : window.getSelection && (u = window.getSelection(), u.getRangeAt ? u.rangeCount > 0 && (f = u.getRangeAt(0).cloneRange()) : (f.setStart(u.anchorNode, u.anchorOffset), f.setEnd(u.focusNode, u.focusOffset), f.collapsed !== u.isCollapsed && (f.setStart(u.focusNode, u.focusOffset), f.setEnd(u.anchorNode, u.anchorOffset))), u.toString() !== "" && u.toString() !== " " && (f.collapse(!0), n = document.createElement("span"), n.id = t, n.appendChild(document.createTextNode(i)), f.insertNode(n))), n) {
            u.toString() !== "" && $(".formatbar").show();
            var s = n;
            var left = 0;
            var top = 0;

            typeof viewAnswerMode === "undefined" ? (left += s.offsetLeft, top += s.offsetTop) : (left += $(s).offset().left - $(".selectable-text").offset().left, top += $(s).offset().top - $(".selectable-text").offset().top);
            top = top - 38;
            if ($(s).parents(".input-question.selectable-text, .question.selectable-text").length) {
                var currTop = $(s).parents(".input-question.selectable-text, .question.selectable-text")[0].offsetTop;
                var currLeft = $(s).parents(".input-question.selectable-text, .question.selectable-text")[0].offsetLeft;
                top = top + currTop;
                left = left + currLeft;
            } else if ($(s).parents("table").length) {
                var tableTop = $(s).parents("table")[0].offsetTop;
                var tableLeft = $(s).parents("table")[0].offsetLeft;

                var colTop = $(s).parents("td")[0].offsetTop;
                var colLeft = $(s).parents("td")[0].offsetLeft;

                top = top + tableTop + colTop;
                left = left + tableLeft + colLeft;
            }
            typeof extraHeightCom !== "undefined" && (top = top + extraHeightCom);

            $(".formatbar").css("top", top).css("left", left);
            n.parentNode && n.parentNode.removeChild(n);

        }
    }

    function getSelectedText() {
        var text = "";
        return window.getSelection ? text = window.getSelection() : document.getSelection ? text = document.getSelection() : document.selection && (text = document.selection.createRange().text), text;
    }

    function getSelectedHtml() {
        var self = this;
        var html = "";
        if (typeof window.getSelection !== "undefined") {
            var sel = window.getSelection();
            if (sel.rangeCount) {
                var container = document.createElement("div");
                for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                    var range = sel.getRangeAt(i);
                    var fragment = range.cloneContents();
                    container.appendChild(fragment);
                    unHighlightChildElement.call(self, $(container));
                }
                html = container.innerHTML;
            }
        } else if (typeof document.selection !== "undefined") {
            if (document.selection.type === "Text") {
                html = document.selection.createRange().htmlText;
            }
        }
        return html;
    }

    function highlightText(className) {
        var self = this;
        var r = getSelectedText.call(self),
            u = getSelectedHtml.call(self),
            t, i;
        if (u !== "") {
            i = r.getRangeAt(0);
            if ($(i.commonAncestorContainer).is("span[class^='highlight']")) {
                if ($(i.commonAncestorContainer).html() === u) {
                    $(i.commonAncestorContainer).attr("class", className);
                    document.getSelection().removeAllRanges();
                    return;
                }
            }
            t = document.createElement("SPAN");
            t.className = className;
            t.innerHTML = u;
            i.deleteContents();
            i.insertNode(t);
            self.LastHighlight = t;
            $(".formatbar").hide();

            document.getSelection().removeAllRanges();
        };
    }

    function unHighlightText() {
        var self = this;
        var range = window.getSelection().getRangeAt(0);
        var node = $(range.commonAncestorContainer);
        var content = getSelectedHtml.call(self);

        var spanTag = document.createElement("span");
        spanTag.className = "highlight-transparent";
        spanTag.innerHTML = content;

        range.deleteContents();
        range.insertNode(spanTag);

        var parents = $(spanTag).parents("span[class^='highlight']");
        if (parents.length !== 0) {

            var topParent = $(parents[parents.length - 1]);
            var parentContent = topParent.wrap("</p>").parent().html();
            topParent.unwrap();

            var contentReplacement = generateHighlightContentReplacement.call(self, content, parents);

            parentContent = parentContent.replace('<span class="highlight-transparent">' + content + '</span>', contentReplacement);
            topParent.replaceWith(parentContent);
        }

        node.find("span.highlight-transparent").each(function () {
            var html = $(this).html();
            $(this).replaceWith(html);
        });

        $(".formatbar").hide();

        initializeHighlight.call(self, $(range.commonAncestorContainer).closest(".wrapper-section"));
    }

    function generateHighlightContentReplacement(content, parents) {
        var self = this;

        var spanClasses = [];

        parents.each(function (index, row) {
            spanClasses.push($(row).attr("class"));
        });

        var spanCloseTag = spanClasses.map(item => { return '</span>'; }).join('');
        var spanOpenTag = spanClasses.slice(0).reverse().map(item => { return '<span class="' + item + '">'; }).join('');

        return spanCloseTag + content + spanOpenTag;
    }

    function unHighlightChildElement(element) {
        var self = this;
        element.find("span[class^='highlight']").each(function () {

            if ($(this).find("span[class^='highlight']").length !== 0) {
                unHighlightChildElement.call(self, $(this));
            }

            var children = $(this).html();
            $(this).replaceWith(children);
        });
    }

    function constructSubmitData(formName) {
        var self = this;

        $("#" + formName + " .droppable")
            .each(function () {
                var sectionKey = $(this).data("sentencekey");
                var questionId = $(this).data("orderparagraphid");
                var mockTestQuestionId = $(this).data("mocktestquestionid");
                var sectionType = $(this).data("sectiontype");
                var answerId = $(this).data("answerid");
                var sortingIndexTarget = sectionKey.replace("Q", "");

                if (answerId !== undefined && answerId !== "") {
                    $("#" + formName).append('<input type="hidden" name="MiniMockTest_' + sectionType +
                        "_" +
                        mockTestQuestionId +
                        "_" +
                        questionId +
                        "_" +
                        answerId +
                        '" value="' +
                        sortingIndexTarget +
                        '" />');
                }
            });

        $("#" + formName + " input:hidden")
            .not('[name*="MockTestId"]')
            .not('[name*="ActivityId"]')
            .not('[name*="IeltsMockTest"]')
            .remove();

        $("#" + formName + " .disabled").removeAttr("disabled").removeClass("disabled");
        $("#" + formName + " [disabled='disabled']").removeAttr("disabled");
    }

    function updateParentActivityPanel(response) {
        var self = this;

        if (window.opener !== null && !window.opener.closed) {

            try {

                var examPreparationBase = new StudentExamPreparationBase();
                var activityId = $('#ActivityId').val();
                var firstInfoText = "";

                examPreparationBase.UpdateWindowOpenerActivity(
                    self.MobileSiteUrl,
                    activityId,
                    response);

                if (response.Value.FirstAnsweredMessage !== "") {
                    firstInfoText += "<br/><br/>" + response.Value.FirstAnsweredMessage + "<br/><br/>";
                }

                var completedMessage = $(".wrapper-section").data("task-completed-message");
                var message = completedMessage + firstInfoText + response.Value.LastAnsweredMessage;
                $("#checkedIcon-" + activityId, window.opener.document).addClass("fa fa-check-circle");
                $("#panel-" + activityId, window.opener.document).removeClass("panel-default");
                $("#panel-" + activityId, window.opener.document).addClass("panel-success");
                $("#badge-" + activityId, window.opener.document).addClass("badge--success");
                $("#badge-" + activityId, window.opener.document).html('Done');
                $("#descriptionPanel-" + activityId, window.opener.document).html(message);
                $("#label-" + activityId, window.opener.document).remove();

                if (response.IsGroupCompleted) {
                    $("#checkedGroupIcon-" + response.GroupActivityId, window.opener.document)
                        .addClass("fa fa-check-circle");
                    $("#groupActivity-" + response.GroupActivityId, window.opener.document).addClass("panel-success");
                }

                if (response.IsSubModuleCompleted) {
                    $("#checkedModuleIcon-" + response.SubModuleId, window.opener.document)
                        .addClass("fa fa-check-circle");
                    $("#subModulePrimary-" + response.SubModuleId, window.opener.document)
                        .addClass("panel-success panel-task");
                }

                examPreparationBase.UpdateDashboardActivityCourse(activityId, response.Value.LastAnsweredMessage, window.opener.document);
                examPreparationBase.UpdatePanelProgress(window.opener.document, activityId);

            } catch (e) {
                return true;
            }

        }
        
    }

    function timeOut() {
        var self = this;
        stopAudio.call(self);
        clearInterval(self.CountDown);

        var submitBtn = $('.submit-btn');
        $(submitBtn).click();
    }

    function goTo(targetGroupIndex, currGroupIndex) {
        var self = this;
        var targetSectionGroup = $("#section-group-" + targetGroupIndex);
        var currSectionGroup = $("#section-group-" + currGroupIndex);

        currSectionGroup.hide();
        targetSectionGroup.show();

        self.CurrentSectionGroupIndex = targetGroupIndex;

        setNavigationButtonVisible.call(self, targetGroupIndex);

        $(".content-panel").scrollTop(0);
    }

    function setNavigationButtonVisible(targetGroupIndex) {
        var targetSectionGroup = $("#section-group-" + targetGroupIndex);

        if (targetSectionGroup.data("is-show-prev") === "True") {
            $(".prev-btn").show();
        }
        else {
            $(".prev-btn").hide();
        }

        if (targetSectionGroup.data("is-show-next") === "True") {
            $(".next-btn").show();
        }
        else {
            $(".next-btn").hide();
        }

        if (targetSectionGroup.data("is-show-answer") === "True") {
            $(".show-answer-btn").show();
        }
        else {
            $(".show-answer-btn").hide();
        }

        if (targetSectionGroup.data("is-show-submit") === "True") {
            $(".submit-btn").show();
            $(".retry-btn").show();
        }
        else {
            $(".submit-btn").hide();
            $(".retry-btn").hide();
        }
    }

    // Constructor
    var studentIeltsListeningMockTestView = function (element) {
        this.Element = element;
        this.MaintenanceForm = $("#maintenanceForm");
        this.CountDown = null;
        this.BeforePlayAudioCountDown = null;
        this.LastHighlight = null;
        this.NumberOfRetry = 0;
        this.Interval = null;
        this.DisabledMode = null;
        this.CurrentSectionGroupIndex = null;
        this.SubmitResponse = null;
        this.MobileSiteUrl = null;
    };

    studentIeltsListeningMockTestView.prototype = {
        constructor: studentIeltsListeningMockTestView,
        Register: function () {
            var self = this;

            self.Initialize();
        },
        Initialize: function () {
            var self = this;

            self.CurrentSectionGroupIndex = 1;
            setNavigationButtonVisible.call(self, self.CurrentSectionGroupIndex);

            initializeQuestionPalette.call(self);
            initEventHandler.call(self);
            initializeWordCount.call(self);
            initializeHighlightBar.call(self);
            initializeHighlight.call(self);
            prepareTimer.call(self);
            prepareAudio.call(self);
        }
    };

    // Export javascript class into window environment
    window.StudentIeltsListeningMockTestView = studentIeltsListeningMockTestView;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    // Private Methods

    function prepareAudio() {
        var self = this;
        initAudioPlayerWidget($("#audioPlayerPanel"));
        startAudio.call(self);
    }

    function prepareTimer() {
        var self = this;

        if (self.CountDown !== undefined) {
            clearInterval(self.CountDown);
        }

        if (self.Interval !== undefined) {
            clearInterval(self.Interval);
        }

        var duration = 0;
        var wrapper = $(".wrapper-section");
        if (wrapper.length) {
            duration = wrapper.data("duration");
        }

        $("#mock-test-timer").html($("#mock-test-timer").data("duration"));

        if (duration !== 0) {
            self.Interval = setInterval(function () {
                DynamicTimerWithCustomInterval("#mock-test-timer", "",
                    function () { timeOut.call(self); },
                self.Interval);
            },
                1000);
            self.CountDown = self.Interval;
        }
    }

    function initEventHandler() {
        var self = this;
        var eventHandler = {
            textKeyUpChange: function () {
                var element = $(this);
                var questionLabel = element.parents(".question-container").data("question-label");
                var circleEl = $("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }
                if (element.val().trim() === "") {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
                else {
                    circleEl.removeClass("unanswered").addClass("answered");
                }
            },
            textChange: function () {
                if ($(this).hasClass("flowchart-textbox")) {
                    return;
                }
                var updatedWidth = this.scrollWidth + 5;
                $(this).attr("style", "width:" + updatedWidth + "px");
            },
            radioChange: function () {
                var element = $(this);
                var questionLabel = element.parents(".question-container").data("question-label");
                var circleEl = $("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }
                if (element.value !== null) {
                    circleEl.removeClass("unanswered").addClass("answered");
                }
                else {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
            },
            checkboxChange: function () {
                var element = $(this);
                var questionContainer = element.parents(".question-container");
                var questionLabel = questionContainer.data("question-label");
                var circleEl = $("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }

                var totalChecked = questionContainer.find("input:checkbox:checked").length;
                var maxCheckedAnswer = questionContainer.data("max-answer");

                if (totalChecked > maxCheckedAnswer) {
                    $(this).prop("checked", false);
                    return;
                }

                if (totalChecked > 0) {
                    circleEl.removeClass("unanswered").addClass("answered");
                } else {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
            },
            submitBtnClick: function (e) {
                e.preventDefault();

                var currWrapper = $(".wrapper-section");
                var message = currWrapper.data("confirmation-message");
                var timer = currWrapper.find(".timer-duration-panel").html();
                var isNoTimer = currWrapper.find(".timer-duration-panel").length === 0;

                if (timer !== '00:00' || isNoTimer) {
                    if (isNoTimer) {
                        message = currWrapper.data("submit-confirmation-message");
                    }

                    showYesNoConfirmationDialog(message,
                        function () {
                            saveAnswer.call(self, "maintenanceForm");
                        },
                        function () { return; }
                    );
                }
                else {
                    saveAnswer.call(self, "maintenanceForm");
                }

            },
            retryBtnClick: function (e) {
                e.preventDefault();
                setTestEnabled.call(self, true);

                updateStateFibTest.call(self, self.SubmitResponse);
                updateStateTcTest.call(self, self.SubmitResponse);
                updateStateMcsaTest.call(self, self.SubmitResponse);
                updateStateMcmaTest.call(self, self.SubmitResponse);
                updateStateRopTest.call(self, self.SubmitResponse);
                updateStateDdlTest.call(self, self.SubmitResponse);

                $(".retry-btn").addClass("hidden");
                $(".submit-btn").removeClass("hidden");
                $(".show-answer-btn").addClass("hidden");
                self.DisabledMode = false;

                goTo.call(self, 1, self.CurrentSectionGroupIndex);
                prepareTimer.call(self);
                prepareAudio.call(self);
            },
            closeBtnClick: function () {
                window.close();
            },
            prevBtnClick: function (e) {
                e.preventDefault();
                var targetSectionGroupIndex = parseInt(self.CurrentSectionGroupIndex) - 1;
                goTo.call(self, targetSectionGroupIndex, self.CurrentSectionGroupIndex);
            },
            nextBtnClick: function (e) {
                e.preventDefault();
                var targetSectionGroupIndex = parseInt(self.CurrentSectionGroupIndex) + 1;
                goTo.call(self, targetSectionGroupIndex, self.CurrentSectionGroupIndex);
            },
            showAnswerBtnClick: function (e) {
                e.preventDefault();

                $(e.currentTarget).hide();

                var currentSectionGroup = $("#section-group-" + self.CurrentSectionGroupIndex);

                var mainElement = self.Element;
                self.Element = currentSectionGroup;
                self.Element.data("is-show-answer", "False");
                markMcsaTest.call(self, self.SubmitResponse, true);
                markMcmaTest.call(self, self.SubmitResponse, true);
                markTcTest.call(self, self.SubmitResponse, true);
                markFibTest.call(self, self.SubmitResponse, true);
                markRopTest.call(self, self.SubmitResponse, true);
                markDdlTest.call(self, self.SubmitResponse, true);
                self.Element = mainElement;
            },
            mouseMove: function (e) {
                var el = $(e.target);
                if (self.DragMode) {
                    var panelQuestion = $("#section-group-" + self.CurrentSectionGroupIndex).find(".right-panel");
                    var topOffset = panelQuestion.offset().top;
                    var leftOffset = panelQuestion.offset().left;
                    var bottomOffset = topOffset + panelQuestion.height() + 30;
                    var rightOffset = leftOffset + panelQuestion.width();
                    var currentVerOffset = e.pageY;
                    var currentHorOffset = e.pageX;

                    if (currentHorOffset >= leftOffset && currentHorOffset <= rightOffset) {
                        if (currentVerOffset <= topOffset) {
                            panelQuestion.animate({ scrollTop: 0 }, { queue: false }, 2000);
                            self.ScrollDirection = 0;
                        }
                        else if (currentVerOffset >= bottomOffset) {
                            panelQuestion.animate({ scrollTop: $(window).height() }, { queue: false }, 2000);
                            self.ScrollDirection = bottomOffset;
                        }
                        else if (self.ScrollDirection !== null) {
                            panelQuestion.animate({ scrollTop: currentVerOffset }, { queue: false }, 2000);
                            self.ScrollDirection = null;
                        }
                    }
                }
            }
        };

        $("input[type=text]").bind("keyup change", eventHandler.textKeyUpChange);

        $("input[type=text]").change(eventHandler.textChange);

        $("input[type=radio]")
            .off("change")
            .on("change", eventHandler.radioChange);

        $("input[type=checkbox]")
            .off("change")
            .on("change", eventHandler.checkboxChange);

        $(".submit-btn")
            .off("click")
            .on("click", eventHandler.submitBtnClick);

        $(".retry-btn")
            .off("click")
            .on("click", eventHandler.retryBtnClick);

        $(".closeButton")
            .off("click")
            .on("click", eventHandler.closeBtnClick);

        $(".prev-btn")
            .off("click")
            .on("click", eventHandler.prevBtnClick);

        $(".next-btn")
            .off("click")
            .on("click", eventHandler.nextBtnClick);

        $(".show-answer-btn")
            .off("click")
            .on("click", eventHandler.showAnswerBtnClick);

        $("body")
            .off("mousemove")
            .on("mousemove", eventHandler.mouseMove);
    }

    function initializeQuestionPalette() {
        var self = this;
        $(".question-palette-pane .circle-question-palette")
            .off("click")
            .on("click", function (e) {
                e.preventDefault();
                var el = $(this);
                var question = el.data("question");
                setFocus.call(self, question);
            });

    }

    function initializeWordCount() {
        $(".wordCount").html('0');
    }

    function initializeHighlightBar() {
        var self = this;
        $(".highlighter").click(function (e) {
            e.preventDefault();
            var css = $(e.currentTarget).data("css");
            highlightText.call(self, css);
        });

        $(".unhighlight").click(function (e) {
            e.preventDefault();
            unHighlightText.call(self);
        });
    }

    function initializeHighlight() {
        var self = this;
        $(".selectable-text")
            .off("mouseup")
            .on("mouseup", function (n) {
                var el = $(n.target);

                if (!el.hasClass("dragdrop") && !el.hasClass("form-control")) {
                    var parentEl = el.parents(".content-panel");
                    markSelection.call(self, parentEl);
                    n.target.tagName === "SPAN" && n.target.className.includes("highlight") && (self.LastHighlight = n.target);
                }
                else {
                    $(".formatbar").hide();
                }
            });
    }

    function initializeDragAndDrop() {
        var self = this;
        var uniqueAnswerIds = new Array();

        function isInArray(value, array) {
            return array.indexOf(value) > -1;
        }

        $(".draggable")
            .draggable({
                helper: "clone",
                revert: function () {
                    if ($(this).hasClass("drag-revert")) {
                        return true;
                    }
                },
                scroll: 'true',
                zIndex: 1000,
                containment: "document",
                appendTo: "body",
                start: function () {
                    self.DragMode = true;
                },
                stop: function () {
                    self.DragMode = false;
                    self.ScrollDirection = null;
                }
            });

        $(".droppable")
            .droppable({
                accept: ".draggable",
                tolerance: 'touch',
                drop: function (e, ui) {
                    var answerId = $(ui.draggable).data("answerid");
                    var sortingIndex = $(ui.draggable).data("sortingindex");
                    var sentenceKey = $(ui.draggable).data("sentencekey");
                    var mockTestQuestionId = $(ui.draggable).data("mocktestquestionid");
                    var orderParagraphId = $(ui.draggable).data("orderparagraphid");
                    var sectionType = $(ui.draggable).data("sectiontype");
                    if ((uniqueAnswerIds.length === 0 || isInArray(answerId, uniqueAnswerIds) === false)) {
                        if ($(this).find(".remove-sentence").hasClass("hidden") &&
                            !$(this).find(".sentence-text").hasClass("correct-answer") &&
                            !$(this).find(".sentence-text").hasClass("wrong-answer")
                        ) {
                            var content = $(this);

                            $(this)
                                .find(".remove-sentence")
                                .click(function (e) {
                                    e.preventDefault();
                                    content.find(".sentence-text").html("");
                                    content.find(".remove-sentence").addClass("hidden");
                                    $("#draggable-" + $(this)[0].dataset["answerid"]).removeClass("hidden");
                                    var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                    uniqueAnswerIds.splice(index, 1);
                                    $(this).parents(".question-container").data("answerid", "");
                                    $(this).data("answerid", "");

                                    var questionLabel = content.data("question-label");
                                    var circleEl = $("#circle-" + questionLabel);

                                    if (circleEl.length === 0) {
                                        return;
                                    }

                                    circleEl.removeClass("answered").addClass("unanswered");
                                });
                            if ($(this).data("answerid") !== "") {
                                var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                uniqueAnswerIds.splice(index, 1);
                            }
                            $(this).data("answerid", answerId);
                            $(this).data("sortingindex", sortingIndex);
                            $(this).data("sentencekey", sentenceKey);
                            $(this).data("mocktestquestionid", mockTestQuestionId);
                            $(this).data("orderparagraphid", orderParagraphId);
                            $(this).data("sectiontype", sectionType);
                            $(this).find(".sentence-text").html($(ui.draggable).html());
                            $(this).find(".remove-sentence").removeClass("hidden")
                                .attr("data-answerid", answerId);

                            $("#draggable-" + answerId).addClass("hidden");

                            uniqueAnswerIds.push($(this).data("answerid"));

                            var questionLabel = content.data("question-label");
                            var circleEl = $("#circle-" + questionLabel);

                            if (circleEl.length === 0) {
                                return;
                            }
                            circleEl.removeClass("unanswered").addClass("answered");

                            return $(ui.draggable).removeClass("drag-revert");
                        } else {
                            $("#draggable-" + answerId).removeClass("hidden");
                            return $(ui.draggable).addClass("drag-revert");
                        }
                    }
                }
            });
    }

    function initializeDropDownList() {
        $("select").change(
            function () {
                var selectEl = $(this);
                var selectedOption = selectEl.find("option:selected");
                var questionLabel = selectedOption.parents(".question-container").data("question-label");
                var circleEl = $("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }

                if (selectedOption.index() === 0 || selectedOption.text() === "" || selectedOption.text() === "-") {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
                else {
                    circleEl.removeClass("unanswered").addClass("answered");
                }

            });
    }

    function setInputEnabled(isEnabled) {
        var self = this;
        var form = self.MaintenanceForm;

        if (self.DisabledMode !== true) {
            return;
        }

        if (isEnabled) {
            form.find("input")
                .not('[name*="MockTestId"]')
                .not('[name*="ActivityId"]')
                .removeAttr("disabled");
        }
        else {
            form.find("input")
                .not('[name*="MockTestId"]')
                .not('[name*="ActivityId"]')
                .attr("disabled", "disabled");
        }
    }

    function setFocus(question) {
        var self = this;
        var inputEl;
        if ($("#question-" + question).find(".form-control").length) {
            inputEl = $("#question-" + question).find(".form-control")[0];
        }
        else if ($("#question-" + question + " .sentence-text").length) {
            inputEl = $("#question-" + question + " .sentence-text")[0];
            $(inputEl).attr("tabIndex", "0");
        }
        else if ($("#question-" + question).length) {
            inputEl = $("#question-" + question)[0];
            $(inputEl).attr("tabIndex", "0");
        }
        else {
            return;
        }

        var targetSectionGroupIndex = $("#question-" + question).parents(".panelSectionGroup").data("index");
        goTo.call(self, targetSectionGroupIndex, self.CurrentSectionGroupIndex);

        setInputEnabled.call(self, true);
        $(inputEl).focus();
        setInputEnabled.call(self, false);
    }

    function saveAnswer(formName) {
        var self = this;
        clearInterval(self.CountDown);
        stopAudio.call(self);

        var url = $("#" + formName + " .wrapper-section").data("save-url");
        constructSubmitData.call(self, formName);

        submitForm("#" + formName,
            url,
            function (data) {
                self.SubmitResponse = data;
                self.NumberOfRetry++;
                $('.alert-info').each(function () {
                    $(this).find('#firstInfo').html(data.Value.PanelResult.FirstAnsweredMessage);
                    $(this).find('#lastInfo').html(data.Value.PanelResult.LastAnsweredMessage);
                });
                $('.band-score').html(data.Value.IeltsBandScore);
                markAnswer.call(self, data);
                updateParentActivityPanel.call(self, data);
                $(".formatbar").hide();
                $(".content-panel").scrollTop(0);
            });
    }

    function stopAudio() {
        var sounds = $(".audio-player");
        var i;
        for (i = 0; i < sounds.length; i++) sounds[i].pause();
    }

    function markAnswer(data) {
        var self = this;

        if (self.NumberOfRetry === 2) {
            $(".panelSectionGroup", self.Element).data("is-show-answer", "True");
            $(".show-answer-btn").show();
            $(".show-answer-btn").removeClass("hidden");            
        }

        $('.alert.alert-success').removeClass("hidden");
        $('.alert.alert-success').html(data.Value.SubmitAnsweredMessage + '<br/><br/>');
        $('.alert.alert-success').append(self.Element.data('answer-text'));

        if (self.NumberOfRetry < 3 && (data.Value.ActualTotalPoint !== data.Value.ExpectedTotalPoint)) {

            markMcsaTest.call(self, data, false);
            markMcmaTest.call(self, data, false);
            markTcTest.call(self, data, false);
            markFibTest.call(self, data, false);
            markRopTest.call(self, data, false);
            markDdlTest.call(self, data, false);

            $(".retry-btn").removeClass("hidden");
            $(".submit-btn").addClass("hidden");
        }
        else {

            markMcsaTest.call(self, data, true);
            markMcmaTest.call(self, data, true);
            markTcTest.call(self, data, true);
            markFibTest.call(self, data, true);
            markRopTest.call(self, data, true);
            markDdlTest.call(self, data, true);

            $('#info-submit-section').html(data.Value.SubmitAnsweredMessage);
            $(".retry-btn").addClass("hidden");
            $(".submit-btn").addClass("hidden");
        }
        setTestEnabled.call(self, false);
        self.DisabledMode = true;
    }

    function setTestEnabled(isEnabled) {
        var self = this;
        var form = self.MaintenanceForm;
        if (isEnabled) {
            form.find("input.wrong-answer").removeAttr("disabled");
            form.find(".is-incorrect input").removeAttr("disabled");
            form.find(".is-incorrect").parents(".mcsa.list-questions").find("input").removeAttr("disabled");
            form.find(".is-incorrect").parents(".mcma.list-questions").find("input").removeAttr("disabled");
            form.find(".question-container td.is-incorrect").each(
                function () {
                    var id = $(this).prop("id").replace("questionText-", "");
                    $(".radio[id^='radioSection-" + id + "'] input").removeAttr("disabled");
                });
            $(".player-control").removeClass("disabled");
            $("input[name='showDefaultAudioPlayerCheckbox']").removeAttr("disabled");
        }
        else {
            form.find("input")
                .not('[name*="MockTestId"]')
                .not('[name*="ActivityId"]')
                .attr("disabled", "disabled");
            $(".player-control").addClass("disabled");
            $("input[name='showDefaultAudioPlayerCheckbox']").attr("disabled", "disabled");
        }
    }

    function markMcsaTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedMultipleChoiceAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.IsCorrectAnswer) {
                        var el = self.Element.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                        el.addClass("is-right");
                    }
                });
        };

        $.each(data.Value.CurrentMultipleChoiceAnswers, function (index, element) {
            var el = self.Element.find("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioEl = $("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (element.IsCorrectAnswer) {
                    if (radioEl.length) {
                        radioEl.addClass("is-right");
                    }
                    el.addClass("is-correct");
                } else {
                    if (radioEl.length) {
                        radioEl.addClass("is-wrong");
                    }
                    el.addClass("is-incorrect");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
            }
        });
    }

    function markMcmaTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedMultipleChoiceMultipleAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.IsCorrectAnswer) {
                        var checkBoxEl = self.Element.find("#paragraph-" + element.AnswerId);
                        checkBoxEl.addClass("is-right");
                    }
                });
        };

        $.each(data.Value.CurrentMultipleChoiceMultipleAnswers, function (index, element) {
            var el = self.Element.find("#questionText-" + element.QuestionId);
            if (el.length) {
                var checkBoxEl = self.Element.find("#paragraph-" + element.AnswerId);
                if (element.IsCorrectAnswer) {
                    if (checkBoxEl.length) {
                        checkBoxEl.addClass("is-right");
                    }
                    el.addClass("is-correct");
                } else {
                    if (checkBoxEl.length) {
                        checkBoxEl.addClass("is-wrong");
                    }
                    el.addClass("is-incorrect");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
            }
        });
    }

    function markTcTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedTickableColumnAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.IsCorrectAnswer) {
                        var el = self.Element.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                        el.addClass("is-right");
                    }
                });
        };

        $.each(data.Value.CurrentTickableColumnAnswers, function (index, element) {
            var el = self.Element.find("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioEl = self.Element.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (element.IsCorrectAnswer) {
                    if (radioEl.length) {
                        radioEl.addClass("is-right");
                    }
                    el.addClass("is-correct");
                } else {
                    if (radioEl.length) {
                        radioEl.addClass("is-wrong");
                    }
                    el.addClass("is-incorrect");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
            }
        });
    }

    function markFibTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId, answerKey) {
            $.each(data.Value.ExpectedFillInTheBlankAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.AnswerKey === answerKey) {
                        var el = self.Element.find("#input-" + element.QuestionId + "-" + element.AnswerKey);
                        var decodedText = $("<div/>").html(element.AnswerText).text();
                        if (el.val() === "") {
                            el.val(decodedText);
                        } else {
                            el.val(el.val() + " / " + decodedText);
                        }
                    }
                });
        };

        $.each(data.Value.CurrentFillInTheBlankAnswers, function (index, element) {
            var el = self.Element.find("#input-" + element.QuestionId + "-" + element.AnswerKey);
            if (el.length) {
                if (element.IsCorrectAnswer) {
                    el.addClass("correct-answer");
                } else {
                    el.addClass("wrong-answer");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId, element.AnswerKey);
                    }
                }
            }
        });

        self.Element.find("input[type='text']").each(function () {
            if ($(this).hasClass("flowchart-textbox")) {
                return;
            }
            var updatedWidth = this.scrollWidth + 5;

            if (this.clientWidth !== 0 && this.scrollWidth !== 0 && this.clientWidth < updatedWidth) {
                $(this).attr("style", "width:" + updatedWidth + "px");
            }            
        });
    }

    function markRopTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (sortingIndex) {
            $.each(data.Value.ExpectedOrderParagraphAnswers,
                function (index, element) {
                    if (element.CorrectOrderIndex == sortingIndex) {
                        var el = self.Element.find("#question-" + sortingIndex + " .sentence-text");
                        if (el.html() === "") {
                            el.html("(Correct Answer: " + element.AnswerText + ")");
                        } else {
                            el.html(el.html() + " (Correct Answer: " + element.AnswerText + ")");
                        }
                        return;
                    }
                });
        };

        $(".sentence-text").each(function () {
            var el = $(this);
            var answerEl = el.siblings(".remove-sentence");
            var answerId = answerEl.parents(".droppable").data("answerid");
            var answerKey = el.parents(".question-container").data("sentencekey").replace("Q", "");
            if (answerId !== undefined && answerId !== "") {
                $.each(data.Value.CurrentOrderParagraphAnswers, function (index, element) {
                    if (answerId == element.AnswerKey && answerKey == element.AnswerId) {
                        if (element.IsCorrectAnswer) {
                            el.addClass("correct-answer");
                            answerEl.addClass("hidden");
                        } else {
                            el.addClass("wrong-answer");
                            answerEl.addClass("hidden");

                            if (isShowCorrectAnswer) {
                                markCorrectAnswer(answerKey);
                            }
                        }
                        return;
                    }
                });
            }
            else {
                el.addClass("wrong-answer");
                answerEl.addClass("hidden");
                if (isShowCorrectAnswer) {
                    markCorrectAnswer(answerKey);
                }
            }
        });
    }

    function markDdlTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedDropDownAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId) {
                        var optionEl = self.Element.find("option[value=" + element.AnswerId + "]");
                        var selectEl = optionEl.parents("select");
                        selectEl.val(element.AnswerId);
                        return;
                    }
                });
        };

        $.each(data.Value.CurrentDropDownAnswers, function (index, element) {
            var el = self.Element.find("option[value=" + element.AnswerId + "]");
            if (el.length) {
                var selectEl = el.parents("select");
                if (element.IsCorrectAnswer) {
                    if (selectEl.length) {
                        selectEl.addClass("correct-answer");
                    }
                } else {
                    if (selectEl.length) {
                        selectEl.addClass("wrong-answer");
                    }

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
                selectEl.addClass("disabled").attr("disabled", "disabled");
            }
        });
    }

    function updateStateFibTest(data) {
        $.each(data.Value.CurrentFillInTheBlankAnswers, function (index, element) {
            var el = $("#input-" + element.QuestionId + "-" + element.AnswerKey);
            if (el.length) {
                if (!element.IsCorrectAnswer) {
                    el.removeClass("wrong-answer");
                    el.removeClass("correct-answer");
                    el.val("");

                    var questionId = el.parents(".question-container").data("question-label");
                    $("#circle-" + questionId).removeClass("answered").addClass("unanswered");
                }
            }
        });
    }

    function updateStateTcTest(data) {
        $.each(data.Value.CurrentTickableColumnAnswers, function (index, element) {
            var el = $("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioWrapper = el.parents("table.tickable-table").find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (!element.IsCorrectAnswer) {
                    if (radioWrapper.length) {
                        radioWrapper.removeClass("is-wrong");
                        radioWrapper.removeClass("is-right");
                        radioWrapper.find("input[type='radio']").prop("checked", false);
                    }
                    el.removeClass("is-incorrect");

                    var questionId = el.parents(".question-container").data("question-label");
                    $("#circle-" + questionId).removeClass("answered").addClass("unanswered");
                }

                el.parents("table.tickable-table").find("div[id^='radioSection']").each(function () {
                    var isCheckedRadioEl = $(this).find("input[type='radio']").is(":checked");
                    if (!isCheckedRadioEl) {
                        $(this).removeClass("is-right");
                    }
                });
            }
        });
    }

    function updateStateMcsaTest(data) {
        $.each(data.Value.CurrentMultipleChoiceAnswers, function (index, element) {
            var el = $("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioWrapper = el.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (!element.IsCorrectAnswer) {
                    if (radioWrapper.length) {
                        radioWrapper.removeClass("is-wrong");
                        radioWrapper.removeClass("is-right");
                        radioWrapper.find("input[type='radio']").prop("checked", false);
                    }
                    el.removeClass("is-incorrect");
                }

                el.find("div[id^='radioSection']").each(function () {
                    var isCheckedRadioEl = $(this).find("input[type='radio']").is(":checked");
                    if (!isCheckedRadioEl) {
                        $(this).removeClass("is-right");
                    }
                });
            }
        });
    }

    function updateStateMcmaTest(data) {
        $.each(data.Value.CurrentMultipleChoiceMultipleAnswers, function (index, element) {
            var el = $("#questionText-" + element.QuestionId);
            if (el.length) {
                var questionContainer = el.parents(".list-questions");
                var checkBoxWrapper = el.parent().find("#paragraph-" + element.AnswerId);

                if (!element.IsCorrectAnswer) {
                    if (checkBoxWrapper.length) {
                        checkBoxWrapper.removeClass("is-wrong");
                        checkBoxWrapper.find("input[type='checkbox']").prop("checked", false);
                    }
                    el.removeClass("is-incorrect");
                }

                if (questionContainer.find("input[type='checkbox']:checked").length === 0) {
                    var questionId = el.parents(".question-container").data("question-label");
                    $("#circle-" + questionId).removeClass("answered").addClass("unanswered");
                }
                else if (questionContainer.find("input[type='checkbox']:checked").length < questionContainer.data("totalcorrectanswer")) {
                    questionContainer.find("input[type='checkbox']").removeAttr("disabled");
                }
            }
        });
    }


    function updateStateRopTest(data) {
        $(".sentence-text").each(function () {
            var el = $(this);
            var answerEl = el.siblings(".remove-sentence");
            var answerId = answerEl.parents(".droppable").data("answerid");
            var answerKey = el.parents(".question-container").data("sentencekey").replace("Q", "");
            if (answerId !== undefined && answerId !== "") {
                $.each(data.Value.CurrentOrderParagraphAnswers, function (index, element) {
                    if (answerId == element.AnswerKey && answerKey == element.AnswerId) {
                        if (!element.IsCorrectAnswer) {
                            el.removeClass("wrong-answer");
                            var questionId = el.parents(".question-container").data("question-label");
                            $("#circle-" + questionId).removeClass("answered").addClass("unanswered");
                        }
                    }
                });
            }
            else {
                el.removeClass("wrong-answer");
                el.html("");
            }
        });

        $(".remove-sentence").each(function (e) {
            if ($(this).siblings(".correct-answer").length === 0) {
                $(this).click();
            }
        });
    }

    function updateStateDdlTest(data) {
        var self = this;
        $.each(data.Value.CurrentDropDownAnswers, function (index, element) {
            var el = self.Element.find("option[value=" + element.AnswerId + "]");
            if (el.length) {
                var selectEl = el.parents("select");
                if (!element.IsCorrectAnswer) {
                    if (selectEl.length) {
                        selectEl.removeClass("wrong-answer disabled").removeAttr("disabled");
                        selectEl.find(':nth-child(1)').prop('selected', true);
                    }

                    var questionId = el.parents(".question-container").data("question-label");
                    $("#circle-" + questionId).removeClass("answered").addClass("unanswered");
                }
            }
        });
    }

    function startAudio() {
        var self = this;
        var timerNumber = 0;

        self.BeforePlayAudioCountDown = setInterval(function () {
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                $(".audioPlayer").removeClass("disabled-audio");
                stopBeforePlayAudioCountdown.call(self);
            }
        },
            1000);

        audioPlayerHandle.call(self);
    }

    function audioPlayerHandle(onPlay, onEnded) {
        var self = this;
        var audioPlayerEl = $("#audioPlayerPanel audio");

        if (audioPlayerEl.length === 0) {
            return;
        }

        var eventHandler = {
            play: function () {
                audioPlayerEl.find(".e2l-audio-player-footer").addClass("hidden");

                if (self.BeforePlayAudioCountDown !== null || self.DisabledMode) {
                    this.pause();
                    return;
                }

                if (typeof onPlay === "function") {
                    onPlay($(this));
                }
            },
            ended: function () {
                if (self.DisabledMode) {
                    return;
                }

                if (typeof onEnded === "function") {
                    onEnded();
                }
            }
        };

        audioPlayerEl
            .off("play")
            .on('play', eventHandler.play);

        audioPlayerEl
            .off("ended")
            .on('ended', eventHandler.ended);
    }

    function stopBeforePlayAudioCountdown() {
        var self = this;
        var audioPlayerEl = $("#audioPlayerPanel audio");
        var id = audioPlayerEl.prop("id");

        if (audioPlayerEl.length && audioPlayerEl[0] !== undefined) {
            var playAudioPromise = audioPlayerEl[0].play();
            if (playAudioPromise !== undefined) {
                playAudioPromise.then(_ => {
                    $(".e2l-audio-player-footer").addClass("hidden");
                }).catch(error => {
                    $(".e2l-audio-player-footer").removeClass("hidden");
                });
            } else {
                $(".e2l-audio-player-footer").removeClass("hidden");
            }
        } else {
            $(".e2l-audio-player-footer").removeClass("hidden");
        }

        if (self.BeforePlayAudioCountDown !== undefined || self.BeforePlayAudioCountDown !== null) {
            clearInterval(self.BeforePlayAudioCountDown);
            self.BeforePlayAudioCountDown = null;
        }
    }

    function markSelection(wrapper) {
        $(".formatbar").hide();
        var i = "﻿",
            r = "&#xfeff;",
            n, t = "sel_" + (new Date).getTime() + "_" + Math.random().toString().substr(2);
        var u, f;
        if (document.selection && document.selection.createRange ? (f = document.selection.createRange().duplicate(), f.collapse(!1), f.pasteHTML('<span id="' + t + '" style="position: relative;">' + r + "<\/span>"), n = document.getElementById(t)) : window.getSelection && (u = window.getSelection(), u.getRangeAt ? u.rangeCount > 0 && (f = u.getRangeAt(0).cloneRange()) : (f.setStart(u.anchorNode, u.anchorOffset), f.setEnd(u.focusNode, u.focusOffset), f.collapsed !== u.isCollapsed && (f.setStart(u.focusNode, u.focusOffset), f.setEnd(u.anchorNode, u.anchorOffset))), u.toString() !== "" && u.toString() !== " " && (f.collapse(!0), n = document.createElement("span"), n.id = t, n.appendChild(document.createTextNode(i)), f.insertNode(n))), n) {
            u.toString() !== "" && wrapper.find(".formatbar").show();
            var s = n;
            var left = 0;
            var top = 0;

            typeof viewAnswerMode === "undefined" ? (left += s.offsetLeft, top += s.offsetTop) : (left += $(s).offset().left - $(".selectable-text").offset().left, top += $(s).offset().top - $(".selectable-text").offset().top);
            top = top - 38;
            if ($(s).parents(".input-question.selectable-text, .question.selectable-text").length) {
                var currTop = $(s).parents(".input-question.selectable-text, .question.selectable-text")[0].offsetTop;
                var currLeft = $(s).parents(".input-question.selectable-text, .question.selectable-text")[0].offsetLeft;
                top = top + currTop;
                left = left + currLeft - 16;
            } else if ($(s).parents("table").length) {
                var tableTop = $(s).parents("table")[0].offsetTop;
                var tableLeft = $(s).parents("table")[0].offsetLeft;

                var colTop = $(s).parents("td")[0].offsetTop;
                var colLeft = $(s).parents("td")[0].offsetLeft;

                top = top + tableTop + colTop;
                left = left + tableLeft + colLeft;
            }
            typeof extraHeightCom !== "undefined" && (top = top + extraHeightCom);

            wrapper.find(".formatbar").css("top", top).css("left", left);
            n.parentNode && n.parentNode.removeChild(n);

        }
    }

    function getSelectedText() {
        var text = "";
        return window.getSelection ? text = window.getSelection() : document.getSelection ? text = document.getSelection() : document.selection && (text = document.selection.createRange().text), text;
    }

    function getSelectedHtml() {
        var self = this;
        var html = "";
        if (typeof window.getSelection !== "undefined") {
            var sel = window.getSelection();
            if (sel.rangeCount) {
                var container = document.createElement("div");
                for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                    var range = sel.getRangeAt(i);
                    var fragment = range.cloneContents();
                    container.appendChild(fragment);
                    unHighlightChildElement.call(self, $(container));
                }
                html = container.innerHTML;
            }
        } else if (typeof document.selection !== "undefined") {
            if (document.selection.type === "Text") {
                html = document.selection.createRange().htmlText;
            }
        }
        return html;
    }

    function highlightText(className) {
        var self = this;
        var r = getSelectedText.call(self),
            u = getSelectedHtml.call(self),
            t, i;
        if (u !== "") {
            i = r.getRangeAt(0);
            if ($(i.commonAncestorContainer).is("span[class^='highlight']")) {
                if ($(i.commonAncestorContainer).html() === u) {
                    $(i.commonAncestorContainer).attr("class", className);
                    document.getSelection().removeAllRanges();
                    return;
                }
            }
            t = document.createElement("SPAN");
            t.className = className;
            t.innerHTML = u;
            i.deleteContents();
            i.insertNode(t);
            self.LastHighlight = t;
            $(".formatbar").hide();

            document.getSelection().removeAllRanges();
        };
    }

    function unHighlightText() {
        var self = this;
        var range = window.getSelection().getRangeAt(0);
        var node = $(range.commonAncestorContainer);
        var content = getSelectedHtml.call(self);

        var spanTag = document.createElement("span");
        spanTag.className = "highlight-transparent";
        spanTag.innerHTML = content;

        range.deleteContents();
        range.insertNode(spanTag);

        var parents = $(spanTag).parents("span[class^='highlight']");
        if (parents.length !== 0) {

            var topParent = $(parents[parents.length - 1]);
            var parentContent = topParent.wrap("</p>").parent().html();
            topParent.unwrap();

            var contentReplacement = generateHighlightContentReplacement.call(self, content, parents);

            parentContent = parentContent.replace('<span class="highlight-transparent">' + content + '</span>', contentReplacement);
            topParent.replaceWith(parentContent);
        }

        node.find("span.highlight-transparent").each(function () {
            var html = $(this).html();
            $(this).replaceWith(html);
        });

        $(".formatbar").hide();

        initializeHighlight.call(self, $(range.commonAncestorContainer).closest(".wrapper-section"));
    }

    function generateHighlightContentReplacement(content, parents) {
        var self = this;

        var spanClasses = [];

        parents.each(function (index, row) {
            spanClasses.push($(row).attr("class"));
        });

        var spanCloseTag = spanClasses.map(item => { return '</span>'; }).join('');
        var spanOpenTag = spanClasses.slice(0).reverse().map(item => { return '<span class="' + item + '">'; }).join('');

        return spanCloseTag + content + spanOpenTag;
    }

    function unHighlightChildElement(element) {
        var self = this;
        element.find("span[class^='highlight']").each(function () {

            if ($(this).find("span[class^='highlight']").length !== 0) {
                unHighlightChildElement.call(self, $(this));
            }

            var children = $(this).html();
            $(this).replaceWith(children);
        });
    }

    function constructSubmitData(formName) {
        var self = this;

        $("#" + formName + " input:hidden[name*='IeltsMockTest_[ROP]']").remove();

        $(".droppable")
            .each(function () {
                var sectionKey = $(this).data("sentencekey");
                var questionId = $(this).data("orderparagraphid");
                var mockTestQuestionId = $(this).data("mocktestquestionid");
                var sectionType = $(this).data("sectiontype");
                var answerId = $(this).data("answerid");
                var sortingIndexTarget = sectionKey.replace("Q", "");

                if (answerId !== undefined && answerId !== "") {
                    var inputName = 'IeltsMockTest_' + sectionType + "_" +
                        mockTestQuestionId +
                        "_" +
                        questionId +
                        "_" +
                        answerId;

                    $("#" + formName).append('<input type="hidden" name="' + inputName + '" value="' +
                        sortingIndexTarget +
                        '" />');
                }
            });

        $("#" + formName + " input:hidden")
            .not('[name*="MockTestId"]')
            .not('[name*="ActivityId"]')
            .not('[name*="IeltsMockTest"]')
            .remove();

        $("#" + formName + " .disabled").removeAttr("disabled").removeClass("disabled");
        $("#" + formName + " [disabled='disabled']").removeAttr("disabled");
    }

    function updateParentActivityPanel(response) {
        var self = this;

        if (window.opener !== null && !window.opener.closed) {
            try {

                var examPreparationBase = new StudentExamPreparationBase();
                var activityId = $('#ActivityId').val();
                var firstInfoText = "";

                examPreparationBase.UpdateWindowOpenerActivity(
                    self.MobileSiteUrl,
                    activityId,
                    response);

                if (response.Value.FirstAnsweredMessage !== "") {
                    firstInfoText += "<br/><br/>" + response.Value.FirstAnsweredMessage + "<br/><br/>";
                }

                var completedMessage = $(".wrapper-section").data("task-completed-message");
                var message = completedMessage + firstInfoText + response.Value.LastAnsweredMessage;
                $("#checkedIcon-" + activityId, window.opener.document).addClass("fa fa-check-circle");
                $("#panel-" + activityId, window.opener.document).removeClass("panel-default");
                $("#panel-" + activityId, window.opener.document).addClass("panel-success");
                $("#badge-" + activityId, window.opener.document).addClass("badge--success");
                $("#badge-" + activityId, window.opener.document).html('Done');
                $("#descriptionPanel-" + activityId, window.opener.document).html(message);
                $("#label-" + activityId, window.opener.document).remove();

                if (response.IsGroupCompleted) {
                    $("#checkedGroupIcon-" + response.GroupActivityId, window.opener.document)
                        .addClass("fa fa-check-circle");
                    $("#groupActivity-" + response.GroupActivityId, window.opener.document).addClass("panel-success");
                }

                if (response.IsSubModuleCompleted) {
                    $("#checkedModuleIcon-" + response.SubModuleId, window.opener.document)
                        .addClass("fa fa-check-circle");
                    $("#subModulePrimary-" + response.SubModuleId, window.opener.document)
                        .addClass("panel-success panel-task");
                }

                examPreparationBase.UpdateDashboardActivityCourse(activityId, response.Value.LastAnsweredMessage, window.opener.document);
                examPreparationBase.UpdatePanelProgress(window.opener.document, activityId);

            } catch (e) {
                return true;
            }
        }

    }

    function timeOut() {
        var self = this;
        stopAudio.call(self);
        clearInterval(self.CountDown);

        var submitBtn = $('.submit-btn');
        $(submitBtn).click();
    }

    function goTo(targetGroupIndex, currGroupIndex) {
        var self = this;
        var targetSectionGroup = $("#section-group-" + targetGroupIndex);
        var currSectionGroup = $("#section-group-" + currGroupIndex);

        currSectionGroup.hide();
        targetSectionGroup.show();

        self.CurrentSectionGroupIndex = targetGroupIndex;

        setNavigationButtonVisible.call(self, targetGroupIndex);

        $(".content-panel").scrollTop(0);
    }

    function setNavigationButtonVisible(targetGroupIndex) {
        var targetSectionGroup = $("#section-group-" + targetGroupIndex);

        if (targetSectionGroup.data("is-show-prev") === "True") {
            $(".prev-btn").show();
        }
        else {
            $(".prev-btn").hide();
        }

        if (targetSectionGroup.data("is-show-next") === "True") {
            $(".next-btn").show();
        }
        else {
            $(".next-btn").hide();
        }

        if (targetSectionGroup.data("is-show-answer") === "True") {
            $(".show-answer-btn").show();
        }
        else {
            $(".show-answer-btn").hide();
        }

        if (targetSectionGroup.data("is-show-submit") === "True") {
            $(".submit-btn").show();
            $(".retry-btn").show();
        }
        else {
            $(".submit-btn").hide();
            $(".retry-btn").hide();
        }
    }

    // Constructor
    var studentIeltsReadingMockTestView = function (element) {
        this.Element = element;
        this.MaintenanceForm = $("#maintenanceForm");
        this.CountDown = null;
        this.BeforePlayAudioCountDown = null;
        this.LastHighlight = null;
        this.NumberOfRetry = 0;
        this.Interval = null;
        this.DisabledMode = null;
        this.CurrentSectionGroupIndex = null;
        this.SubmitResponse = null;
        this.MobileSiteUrl = null;
        this.DragMode = false;
        this.ScrollDirection = null;
    };

    studentIeltsReadingMockTestView.prototype = {
        constructor: studentIeltsReadingMockTestView,
        Register: function () {
            var self = this;

            self.Initialize();
        },
        Initialize: function () {
            var self = this;

            self.CurrentSectionGroupIndex = 1;
            setNavigationButtonVisible.call(self, self.CurrentSectionGroupIndex);

            initializeQuestionPalette.call(self);
            initEventHandler.call(self);
            initializeWordCount.call(self);
            initializeHighlightBar.call(self);
            initializeHighlight.call(self);
            initializeDragAndDrop.call(self);
            initializeDropDownList.call(self);
            prepareTimer.call(self);
            prepareAudio.call(self);
        }
    };

    // Export javascript class into window environment
    window.StudentIeltsReadingMockTestView = studentIeltsReadingMockTestView;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    // Private Methods

    function prepareAudio() {
        var self = this;
        initAudioPlayerWidget($("#audioPlayerPanel"));
        startAudio.call(self);
    }

    function prepareTimer() {
        var self = this;

        if (self.CountDown !== undefined) {
            clearInterval(self.CountDown);
        }

        if (self.Interval !== undefined) {
            clearInterval(self.Interval);
        }

        var duration = 0;
        var wrapper = $(".wrapper-section");
        if (wrapper.length) {
            duration = wrapper.data("duration");
        }

        $("#mock-test-timer").html($("#mock-test-timer").data("duration"));

        if (duration !== 0) {
            self.Interval = setInterval(function () {
                DynamicTimerWithCustomInterval("#mock-test-timer", "",
                    function () { timeOut.call(self); },
                self.Interval);
            },
                1000);
            self.CountDown = self.Interval;
        }
    }

    function initEventHandler() {
        var self = this;
        var eventHandler = {
            textKeyUpChange: function () {
                var element = $(this);
                var questionLabel = element.parents(".question-container").data("question-label");
                var circleEl = $("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }
                if (element.val().trim() === "") {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
                else {
                    circleEl.removeClass("unanswered").addClass("answered");
                }
            },
            textChange: function () {
                if ($(this).hasClass("flowchart-textbox")) {
                    return;
                }
                var updatedWidth = this.scrollWidth + 5;
                $(this).attr("style", "width:" + updatedWidth + "px");
            },
            radioChange: function () {
                var element = $(this);
                var questionLabel = element.parents(".question-container").data("question-label");
                var circleEl = $("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }
                if (element.value !== null) {
                    circleEl.removeClass("unanswered").addClass("answered");
                }
                else {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
            },
            checkboxChange: function () {
                var element = $(this);
                var questionContainer = element.parents(".question-container");
                var questionLabel = questionContainer.data("question-label");
                var circleEl = $("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }

                var totalChecked = questionContainer.find("input:checkbox:checked").length;
                var maxCheckedAnswer = questionContainer.data("max-answer");

                if (totalChecked > maxCheckedAnswer) {
                    $(this).prop("checked", false);
                    return;
                }

                if (totalChecked > 0) {
                    circleEl.removeClass("unanswered").addClass("answered");
                } else {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
            },
            submitBtnClick: function (e) {
                e.preventDefault();

                var currWrapper = $(".wrapper-section");
                var message = currWrapper.data("confirmation-message");
                var timer = currWrapper.find(".timer-duration-panel").html();
                var isNoTimer = currWrapper.find(".timer-duration-panel").length === 0;

                if (timer !== '00:00' || isNoTimer) {
                    if (isNoTimer) {
                        message = currWrapper.data("submit-confirmation-message");
                    }

                    showYesNoConfirmationDialog(message,
                        function () {
                            saveAnswer.call(self, "maintenanceForm");
                        },
                        function () { return; }
                    );
                }
                else {
                    saveAnswer.call(self, "maintenanceForm");
                }

            },
            retryBtnClick: function (e) {
                e.preventDefault();
                setTestEnabled.call(self, true);

                updateStateFibTest.call(self, self.SubmitResponse);
                updateStateTcTest.call(self, self.SubmitResponse);
                updateStateMcsaTest.call(self, self.SubmitResponse);
                updateStateMcmaTest.call(self, self.SubmitResponse);
                updateStateRopTest.call(self, self.SubmitResponse);
                updateStateDdlTest.call(self, self.SubmitResponse);

                $(".retry-btn").addClass("hidden");
                $(".submit-btn").removeClass("hidden");
                $(".show-answer-btn").addClass("hidden");
                self.DisabledMode = false;

                goTo.call(self, 1, self.CurrentSectionGroupIndex);
                prepareTimer.call(self);
                prepareAudio.call(self);
            },
            closeBtnClick: function () {
                window.close();
            },
            prevBtnClick: function (e) {
                e.preventDefault();
                var targetSectionGroupIndex = parseInt(self.CurrentSectionGroupIndex) - 1;
                goTo.call(self, targetSectionGroupIndex, self.CurrentSectionGroupIndex);
            },
            nextBtnClick: function (e) {
                e.preventDefault();
                var targetSectionGroupIndex = parseInt(self.CurrentSectionGroupIndex) + 1;
                goTo.call(self, targetSectionGroupIndex, self.CurrentSectionGroupIndex);
            },
            showAnswerBtnClick: function (e) {
                e.preventDefault();

                $(e.currentTarget).hide();

                var currentSectionGroup = $("#section-group-" + self.CurrentSectionGroupIndex);

                var mainElement = self.Element;
                self.Element = currentSectionGroup;
                self.Element.data("is-show-answer", "False");
                markMcsaTest.call(self, self.SubmitResponse, true);
                markMcmaTest.call(self, self.SubmitResponse, true);
                markTcTest.call(self, self.SubmitResponse, true);
                markFibTest.call(self, self.SubmitResponse, true);
                markRopTest.call(self, self.SubmitResponse, true);
                markDdlTest.call(self, self.SubmitResponse, true);
                self.Element = mainElement;
            },
            mouseMove: function (e) {
                if (self.DragMode) {
                    var panelQuestion = $("#section-group-" + self.CurrentSectionGroupIndex).find(".right-panel");
                    var topOffset = panelQuestion.offset().top;
                    var leftOffset = panelQuestion.offset().left;
                    var bottomOffset = topOffset + panelQuestion.height() + 30;
                    var rightOffset = leftOffset + panelQuestion.width();
                    var currentVerOffset = e.pageY;
                    var currentHorOffset = e.pageX;

                    if (currentHorOffset >= leftOffset && currentHorOffset <= rightOffset) {
                        if (currentVerOffset <= topOffset) {
                            panelQuestion.animate({ scrollTop: 0 }, { queue: false }, 2000);
                            self.ScrollDirection = 0;
                        }
                        else if (currentVerOffset >= bottomOffset) {
                            panelQuestion.animate({ scrollTop: $(window).height() }, { queue: false }, 2000);
                            self.ScrollDirection = bottomOffset;
                        }
                        else if (self.ScrollDirection !== null) {
                            panelQuestion.animate({ scrollTop: currentVerOffset }, { queue: false }, 2000);
                            self.ScrollDirection = null;
                        }
                    }
                }
            }
        };

        $("input[type=text], textarea").bind("keyup change", eventHandler.textKeyUpChange);

        $("input[type=text], textarea").change(eventHandler.textChange);

        $("input[type=radio]")
            .off("change")
            .on("change", eventHandler.radioChange);

        $("input[type=checkbox]")
            .off("change")
            .on("change", eventHandler.checkboxChange);

        $(".submit-btn")
            .off("click")
            .on("click", eventHandler.submitBtnClick);

        $(".retry-btn")
            .off("click")
            .on("click", eventHandler.retryBtnClick);

        $(".closeButton")
            .off("click")
            .on("click", eventHandler.closeBtnClick);

        $(".prev-btn")
            .off("click")
            .on("click", eventHandler.prevBtnClick);

        $(".next-btn")
            .off("click")
            .on("click", eventHandler.nextBtnClick);

        $(".show-answer-btn")
            .off("click")
            .on("click", eventHandler.showAnswerBtnClick);

        $("body")
            .off("mousemove")
            .on("mousemove", eventHandler.mouseMove);
    }

    function initializeQuestionPalette() {
        var self = this;
        $(".question-palette-pane .circle-question-palette")
            .off("click")
            .on("click", function (e) {
                e.preventDefault();
                var el = $(this);
                var question = el.data("question");
                setFocus.call(self, question);
            });

    }

    function initializeWordCount() {
        $(".wordCount").html('0');
    }

    function initializeHighlightBar() {
        var self = this;
        $(".highlighter").click(function (e) {
            e.preventDefault();
            var css = $(e.currentTarget).data("css");
            highlightText.call(self, css);
        });

        $(".unhighlight").click(function (e) {
            e.preventDefault();
            unHighlightText.call(self);
        });
    }

    function initializeHighlight() {
        var self = this;
        $(".selectable-text")
            .off("mouseup")
            .on("mouseup", function (n) {
                var el = $(n.target);

                if (!el.hasClass("dragdrop") && !el.hasClass("form-control")) {
                    var parentEl = el.parents(".content-panel");
                    markSelection.call(self, parentEl);
                    n.target.tagName === "SPAN" && n.target.className.includes("highlight") && (self.LastHighlight = n.target);
                }
                else {
                    $(".formatbar").hide();
                }
            });
    }

    function initializeDragAndDrop() {
        var self = this;
        var uniqueAnswerIds = new Array();

        function isInArray(value, array) {
            return array.indexOf(value) > -1;
        }

        $(".draggable")
            .draggable({
                helper: "clone",
                revert: function () {
                    if ($(this).hasClass("drag-revert")) {
                        return true;
                    }
                },
                scroll: 'true',
                zIndex: 1000,
                containment: "document",
                appendTo: "body",
                start: function () {
                    self.DragMode = true;
                },
                stop: function () {
                    self.DragMode = false;
                    self.ScrollDirection = null;
                }
            });

        $(".droppable")
            .droppable({
                accept: ".draggable",
                tolerance: 'touch',
                drop: function (e, ui) {
                    var answerId = $(ui.draggable).data("answerid");
                    var sortingIndex = $(ui.draggable).data("sortingindex");
                    var sentenceKey = $(ui.draggable).data("sentencekey");
                    var mockTestQuestionId = $(ui.draggable).data("mocktestquestionid");
                    var orderParagraphId = $(ui.draggable).data("orderparagraphid");
                    var sectionType = $(ui.draggable).data("sectiontype");
                    if ((uniqueAnswerIds.length === 0 || isInArray(answerId, uniqueAnswerIds) === false)) {
                        if ($(this).find(".remove-sentence").hasClass("hidden") &&
                            !$(this).find(".sentence-text").hasClass("correct-answer") &&
                            !$(this).find(".sentence-text").hasClass("wrong-answer")
                        ) {
                            var content = $(this);

                            $(this)
                                .find(".remove-sentence")
                                .click(function (e) {
                                    e.preventDefault();
                                    content.find(".sentence-text").html("");
                                    content.find(".remove-sentence").addClass("hidden");
                                    $("#draggable-" + $(this)[0].dataset["answerid"]).removeClass("hidden");
                                    var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                    uniqueAnswerIds.splice(index, 1);
                                    $(this).parents(".question-container").data("answerid", "");
                                    $(this).data("answerid", "");

                                    var questionLabel = content.data("question-label");
                                    var circleEl = $("#circle-" + questionLabel);

                                    if (circleEl.length === 0) {
                                        return;
                                    }

                                    circleEl.removeClass("answered").addClass("unanswered");
                                });
                            if ($(this).data("answerid") !== "") {
                                var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                uniqueAnswerIds.splice(index, 1);
                            }
                            $(this).data("answerid", answerId);
                            $(this).data("sortingindex", sortingIndex);
                            $(this).data("sentencekey", sentenceKey);
                            $(this).data("mocktestquestionid", mockTestQuestionId);
                            $(this).data("orderparagraphid", orderParagraphId);
                            $(this).data("sectiontype", sectionType);
                            $(this).find(".sentence-text").html($(ui.draggable).html());
                            $(this).find(".remove-sentence").removeClass("hidden")
                                .attr("data-answerid", answerId);

                            $("#draggable-" + answerId).addClass("hidden");

                            uniqueAnswerIds.push($(this).data("answerid"));

                            var questionLabel = content.data("question-label");
                            var circleEl = $("#circle-" + questionLabel);

                            if (circleEl.length === 0) {
                                return;
                            }
                            circleEl.removeClass("unanswered").addClass("answered");

                            return $(ui.draggable).removeClass("drag-revert");
                        } else {
                            $("#draggable-" + answerId).removeClass("hidden");
                            return $(ui.draggable).addClass("drag-revert");
                        }
                    }
                }
            });
    }

    function initializeDropDownList() {
        $("select").change(
            function () {
                var selectEl = $(this);
                var selectedOption = selectEl.find("option:selected");
                var questionLabel = selectedOption.parents(".question-container").data("question-label");
                var circleEl = $("#circle-" + questionLabel);

                if (circleEl.length === 0) {
                    return;
                }

                if (selectedOption.index() === 0 || selectedOption.text() === "" || selectedOption.text() === "-") {
                    circleEl.removeClass("answered").addClass("unanswered");
                }
                else {
                    circleEl.removeClass("unanswered").addClass("answered");
                }

            });
    }

    function setInputEnabled(isEnabled) {
        var self = this;
        var form = self.MaintenanceForm;

        if (self.DisabledMode !== true) {
            return;
        }

        if (isEnabled) {
            form.find("input, textarea, select")
                .not('[name*="MockTestId"]')
                .not('[name*="ActivityId"]')
                .removeAttr("disabled");
        }
        else {
            form.find("input, textarea, select")
                .not('[name*="MockTestId"]')
                .not('[name*="ActivityId"]')
                .attr("disabled", "disabled");
        }
    }

    function setFocus(question) {
        var self = this;
        var inputEl;
        if ($("#question-" + question).find(".form-control").length) {
            inputEl = $("#question-" + question).find(".form-control")[0];
        }
        else if ($("#question-" + question + " .sentence-text").length) {
            inputEl = $("#question-" + question + " .sentence-text")[0];
            $(inputEl).attr("tabIndex", "0");
        }
        else if ($("#question-" + question).length) {
            inputEl = $("#question-" + question)[0];
            $(inputEl).attr("tabIndex", "0");
        }
        else {
            return;
        }

        var targetSectionGroupIndex = $("#question-" + question).parents(".panelSectionGroup").data("index");
        goTo.call(self, targetSectionGroupIndex, self.CurrentSectionGroupIndex);

        setInputEnabled.call(self, true);
        $(inputEl).focus();
        setInputEnabled.call(self, false);
    }

    function saveAnswer(formName) {
        var self = this;
        clearInterval(self.CountDown);
        stopAudio.call(self);

        var url = $("#" + formName + " .wrapper-section").data("save-url");
        constructSubmitData.call(self, formName);

        submitForm("#" + formName,
            url,
            function (data) {
                self.SubmitResponse = data;
                self.NumberOfRetry++;
                $('.alert-info').each(function () {
                    $(this).find('#firstInfo').html(data.Value.PanelResult.FirstAnsweredMessage);
                    $(this).find('#lastInfo').html(data.Value.PanelResult.LastAnsweredMessage);
                });
                $('.band-score').html(data.Value.IeltsBandScore);
                markAnswer.call(self, data);
                updateParentActivityPanel.call(self, data);
                $(".formatbar").hide();
                $(".content-panel").scrollTop(0);
            });
    }

    function stopAudio() {
        var sounds = $(".audio-player");
        var i;
        for (i = 0; i < sounds.length; i++) sounds[i].pause();
    }

    function markAnswer(data) {
        var self = this;

        if (self.NumberOfRetry === 2) {
            $(".panelSectionGroup", self.Element).data("is-show-answer", "True");
            $(".show-answer-btn").show();
            $(".show-answer-btn").removeClass("hidden");            
        }

        $('.alert.alert-success').removeClass("hidden");
        $('.alert.alert-success').html(data.Value.SubmitAnsweredMessage + '<br/><br/>');
        $('.alert.alert-success').append(self.Element.data('answer-text'));

        if (self.NumberOfRetry < 3 && (data.Value.ActualTotalPoint !== data.Value.ExpectedTotalPoint)) {

            markMcsaTest.call(self, data, false);
            markMcmaTest.call(self, data, false);
            markTcTest.call(self, data, false);
            markFibTest.call(self, data, false);
            markRopTest.call(self, data, false);
            markDdlTest.call(self, data, false);

            $(".retry-btn").removeClass("hidden");
            $(".submit-btn").addClass("hidden");
        }
        else {

            markMcsaTest.call(self, data, true);
            markMcmaTest.call(self, data, true);
            markTcTest.call(self, data, true);
            markFibTest.call(self, data, true);
            markRopTest.call(self, data, true);
            markDdlTest.call(self, data, true);

            $('#info-submit-section').html(data.Value.SubmitAnsweredMessage);
            $(".retry-btn").addClass("hidden");
            $(".submit-btn").addClass("hidden");
        }
        setTestEnabled.call(self, false);
        self.DisabledMode = true;
    }

    function setTestEnabled(isEnabled) {
        var self = this;
        var form = self.MaintenanceForm;
        if (isEnabled) {
            form.find("input.wrong-answer, textarea.wrong-answer").removeAttr("disabled");
            form.find(".is-incorrect input").removeAttr("disabled");
            form.find(".is-incorrect").parents(".mcsa.list-questions").find("input").removeAttr("disabled");
            form.find(".is-incorrect").parents(".mcma.list-questions").find("input").removeAttr("disabled");
            form.find(".question-container td.is-incorrect").each(
                function () {
                    var id = $(this).prop("id").replace("questionText-", "");
                    $(".radio[id^='radioSection-" + id + "'] input").removeAttr("disabled");
                });
            $(".player-control").removeClass("disabled");
            $("input[name='showDefaultAudioPlayerCheckbox']").removeAttr("disabled");
        }
        else {
            form.find("input, textarea")
                .not('[name*="MockTestId"]')
                .not('[name*="ActivityId"]')
                .attr("disabled", "disabled");
            $(".player-control").addClass("disabled");
            $("input[name='showDefaultAudioPlayerCheckbox']").attr("disabled", "disabled");
        }
    }

    function markMcsaTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedMultipleChoiceAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.IsCorrectAnswer) {
                        var el = self.Element.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                        el.addClass("is-right");
                    }
                });
        };

        $.each(data.Value.CurrentMultipleChoiceAnswers, function (index, element) {
            var el = self.Element.find("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioEl = $("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (element.IsCorrectAnswer) {
                    if (radioEl.length) {
                        radioEl.addClass("is-right");
                    }
                    el.addClass("is-correct");
                } else {
                    if (radioEl.length) {
                        radioEl.addClass("is-wrong");
                    }
                    el.addClass("is-incorrect");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
            }
        });
    }

    function markMcmaTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedMultipleChoiceMultipleAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.IsCorrectAnswer) {
                        var checkBoxEl = self.Element.find("#paragraph-" + element.AnswerId);
                        checkBoxEl.addClass("is-right");
                    }
                });
        };

        $.each(data.Value.CurrentMultipleChoiceMultipleAnswers, function (index, element) {
            var el = self.Element.find("#questionText-" + element.QuestionId);
            if (el.length) {
                var checkBoxEl = self.Element.find("#paragraph-" + element.AnswerId);
                if (element.IsCorrectAnswer) {
                    if (checkBoxEl.length) {
                        checkBoxEl.addClass("is-right");
                    }
                    el.addClass("is-correct");
                } else {
                    if (checkBoxEl.length) {
                        checkBoxEl.addClass("is-wrong");
                    }
                    el.addClass("is-incorrect");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
            }
        });
    }

    function markTcTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedTickableColumnAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.IsCorrectAnswer) {
                        var el = self.Element.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                        el.addClass("is-right");
                    }
                });
        };

        $.each(data.Value.CurrentTickableColumnAnswers, function (index, element) {
            var el = self.Element.find("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioEl = self.Element.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (element.IsCorrectAnswer) {
                    if (radioEl.length) {
                        radioEl.addClass("is-right");
                    }
                    el.addClass("is-correct");
                } else {
                    if (radioEl.length) {
                        radioEl.addClass("is-wrong");
                    }
                    el.addClass("is-incorrect");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
            }
        });
    }

    function markFibTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId, answerKey) {
            $.each(data.Value.ExpectedFillInTheBlankAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId && element.AnswerKey === answerKey) {
                        var el = self.Element.find("#input-" + element.QuestionId + "-" + element.AnswerKey);
                        var decodedText = $("<div/>").html(element.AnswerText).text();
                        if (el.val() === "") {
                            el.val(decodedText);
                        } else {
                            el.val(el.val() + " / " + decodedText);
                        }
                    }
                });
        };

        $.each(data.Value.CurrentFillInTheBlankAnswers, function (index, element) {
            var el = self.Element.find("#input-" + element.QuestionId + "-" + element.AnswerKey);
            if (el.length) {
                if (element.IsCorrectAnswer) {
                    el.addClass("correct-answer");
                } else {
                    el.addClass("wrong-answer");

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId, element.AnswerKey);
                    }
                }
            }
        });

        self.Element.find("input[type='text']").each(function () {
            if ($(this).hasClass("flowchart-textbox")) {
                return;
            }
            var updatedWidth = this.scrollWidth + 5;

            if (this.clientWidth !== 0 && this.scrollWidth !== 0 && this.clientWidth < updatedWidth) {
                $(this).attr("style", "width:" + updatedWidth + "px");
            }            
        });
    }

    function markRopTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (sortingIndex) {
            $.each(data.Value.ExpectedOrderParagraphAnswers,
                function (index, element) {
                    if (element.CorrectOrderIndex == sortingIndex) {
                        var el = self.Element.find("#question-" + sortingIndex + " .sentence-text");
                        if (el.html() === "") {
                            el.html("(Correct Answer: " + element.AnswerText + ")");
                        } else {
                            el.html(el.html() + " (Correct Answer: " + element.AnswerText + ")");
                        }
                        return;
                    }
                });
        };

        $(".sentence-text").each(function () {
            var el = $(this);
            var answerEl = el.siblings(".remove-sentence");
            var answerId = answerEl.parents(".droppable").data("answerid");
            var answerKey = el.parents(".question-container").data("sentencekey").replace("Q", "");
            if (answerId !== undefined && answerId !== "") {
                $.each(data.Value.CurrentOrderParagraphAnswers, function (index, element) {
                    if (answerId == element.AnswerKey && answerKey == element.AnswerId) {
                        if (element.IsCorrectAnswer) {
                            el.addClass("correct-answer");
                            answerEl.addClass("hidden");
                        } else {
                            el.addClass("wrong-answer");
                            answerEl.addClass("hidden");

                            if (isShowCorrectAnswer) {
                                markCorrectAnswer(answerKey);
                            }
                        }
                        return;
                    }
                });
            }
            else {
                el.addClass("wrong-answer");
                answerEl.addClass("hidden");
                if (isShowCorrectAnswer) {
                    markCorrectAnswer(answerKey);
                }
            }
        });
    }

    function markDdlTest(data, isShowCorrectAnswer) {
        var self = this;
        var markCorrectAnswer = function (questionId) {
            $.each(data.Value.ExpectedDropDownAnswers,
                function (index, element) {
                    if (element.QuestionId === questionId) {
                        var optionEl = self.Element.find("option[value=" + element.AnswerId + "]");
                        var selectEl = optionEl.parents("select");
                        selectEl.val(element.AnswerId);
                        return;
                    }
                });
        };

        $.each(data.Value.CurrentDropDownAnswers, function (index, element) {
            var el = self.Element.find("option[value=" + element.AnswerId + "]");
            if (el.length) {
                var selectEl = el.parents("select");
                if (element.IsCorrectAnswer) {
                    if (selectEl.length) {
                        selectEl.addClass("correct-answer");
                    }
                } else {
                    if (selectEl.length) {
                        selectEl.addClass("wrong-answer");
                    }

                    if (isShowCorrectAnswer) {
                        markCorrectAnswer(element.QuestionId);
                    }
                }
                selectEl.addClass("disabled").attr("disabled", "disabled");
            }
        });
    }

    function updateStateFibTest(data) {
        $.each(data.Value.CurrentFillInTheBlankAnswers, function (index, element) {
            var el = $("#input-" + element.QuestionId + "-" + element.AnswerKey);
            if (el.length) {
                if (!element.IsCorrectAnswer) {
                    el.removeClass("wrong-answer");
                    el.removeClass("correct-answer");
                    el.val("");

                    var questionId = el.parents(".question-container").data("question-label");
                    $("#circle-" + questionId).removeClass("answered").addClass("unanswered");
                }
            }
        });
    }

    function updateStateTcTest(data) {
        $.each(data.Value.CurrentTickableColumnAnswers, function (index, element) {
            var el = $("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioWrapper = el.parents("table.tickable-table").find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (!element.IsCorrectAnswer) {
                    if (radioWrapper.length) {
                        radioWrapper.removeClass("is-wrong");
                        radioWrapper.removeClass("is-right");
                        radioWrapper.find("input[type='radio']").prop("checked", false);
                    }
                    el.removeClass("is-incorrect");

                    var questionId = el.parents(".question-container").data("question-label");
                    $("#circle-" + questionId).removeClass("answered").addClass("unanswered");
                }

                el.parents("table.tickable-table").find("div[id^='radioSection']").each(function () {
                    var isCheckedRadioEl = $(this).find("input[type='radio']").is(":checked");
                    if (!isCheckedRadioEl) {
                        $(this).removeClass("is-right");
                    }
                });
            }
        });
    }

    function updateStateMcsaTest(data) {
        $.each(data.Value.CurrentMultipleChoiceAnswers, function (index, element) {
            var el = $("#questionText-" + element.QuestionId);
            if (el.length) {
                var radioWrapper = el.find("#radioSection-" + element.QuestionId + "-" + element.AnswerId);
                if (!element.IsCorrectAnswer) {
                    if (radioWrapper.length) {
                        radioWrapper.removeClass("is-wrong");
                        radioWrapper.removeClass("is-right");
                        radioWrapper.find("input[type='radio']").prop("checked", false);
                    }
                    el.removeClass("is-incorrect");
                }

                el.find("div[id^='radioSection']").each(function () {
                    var isCheckedRadioEl = $(this).find("input[type='radio']").is(":checked");
                    if (!isCheckedRadioEl) {
                        $(this).removeClass("is-right");
                    }
                });
            }
        });
    }

    function updateStateMcmaTest(data) {
        $.each(data.Value.CurrentMultipleChoiceMultipleAnswers, function (index, element) {
            var el = $("#questionText-" + element.QuestionId);
            if (el.length) {
                var questionContainer = el.parents(".list-questions");
                var checkBoxWrapper = el.parent().find("#paragraph-" + element.AnswerId);

                if (!element.IsCorrectAnswer) {
                    if (checkBoxWrapper.length) {
                        checkBoxWrapper.removeClass("is-wrong");
                        checkBoxWrapper.find("input[type='checkbox']").prop("checked", false);
                    }
                    el.removeClass("is-incorrect");
                }
                
                if (questionContainer.find("input[type='checkbox']:checked").length === 0) {
                    var questionId = el.parents(".question-container").data("question-label");
                    $("#circle-" + questionId).removeClass("answered").addClass("unanswered");
                }
                else if (questionContainer.find("input[type='checkbox']:checked").length < questionContainer.data("totalcorrectanswer")) {
                    questionContainer.find("input[type='checkbox']").removeAttr("disabled");
                }
            }
        });
    }


    function updateStateRopTest(data) {
        $(".sentence-text").each(function () {
            var el = $(this);
            var answerEl = el.siblings(".remove-sentence");
            var answerId = answerEl.parents(".droppable").data("answerid");
            var answerKey = el.parents(".question-container").data("sentencekey").replace("Q", "");
            if (answerId !== undefined && answerId !== "") {
                $.each(data.Value.CurrentOrderParagraphAnswers, function (index, element) {
                    if (answerId == element.AnswerKey && answerKey == element.AnswerId) {
                        if (!element.IsCorrectAnswer) {
                            el.removeClass("wrong-answer");
                            var questionId = el.parents(".question-container").data("question-label");
                            $("#circle-" + questionId).removeClass("answered").addClass("unanswered");
                        }
                    }
                });
            }
            else {
                el.removeClass("wrong-answer");
                el.html("");
            }
        });

        $(".remove-sentence").each(function (e) {
            if ($(this).siblings(".correct-answer").length === 0) {
                $(this).click();
            }
        });
    }

    function updateStateDdlTest(data) {
        var self = this;
        $.each(data.Value.CurrentDropDownAnswers, function (index, element) {
            var el = self.Element.find("option[value=" + element.AnswerId + "]");
            if (el.length) {
                var selectEl = el.parents("select");
                if (!element.IsCorrectAnswer) {
                    if (selectEl.length) {
                        selectEl.removeClass("wrong-answer disabled").removeAttr("disabled");
                        selectEl.find(':nth-child(1)').prop('selected', true);
                    }

                    var questionId = el.parents(".question-container").data("question-label");
                    $("#circle-" + questionId).removeClass("answered").addClass("unanswered");
                }
            }
        });
    }

    function startAudio() {
        var self = this;
        var timerNumber = 0;

        self.BeforePlayAudioCountDown = setInterval(function () {
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                $(".audioPlayer").removeClass("disabled-audio");
                stopBeforePlayAudioCountdown.call(self);
            }
        },
            1000);

        audioPlayerHandle.call(self);
    }

    function audioPlayerHandle(onPlay, onEnded) {
        var self = this;
        var audioPlayerEl = $("#audioPlayerPanel audio");

        if (audioPlayerEl.length === 0) {
            return;
        }

        var eventHandler = {
            play: function () {
                audioPlayerEl.find(".e2l-audio-player-footer").addClass("hidden");

                if (self.BeforePlayAudioCountDown !== null || self.DisabledMode) {
                    this.pause();
                    return;
                }

                if (typeof onPlay === "function") {
                    onPlay($(this));
                }
            },
            ended: function () {
                if (self.DisabledMode) {
                    return;
                }

                if (typeof onEnded === "function") {
                    onEnded();
                }
            }
        };

        audioPlayerEl
            .off("play")
            .on('play', eventHandler.play);

        audioPlayerEl
            .off("ended")
            .on('ended', eventHandler.ended);
    }

    function stopBeforePlayAudioCountdown() {
        var self = this;
        var audioPlayerEl = $("#audioPlayerPanel audio");
        var id = audioPlayerEl.prop("id");

        if (audioPlayerEl.length && audioPlayerEl[0] !== undefined) {
            var playAudioPromise = audioPlayerEl[0].play();
            if (playAudioPromise !== undefined) {
                playAudioPromise.then(_ => {
                    $(".e2l-audio-player-footer").addClass("hidden");
                }).catch(error => {
                    $(".e2l-audio-player-footer").removeClass("hidden");
                });
            } else {
                $(".e2l-audio-player-footer").removeClass("hidden");
            }
        } else {
            $(".e2l-audio-player-footer").removeClass("hidden");
        }

        if (self.BeforePlayAudioCountDown !== undefined || self.BeforePlayAudioCountDown !== null) {
            clearInterval(self.BeforePlayAudioCountDown);
            self.BeforePlayAudioCountDown = null;
        }
    }

    function markSelection(wrapper) {
        $(".formatbar").hide();
        var i = "﻿",
            r = "&#xfeff;",
            n, t = "sel_" + (new Date).getTime() + "_" + Math.random().toString().substr(2);
        var u, f;
        if (document.selection && document.selection.createRange ? (f = document.selection.createRange().duplicate(), f.collapse(!1), f.pasteHTML('<span id="' + t + '" style="position: relative;">' + r + "<\/span>"), n = document.getElementById(t)) : window.getSelection && (u = window.getSelection(), u.getRangeAt ? u.rangeCount > 0 && (f = u.getRangeAt(0).cloneRange()) : (f.setStart(u.anchorNode, u.anchorOffset), f.setEnd(u.focusNode, u.focusOffset), f.collapsed !== u.isCollapsed && (f.setStart(u.focusNode, u.focusOffset), f.setEnd(u.anchorNode, u.anchorOffset))), u.toString() !== "" && u.toString() !== " " && (f.collapse(!0), n = document.createElement("span"), n.id = t, n.appendChild(document.createTextNode(i)), f.insertNode(n))), n) {
            u.toString() !== "" && wrapper.find(".formatbar").show();
            var s = n;
            var left = 0;
            var top = 0;

            typeof viewAnswerMode === "undefined" ? (left += s.offsetLeft, top += s.offsetTop) : (left += $(s).offset().left - $(".selectable-text").offset().left, top += $(s).offset().top - $(".selectable-text").offset().top);
            top = top - 38;
            if ($(s).parents(".input-question.selectable-text, .question.selectable-text").length) {
                var currTop = $(s).parents(".input-question.selectable-text, .question.selectable-text")[0].offsetTop;
                var currLeft = $(s).parents(".input-question.selectable-text, .question.selectable-text")[0].offsetLeft;
                top = top + currTop;
                left = left + currLeft - 16;
            } else if ($(s).parents("table").length) {
                var tableTop = $(s).parents("table")[0].offsetTop;
                var tableLeft = $(s).parents("table")[0].offsetLeft;

                var colTop = $(s).parents("td")[0].offsetTop;
                var colLeft = $(s).parents("td")[0].offsetLeft;

                top = top + tableTop + colTop;
                left = left + tableLeft + colLeft;
            }
            typeof extraHeightCom !== "undefined" && (top = top + extraHeightCom);

            wrapper.find(".formatbar").css("top", top).css("left", left);
            n.parentNode && n.parentNode.removeChild(n);

        }
    }

    function getSelectedText() {
        var text = "";
        return window.getSelection ? text = window.getSelection() : document.getSelection ? text = document.getSelection() : document.selection && (text = document.selection.createRange().text), text;
    }

    function getSelectedHtml() {
        var self = this;
        var html = "";
        if (typeof window.getSelection !== "undefined") {
            var sel = window.getSelection();
            if (sel.rangeCount) {
                var container = document.createElement("div");
                for (var i = 0, len = sel.rangeCount; i < len; ++i) {
                    var range = sel.getRangeAt(i);
                    var fragment = range.cloneContents();
                    container.appendChild(fragment);
                    unHighlightChildElement.call(self, $(container));
                }
                html = container.innerHTML;
            }
        } else if (typeof document.selection !== "undefined") {
            if (document.selection.type === "Text") {
                html = document.selection.createRange().htmlText;
            }
        }
        return html;
    }

    function highlightText(className) {
        var self = this;
        var r = getSelectedText.call(self),
            u = getSelectedHtml.call(self),
            t, i;
        if (u !== "") {
            i = r.getRangeAt(0);
            if ($(i.commonAncestorContainer).is("span[class^='highlight']")) {
                if ($(i.commonAncestorContainer).html() === u) {
                    $(i.commonAncestorContainer).attr("class", className);
                    document.getSelection().removeAllRanges();
                    return;
                }
            }
            t = document.createElement("SPAN");
            t.className = className;
            t.innerHTML = u;
            i.deleteContents();
            i.insertNode(t);
            self.LastHighlight = t;
            $(".formatbar").hide();

            document.getSelection().removeAllRanges();
        };
    }

    function unHighlightText() {
        var self = this;
        var range = window.getSelection().getRangeAt(0);
        var node = $(range.commonAncestorContainer);
        var content = getSelectedHtml.call(self);

        var spanTag = document.createElement("span");
        spanTag.className = "highlight-transparent";
        spanTag.innerHTML = content;

        range.deleteContents();
        range.insertNode(spanTag);

        var parents = $(spanTag).parents("span[class^='highlight']");
        if (parents.length !== 0) {

            var topParent = $(parents[parents.length - 1]);
            var parentContent = topParent.wrap("</p>").parent().html();
            topParent.unwrap();

            var contentReplacement = generateHighlightContentReplacement.call(self, content, parents);

            parentContent = parentContent.replace('<span class="highlight-transparent">' + content + '</span>', contentReplacement);
            topParent.replaceWith(parentContent);
        }

        node.find("span.highlight-transparent").each(function () {
            var html = $(this).html();
            $(this).replaceWith(html);
        });

        $(".formatbar").hide();

        initializeHighlight.call(self, $(range.commonAncestorContainer).closest(".wrapper-section"));
    }

    function generateHighlightContentReplacement(content, parents) {
        var self = this;

        var spanClasses = [];

        parents.each(function (index, row) {
            spanClasses.push($(row).attr("class"));
        });

        var spanCloseTag = spanClasses.map(item => { return '</span>'; }).join('');
        var spanOpenTag = spanClasses.slice(0).reverse().map(item => { return '<span class="' + item + '">'; }).join('');

        return spanCloseTag + content + spanOpenTag;
    }

    function unHighlightChildElement(element) {
        var self = this;
        element.find("span[class^='highlight']").each(function () {

            if ($(this).find("span[class^='highlight']").length !== 0) {
                unHighlightChildElement.call(self, $(this));
            }

            var children = $(this).html();
            $(this).replaceWith(children);
        });
    }

    function constructSubmitData(formName) {
        var self = this;

        $("#" + formName + " input:hidden[name*='IeltsMockTest_[ROP]']").remove();

        $(".droppable")
            .each(function () {
                var sectionKey = $(this).data("sentencekey");
                var questionId = $(this).data("orderparagraphid");
                var mockTestQuestionId = $(this).data("mocktestquestionid");
                var sectionType = $(this).data("sectiontype");
                var answerId = $(this).data("answerid");
                var sortingIndexTarget = sectionKey.replace("Q", "");

                if (answerId !== undefined && answerId !== "") {
                    var inputName = 'IeltsMockTest_' + sectionType + "_" +
                        mockTestQuestionId +
                        "_" +
                        questionId +
                        "_" +
                        answerId;

                    $("#" + formName).append('<input type="hidden" name="' + inputName + '" value="' +
                        sortingIndexTarget +
                        '" />');
                }
            });

        $("#" + formName + " input:hidden")
            .not('[name*="MockTestId"]')
            .not('[name*="ActivityId"]')
            .not('[name*="IeltsMockTest"]')
            .remove();

        $("#" + formName + " .disabled").removeAttr("disabled").removeClass("disabled");
        $("#" + formName + " [disabled='disabled']").removeAttr("disabled");
    }

    function updateParentActivityPanel(response) {
        var self = this;

        if (window.opener !== null && !window.opener.closed) {

            try {
                var examPreparationBase = new StudentExamPreparationBase();
                var activityId = $('#ActivityId').val();
                var firstInfoText = "";

                examPreparationBase.UpdateWindowOpenerActivity(
                    self.MobileSiteUrl,
                    activityId,
                    response);

                if (response.Value.FirstAnsweredMessage !== "") {
                    firstInfoText += "<br/><br/>" + response.Value.FirstAnsweredMessage + "<br/><br/>";
                }

                var completedMessage = $(".wrapper-section").data("task-completed-message");
                var message = completedMessage + firstInfoText + response.Value.LastAnsweredMessage;
                $("#checkedIcon-" + activityId, window.opener.document).addClass("fa fa-check-circle");
                $("#panel-" + activityId, window.opener.document).removeClass("panel-default");
                $("#panel-" + activityId, window.opener.document).addClass("panel-success");
                $("#badge-" + activityId, window.opener.document).addClass("badge--success");
                $("#badge-" + activityId, window.opener.document).html('Done');
                $("#descriptionPanel-" + activityId, window.opener.document).html(message);
                $("#label-" + activityId, window.opener.document).remove();

                if (response.IsGroupCompleted) {
                    $("#checkedGroupIcon-" + response.GroupActivityId, window.opener.document)
                        .addClass("fa fa-check-circle");
                    $("#groupActivity-" + response.GroupActivityId, window.opener.document).addClass("panel-success");
                }

                if (response.IsSubModuleCompleted) {
                    $("#checkedModuleIcon-" + response.SubModuleId, window.opener.document)
                        .addClass("fa fa-check-circle");
                    $("#subModulePrimary-" + response.SubModuleId, window.opener.document)
                        .addClass("panel-success panel-task");
                }

                examPreparationBase.UpdateDashboardActivityCourse(activityId, response.Value.LastAnsweredMessage, window.opener.document);
                examPreparationBase.UpdatePanelProgress(window.opener.document, activityId);

            } catch(e) {
                return true;
            }

        }
    }

    function timeOut() {
        var self = this;
        stopAudio.call(self);
        clearInterval(self.CountDown);

        var submitBtn = $('.submit-btn');
        $(submitBtn).click();
    }

    function goTo(targetGroupIndex, currGroupIndex) {
        var self = this;
        var targetSectionGroup = $("#section-group-" + targetGroupIndex);
        var currSectionGroup = $("#section-group-" + currGroupIndex);

        currSectionGroup.hide();
        targetSectionGroup.show();

        self.CurrentSectionGroupIndex = targetGroupIndex;

        setNavigationButtonVisible.call(self, targetGroupIndex);

        $(".content-panel").scrollTop(0);
    }

    function setNavigationButtonVisible(targetGroupIndex) {
        var targetSectionGroup = $("#section-group-" + targetGroupIndex);

        if (targetSectionGroup.data("is-show-prev") === "True") {
            $(".prev-btn").show();
        }
        else {
            $(".prev-btn").hide();
        }

        if (targetSectionGroup.data("is-show-next") === "True") {
            $(".next-btn").show();
        }
        else {
            $(".next-btn").hide();
        }

        if (targetSectionGroup.data("is-show-answer") === "True") {
            $(".show-answer-btn").show();
        }
        else {
            $(".show-answer-btn").hide();
        }

        if (targetSectionGroup.data("is-show-submit") === "True") {
            $(".submit-btn").show();
            $(".retry-btn").show();
        }
        else {
            $(".submit-btn").hide();
            $(".retry-btn").hide();
        }
    }

    // Constructor
    var studentIeltsReadingPracticeMockTestView = function (element) {
        this.Element = element;
        this.MaintenanceForm = $("#maintenanceForm");
        this.CountDown = null;
        this.BeforePlayAudioCountDown = null;
        this.LastHighlight = null;
        this.NumberOfRetry = 0;
        this.Interval = null;
        this.DisabledMode = null;
        this.CurrentSectionGroupIndex = null;
        this.SubmitResponse = null;
        this.MobileSiteUrl = null;
        this.DragMode = false;
        this.ScrollDirection = null;
    };

    studentIeltsReadingPracticeMockTestView.prototype = {
        constructor: studentIeltsReadingPracticeMockTestView,
        Register: function () {
            var self = this;

            self.Initialize();
        },
        Initialize: function () {
            var self = this;

            self.CurrentSectionGroupIndex = 1;
            setNavigationButtonVisible.call(self, self.CurrentSectionGroupIndex);

            initializeQuestionPalette.call(self);
            initEventHandler.call(self);
            initializeWordCount.call(self);
            initializeHighlightBar.call(self);
            initializeHighlight.call(self);
            initializeDragAndDrop.call(self);
            initializeDropDownList.call(self);
            prepareTimer.call(self);
            prepareAudio.call(self);
        }
    };

    // Export javascript class into window environment
    window.StudentIeltsReadingPracticeMockTestView = studentIeltsReadingPracticeMockTestView;
})(jQuery, window);;
var StudentLessonSetIndex = function (element) {
    this.Element = element;
}

StudentLessonSetIndex.prototype = {
    constructor: StudentLessonSetIndex,
    Register: function () {
        var self = this;
        self.ViewLesson();

        $('#LevelId', this.Element)
            .on("change",
                function () {
                    self.ViewLesson();
                });

        $('#LessonType', this.Element)
            .on("change",
                function () {
                    self.ViewLesson();
                });
    },
    ViewLesson: function() {
        var self = this;

        var levelId = $("#LevelId").val();
        var lessonType = $("#LessonType").val();

        var maintenanceDiv = $('#listPane');
        var url = $('#maintenanceForm', this.Element).data('url');
        url += '?lessonType=' + lessonType;
        url += '&levelId=' + levelId;

        $('#top-content-panel #tab-header').remove();

        showMaintenancePane(url, function(data) {
            maintenanceDiv.html(data);
            $('#tab-header').appendTo('#top-content-panel');

            var helper = new Helper();
            var namespace = helper.CreateNameSpaceFromURL(url);
            var apps = new Application(self.Element, namespace);
            apps.Register();

            scrollToElement("listPane");

        });

    }
};
var StudentLessonSetList = function (element) {
    this.Element = element;
}

StudentLessonSetList.prototype = {
    constructor: StudentLessonSetList,
    Register: function () {
        var self = this;

        $('a[id*="lesson-"]', self.Element)
            .prop('onclick', null)
            .off('click')
            .on('click',
                function() {
                    self.ShowPopUp($(this).next().data('url'), $(this).next().data('lesson-id'));
                });
    },
    ShowPopUp: function(url, lessonId) {
        url += '?lessonId=' + lessonId;
        showPopup(url);
    }
};
var StudentLiveClassMockIndex = function (element) {
    this.Element = element;
}

StudentLiveClassMockIndex.prototype = {
    constructor: StudentLiveClassMockIndex,
    Register: function () {
        var self = this;

        $('#toggle-1').bootstrapToggle();
        $('#toggle-2').bootstrapToggle();

        var isTrigger1 = true;
        var isTrigger2 = true;

        $('#button-connect-1').show();
        $('#button-connect-2').hide();

        $('#toggle-1')
            .change(function () {

                isTrigger2 = false;

                if (isTrigger1) {
                    if ($(this).prop('checked')) {
                        $('#toggle-2').bootstrapToggle('off');
                        $('#button-connect-1').show();
                        $('#button-connect-2').hide();
                    } else {
                        $('#toggle-2').bootstrapToggle('on');
                        $('#button-connect-1').hide();
                        $('#button-connect-2').show();
                    }
                }

                isTrigger2 = true;

            });

        $('#toggle-2')
            .change(function () {

                isTrigger1 = false;

                if (isTrigger2) {
                    if ($(this).prop('checked')) {
                        $('#toggle-1').bootstrapToggle('off');
                        $('#button-connect-1').hide();
                        $('#button-connect-2').show();
                    } else {
                        $('#toggle-1').bootstrapToggle('on');
                        $('#button-connect-1').show();
                        $('#button-connect-2').hide();
                    }
                }

                isTrigger1 = true;
            });
    }
};
var StudentLiveClassVideoIndex = function (element) {
    this.Element = element;
    this.IsTriggerMode = false;
    this.TriggerId = 0;
}

StudentLiveClassVideoIndex.prototype = {
    constructor: StudentLiveClassVideoIndex,
    Register: function () {
        closeMaintenanceWindow();
        var self = this;
        var grid = $("#gridVideo", self.Element);

        grid.bootgrid({            
            ajax: true,
            templates: {
                header: "<div id=\"{{ctx.id}}\" class=\"{{css.header}}\"><div class=\"row\"><div class=\"col-sm-12 actionBar\"><span class=\"pull-left text-red\" style=\"margin-top: 8px\"><strong>*Recordings of the Live Classes will be uploaded on the following business day</strong></span><p class=\"{{css.actions}}\"></p></div></div></div>",
                search: ''
            },
            post: function () {
            },
            sorting: false,
            url: grid.data('url'),
            formatters: {
                "VideoName": function (column, row) {
                    var html = '';

                    if (!row.IsWatched) {
                        html = '<b><i class="fa fa-exclamation-circle danger-color" aria-hidden="true"></i> <a href="#" class="videoPreview" data-video="'+row.Id + '" data-video-type="' + row.VideoType + '" id="' + row.WistiaId + '">' + row.VideoName + '</a></b>';
                    } else {
                        html = '<i class="fa fa-check success-color" aria-hidden="true"></i> <a href="#" class="videoPreview" data-video="' + row.Id + '" data-video-type="' + row.VideoType + '" id="' + row.WistiaId + '">' + row.VideoName + '</a>';
                    }
                    return html;
                },
                "DeliveryDate" : function(column, row) {
                    if (!row.IsWatched) {
                        return '<b>' + row.DeliveryDate + '</b>';
                    } else {
                        return row.DeliveryDate;
                    }
                },
                "UploadDate": function (column, row) {
                    if (!row.IsWatched) {
                        return '<b>' + row.UploadDate + '</b>';
                    } else {
                        return row.UploadDate;
                    }
                },
                "VideoStatus": function (column, row) {
                    if (!row.IsWatched) {
                        return '<b>New</b>';
                    } else {
                        return 'Watched';
                    }
                }
            }
        })
        .on("loaded.rs.jquery.bootgrid",
            function () {
                $('.videoPreview', self.Element)
                    .click(function () {
                        var wistiaId = $(this).attr('id');
                        var videoId = $(this).attr('data-video');
                        var updateUrl = grid.data('watched-url');
                        var titleVideo = $(this).html();
                        var videoType = $(this).attr('data-video-type');

                        if (videoId === "") {
                            showErrorDialog("Could not find the video.");
                            return false;
                        }

                        var videoUrl = grid.data('video-url') + '?videoId=' + wistiaId + '&videoType=' + videoType;
                        showVideo(videoUrl, titleVideo, function () {
                            submitData({
                                    'videoId' : videoId
                                },
                                updateUrl,
                                function () {
                                    grid.bootgrid('reload');
                                    hideProcessingDialog();
                                });
                        });
                        return true;
                    });
            });
    }
};
var StudentMiniMockTestAppointmentDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#appointmentBookForm", this.Element);
}

StudentMiniMockTestAppointmentDialog.prototype = {
    constructor: StudentMiniMockTestAppointmentDialog,
    Register: function () {
        var self = this;

        self.LoadWeek();
        $("#appointmentBookDialog").modal();
        $("#appointmentBookDialog").on("hidden.bs.modal", function () {
            hideProcessingDialog();
            var gridDialogShown = $("#gridAppointmentDialog").hasClass("in").toString();
            if (gridDialogShown === "true") {
                backdropModalControl();
            }
        });

    },

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0 }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format"))
        };

        generateWeekList(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });

    },

    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        submitData({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type")

        }, self.form.data("time-url"), function (data) {

            $("#headTitle", self.Element).html('');
            $("#timeList", self.Element).html('');
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + '</h3>' +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + '</p>');

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + ' data-date=' + selectedDate + '>' + item.AvailableTime12 + '</button>');
            });
            backdropModalControl();

            $("#WeekView", self.Element).addClass("hidden");
            $("#TimeView", self.Element).removeClass("hidden");

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back();
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            backdropModalControl();
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    },

    PopulateForm: function (time, selectDate) {
        var self = this;

        $("#errorPane").hide();
        self.form.find('#generatedForm').html("");
        self.form.find('#generatedForm').append('<input type="hidden" name="startHour" value="' + time + '" />');
        self.form.find('#generatedForm').append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    self.form.find('#generatedForm').append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    self.form.find('#generatedForm').append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0")
                {
                    var selectId = $(this).attr("id");
                    self.form.find('#generatedForm').append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');

                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    self.form.find('#generatedForm').append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                self.form.find('#generatedForm').append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');

            });

        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#errorPane").hide();
        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("create-url"), function (data) {
                $("#TotalAppointment").val(data.TotalAppointment);
                $("#NumberOfAppointment").val(data.NumberOfAppointment);
                showInformation(self.form.data("success-message"));
                $('#appointmentBookDialog').modal('hide');
                $("#miniMockTestMenu").click();
            }, function () {
                backdropModalControl();
            });

        }, function () { backdropModalControl(); }, function () { backdropModalControl(); });
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        self.MakeAppointment(time, selectDate);

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    }
};
var StudentMiniMockTestAppointmentEditDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#appointmentEditBookForm", this.Element);
}

StudentMiniMockTestAppointmentEditDialog.prototype = {
    constructor: StudentMiniMockTestAppointmentEditDialog,
    Register: function () {
        var self = this;

        self.LoadWeek();
        $("#appointmentBookDialog").modal();

    },

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + "</h2>");
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0 }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + "</h2>");

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format"))
        };

        generateWeekList(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });

    },

    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        submitData({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type")

        }, self.form.data("time-url"), function (data) {

            $("#headTitle", self.Element).html("");
            $("#timeList", self.Element).html("");
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + "</h3>" +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + "</p>");

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + " data-date=" + selectedDate + ">" + item.AvailableTime12 + "</button>");
            });
            backdropModalControl();

            $("#WeekView", self.Element).addClass("hidden");
            $("#TimeView", self.Element).removeClass("hidden");

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back();
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            backdropModalControl();
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    },

    PopulateForm: function (time, selectDate) {
        var self = this;
        var generatedForm = self.form.find("#generatedForm");

        $("#errorPane").hide();
        generatedForm.html("");
        generatedForm.append('<input type="hidden" name="startHour" value="' + time + '" />');
        generatedForm.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    generatedForm.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');

                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    generatedForm.append('<input type="hidden" name="checkboxAnswer_' + index + "_" + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = "answerType_" + index + "_" + questionId + "";
                $("input[name=" + name + "]").remove();
                generatedForm.append('<input type="hidden" name="answerType_' + index + "_" + questionId + '" value="' + $(this).val() + '" />');

            });

        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#SelectedDate", self.Element).val(selectDate);
        $("#StartHour", self.Element).val(time);
        $("#errorPane").hide();

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("edit-url"),function() {
                showInformation(self.form.data("success-message"));
                $("#appointmentBookDialog").modal("hide");
                $("#appointmentWrapper").html("");
                $("#miniMockTestMenu").click();

            }, function () { backdropModalControl(); });

            return false;
        }, function () { backdropModalControl(); }, function () { backdropModalControl(); });
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        self.MakeAppointment(time, selectDate);

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");

    }
};
var StudentMiniMockTestGridAppointmentDialog = function (element) {
    this.Element = element;
    this.Caller = null;
}

StudentMiniMockTestGridAppointmentDialog.prototype = {
    constructor: StudentMiniMockTestGridAppointmentDialog,
    Register: function () {
        hideProcessingDialog();

        var self = this;
        $("#gridAppointmentDialog").modal();
        var grid = $("#gridAppointment");

        self.LoadGrid(grid);

        $('#appointmentBookDialog').on("hidden.bs.modal", function (e) {
            hideProcessingDialog();
            backdropModalControl();
            var total = $("#TotalAppointment").val();
            var max = $("#NumberOfAppointment").val();

            if (total !== "" || max !== "") {
                if (total >= max) {
                    $("#btnAdd").remove();
                }

                var infoMessage = grid.data("info-message");
                infoMessage = infoMessage.replace("{0}", total);
                infoMessage = infoMessage.replace("{1}", max);

                $("#info-total").html(infoMessage);
            }
            $("#gridAppointment").bootgrid("reload");

        });

        $("#gridAppointmentDialog").on("hidden.bs.modal", function (e) {
            $("#gridAppointment").bootgrid("destroy");
            hideProcessingDialog();
        });

        $("#btnAdd", self.Element).on("click", function () {
            $("#errorPane").remove();
            var maintenanceDiv = $("#appointmentWrapper");
            var url = grid.data("book-url");

            loadApplicationContent(url, "GET", function(data) {
                maintenanceDiv.html(grid.data("error-pane"));
                maintenanceDiv.append(data);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application(maintenanceDiv, namespace);
                apps.RegisterWithCaller(self);
            });

        });

    },

    LoadGrid: function (grid) {
        var self = this;
        $("#errorPane").hide();
        $("#errorPane").empty();

        grid.bootgrid({
                ajax: true,
                post: function () {

                },
                url: grid.data("url"),
                formatters: {
                    "Action": function (column, row) {
                        var html = "";

                        if (row.Status === "Open") {
                            html = '<a href="#" class="actionReschedule" id="' + row.Id + '" " ' +
                                'data-toggle="tooltip" data-appointment-startdate="' + row.AppointmentStartDateTime + '" data-appointment-date="' + row.AppointmentDate + '" data-appointment-time="' + row.Time + '" data-placement="top" ' +
                                'title="' + grid.data("reschedule-tooltip") + '">' +
                                '<i class="fa fa-exchange" aria-hidden="true"></i>' +
                                '</a>';

                            html += '&nbsp;&nbsp;<a href="#" class="actionCancelAppointment" data-id="' + row.Id + '" " ' +
                                'data-toggle="tooltip" data-appointment-startdate="' + row.AppointmentStartDateTime + '" data-appointment-date="' + row.AppointmentDate + '" data-appointment-time="' + row.Time + '" data-placement="top" ' +
                                'title="' + grid.data("cancel-appointment-tooltip") + '">' +
                                '<i class="fa fa-trash" aria-hidden="true"></i>' +
                                '</a>';
                        }

                        return html;
                    }
                }
            }).on("loaded.rs.jquery.bootgrid", function () {

                $('[data-toggle="tooltip"]').tooltip();

                $(".actionReschedule", self.Element).on("click", function () {
                    var btnElement = $(this);
                    submitData({
                        "startDateTime": $(this).data("appointment-startdate"),
                        "appointmentType": grid.data("appointment-type")
                    }, grid.data("different-url"), function (data) {
                        if (data.IsLessThan24Hour) {
                            showInfoDialog(data.Message,function() {
                                backdropModalControl();
                            });
                        } else { self.Reschedule(btnElement, grid); }

                    });  
                });

                $(".actionCancelAppointment", self.Element).on("click", function () {

                    var appointmentStartDate = $(this).data("appointment-startdate");
                    var appointmentId = $(this).data("id");

                    submitData({
                        "startDateTime": appointmentStartDate,
                        "appointmentType": grid.data("appointment-type")
                    }, grid.data("different-url"), function (data) {
                        if (data.IsLessThan24Hour) {
                            showInfoDialog(data.MessageCancel, backdropModalControl);

                        } else {
                            var url = grid.data("cancel-url");
                            url += "?appointmentId=" + appointmentId;

                            submitNonForm(grid.data("delete-message"), url, function (data) {
                                $("#gridAppointmentDialog").modal("hide");
                                showInformation(grid.data("appointment-cancel"));
                                $("#miniMockTestMenu").click();

                            }, backdropModalControl, backdropModalControl);
                        }
                    });

                });

            });
    },

    Reschedule: function(element, grid) {
        var id = element.attr('id');
        var appointmentDate = element.data('appointment-date') + " " + element.data('appointment-time');

        var message = grid.data("change-message");
        message = message.replace("[DATE TIME]", appointmentDate);
        message = message.replace("[APPOINTMENT TYPE]", "appointment");

        showConfirmationDialog(message,
            function () {

                $("#errorPane").remove();
                var maintenanceDiv = $("#appointmentWrapper");
                var url = grid.data("edit-url");
                url += '?id=' + id;

                loadApplicationContent(url, "GET", function (data) {

                    maintenanceDiv.html(grid.data("error-pane"));
                    maintenanceDiv.append(data);

                    var helper = new Helper();
                    var namespace = helper.CreateNameSpaceFromURL(url);
                    var apps = new Application(maintenanceDiv, namespace);
                    apps.RegisterWithCaller(self);

                });

            }, function () { backdropModalControl(); }, function () { backdropModalControl(); });
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    }
};
var StudentMiniMockTestIndex = function (element) {
    this.Element = element;
    this.ScoreChartPanel = $("#scoreChartPanel");
}

StudentMiniMockTestIndex.prototype = {
    constructor: StudentMiniMockTestIndex,
    Register: function () {
        var self = this;
        $("#btnStart").click(function(e) {
            e.preventDefault();
            closeErrorPane();

            var element = $(this);
            var url = element.data("url") +
                "?mockTestId=" +
                element.data("mock-test-id");
            showPopup(url);
        });

        $("#btnBuyAddOns").click(function(e) {
            e.preventDefault();

            showLoadingDialog();
            var url = $(this).data("payment-url");

            if (url !== "") {
                $.get(url, function (contentData) {
                    $('#mainUserContent').html(contentData);
                    hideLoadingDialog();

                    var helper = new Helper();
                    var namespace = helper.CreateNameSpaceFromURL(contentUrl);
                    var apps = new Application($('#mainUserContent'), namespace);
                    apps.Register();
                });
            }
        });

        $("#btnScoreSummary").click(function (e) {
            e.preventDefault();
            var element = $(this);
            var url = element.data("url");
            var container = $("#mainUserContent");

            loadApplicationContent(url, "GET",
                function (result) {
                    container.html(result);
                });
        });

        $("#btnBookAppointment").click(function (e) {
            e.preventDefault();
            var maintenanceDiv = $("#appointmentWrapper");
            var appointmentUrl = $(this).data("appointment-url");

            self.GenerateApplicationDialog(appointmentUrl, maintenanceDiv);
        });

        $("#btnViewAppointment").click(function (e) {
            e.preventDefault();
            var maintenanceDiv = $("#gridAppointmentWrapper");
            var appointmentUrl = $(this).data("grid-appointment-url");

            self.GenerateApplicationDialog(appointmentUrl, maintenanceDiv);
        });
        
        $('.answer-report-tooltip').tooltipster({
            theme: 'tooltipster-light',
            side: 'right'
        });

        $('.answerDetailLink').click(function () {
            var mockTestQuestionId = $(this).data("mock-test-question-id");
            var url = $(this).data("url") + "?mockTestQuestionId=" + mockTestQuestionId;
            showPopup(url);
        });

        self.GetScoreChart();

        
    },
    GenerateApplicationDialog: function(url, maintenanceDiv) {

        showProcessingDialog();
        $("#errorPane").remove();
        maintenanceDiv.html("");

        $.get(url,
            function (data) {
                maintenanceDiv.html('');
                maintenanceDiv.append(data);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application(maintenanceDiv, namespace);
                apps.RegisterWithCaller(self);

            });
    },
    GetScoreChart: function () {
        var self = this;
        var url = self.ScoreChartPanel.data("get-url");

        self.ScoreChartPanel.html('<span class="icon fa fa-refresh fa-spin"></span> ' + self.ScoreChartPanel.data("loading-message"));

        submitDataWithoutLoader({}, url, function (data) {
            self.ScoreChartPanel.empty();
            self._generateScoreChart(data.Value);
            self.ScoreChartPanel.parent().addClass("p-0");
        },
        function () {
                return;
        });
    },

    _generateScoreChart: function (dataPanel) {
        var self = this;
        var xdata = [];
        var ydata = [];
        var scoreTextData = [];
        var colorData = [];
        var examTypeCode = $("#ExamTypeCode").val();

        $.each(dataPanel,
            function (index, row) {

                xdata.push(row.Title);
                ydata.push(row.Score);

                var chartItem = {
                    scoreLabel: row.ScoreText,
                    score: row.Score,
                    sectionScoreText: row.SectionScoreText
                };
                scoreTextData.push(chartItem);

                if (row.Title === 'OVERALL') {
                    colorData.push(self.ScoreChartPanel.data("overall-color"));
                }
                else {
                    colorData.push(self.ScoreChartPanel.data("default-color"));
                }
            });

        function getScoreText(score) {
            return scoreTextData.find(item => item.score === score).scoreLabel;
        }

        function getSectionScoreText(score) {
            return scoreTextData.find(item => item.score === score).sectionScoreText;
        }

        Highcharts.chart('scoreChartWrapper', {
            chart: {
                type: 'bar'
            },
            title: {
                text: 'Overall Score',
                align: 'left',
                style: {
                    "color": "#2D4F7D",
                    "fontSize": "18px",
                    "fontWeight": "500"
                }
            },
            xAxis: {
                categories: xdata,
                title: {
                    text: null
                }
            },
            yAxis: {
                min: 0,
                max: 100,
                title: {
                    text: null
                },
                labels: {
                    overflow: 'justify',
                    step: 5
                },
                lineWidth: 2,
                lineColor: '#bdbdbd'
            },
            tooltip: {
                enabled: examTypeCode === $(".page-main").data("exam-type-oet"),
                formatter: function () {
                    return this.x + "<br/>" + getSectionScoreText(this.y);
                }
            },
            plotOptions: {
                bar: {
                    dataLabels: {
                        enabled: true
                        
                    }
                },
                series: {
                    dataLabels: {
                        formatter: function () {
                            return getScoreText(this.y);
                        }
                    },
                    pointWidth: 30,
                    colorByPoint: true
                }
            },
            credits: {
                enabled: false
            },
            
            series: [{
                showInLegend: false,
                data: ydata,
                colors: colorData,
                
            }],
            navigation: {
                buttonOptions: {
                    verticalAlign: 'top',
                    y: 0
                }
            }
        });

    }
};
var StudentMiniMockTestView = function (element) {
    this.Element = element;
    this.MaintenanceForm = $("#maintenanceForm");
    this.CountDown = null;
    this.BeforeRecordCountDown = null;
    this.BeforePlayAudioCountDown = null;
    this.CurrentMockTestQuestionId = null;
    this.IsAudioPlayed = false;
};

// group section timer
var countDown = null; // to differentiate between record duration and question duration
var interval = null;

// question timer
var questionCountDown = null;
var questionInterval = null;

StudentMiniMockTestView.prototype = {
    constructor: StudentMiniMockTestView,
    Register: function () {
        var self = this;

        self.Initialize();

        $(".closeButton").on("click",
            function () {
                window.close();
            });
    },
    Initialize: function () {
        var self = this;

        self.InitializeDragAndDrop();
        initializeRecorderPanel();

        $(".wordCount").html(0);

        $(".wrapper-question")
            .each(function () {
                var wrapper = $(this);

                var sectionType = wrapper.data("section-type");
                if (sectionType !== "[INS]") {
                    wrapper.find(".next-btn").attr("disabled", "disabled");
                    wrapper.find("#submitButton").attr("disabled", "disabled");
                }

                self._radioButtonClickHandler(wrapper);
                self._checkBoxClickHandler(wrapper);
                self._clickableClickHandler(wrapper);
                self._highlightWordClickHandler(wrapper);
                self._inputTextChangeHandler(wrapper);
                self._inputTextAreaChangeHandler(wrapper);
                self._clickWordClickHandler(wrapper);
                self._selectChangeHandler(wrapper);
                self._recordClickHandler(wrapper);
                self._uploadAudioFileHandler(wrapper);
            });
        $("#submitButton").on("click", function () {
            window.StudentMiniMockTestView.prototype.StopAudio();
            window.StudentMiniMockTestView.prototype.ClearIntervalBeforePlayAudio();

            self.SaveAnswer();
        });

        var sectionWrapper = $("#Q1");
        self.PrepareTimerForSectionGroup(sectionWrapper);
        var recordingPanel = sectionWrapper.find("#recorderControlPanel");
        if (recordingPanel.length > 0) {
            self._startBeforeRecordCountdown(sectionWrapper);
        }
        self.NextButtonExtendHandler(sectionWrapper);
    },
    SaveAnswer: function () {
        var self = this;
        self.StopAudio();
        var url = $("#maintenanceForm").data("save-url");
        self._constructSubmitData();

        submitForm("#maintenanceForm",
            url,
            function (data) {
                $("#submitButton").hide();
                $(".page-main-activity").empty();
                $("#SubmittedView").show();
                $("#SubmittedMessage").html(data.Value.Message);

                self._updateParentActivityPanel(data);
            });
    },
    InitializeDragAndDrop: function () {
        var uniqueAnswerIds = new Array();

        function isInArray(value, array) {
            return array.indexOf(value) > -1;
        }

        $(".draggable")
            .draggable({
                helper: "clone",
                revert: function () {
                    if ($(this).hasClass("drag-revert")) {
                        return true;
                    }
                }
            });

        $(".droppable")
            .droppable({
                accept: ".draggable",
                drop: function (e, ui) {
                    var answerId = $(ui.draggable).data("answerid");
                    var sortingIndex = $(ui.draggable).data("sortingindex");
                    var sentenceKey = $(ui.draggable).data("sentencekey");
                    if ((uniqueAnswerIds.length === 0 || isInArray(answerId, uniqueAnswerIds) === false)) {
                        if ($(this).find(".remove-sentence").hasClass("hidden") &&
                            !$(this).hasClass("correct-answer")) {
                            var content = $(this);
                            var btnNext = content.closest(".wrapper-question").find(".next-btn");
                            var orderParagraph = content.closest(".wrapper-question").find(".sentence-text");
                            var btnSubmit = content.closest(".wrapper-question").find("#submitButton");
                            var haveSentence = 0;

                            $(this)
                                .find(".remove-sentence")
                                .click(function (e) {
                                    e.preventDefault();
                                    content.find(".sentence-text").html("");
                                    content.find(".remove-sentence").addClass("hidden");
                                    $("#draggable-" + $(this)[0].dataset["answerid"]).removeClass("hidden");
                                    var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                    uniqueAnswerIds.splice(index, 1);
                                    $(this).parent().data("answerid", "");

                                    haveSentence = 0;
                                    orderParagraph.each(function () {
                                        if ($(this).html() !== "") {
                                            haveSentence--;
                                        }
                                    });

                                    if (orderParagraph.length === haveSentence) {
                                        btnNext.removeAttr("disabled");
                                        btnSubmit.removeAttr("disabled");
                                    } else {
                                        btnNext.attr("disabled", "disabled");
                                        btnSubmit.attr("disabled", "disabled");
                                    }
                                });
                            if ($(this).data("answerid") !== "") {
                                var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                uniqueAnswerIds.splice(index, 1);
                            }
                            $(this).data("answerid", answerId);
                            $(this).data("sortingindex", sortingIndex);
                            $(this).data("sentencekey", sentenceKey);
                            $(this).find(".sentence-text").html($(ui.draggable).html());
                            $(this).find(".remove-sentence").removeClass("hidden")
                                .attr("data-answerid", answerId);

                            $("#draggable-" + answerId).addClass("hidden");

                            uniqueAnswerIds.push($(this).data("answerid"));

                            orderParagraph.each(function () {
                                if ($(this).html() !== "") {
                                    haveSentence++;
                                }
                            });

                            if (orderParagraph.length === haveSentence) {
                                btnNext.removeAttr("disabled");
                                btnSubmit.removeAttr("disabled");
                            } else {
                                btnNext.attr("disabled", "disabled");
                                btnSubmit.attr("disabled", "disabled");
                            }
                            return $(ui.draggable).removeClass("drag-revert");
                        } else {
                            $("#draggable-" + answerId).removeClass("hidden");
                            return $(ui.draggable).addClass("drag-revert");
                        }
                    }
                }
            });
    },
    NextButtonExtendHandler: function (wrapper) {
        var self = this;
        var sectionType = wrapper.data("section-type");

        initAudioPlayerWidget(wrapper.find("#audioPlayerPanel"));

        var groupDurationPanel = wrapper.parents(".panelSectionGroup").find(".timer-duration-panel");
        if (groupDurationPanel.length > 0 && groupDurationPanel.html() === "00:00") {
            return;
        }

        var questionDurationPanel = wrapper.find(".timer-duration-panel");
        if (questionDurationPanel.length > 0 && questionDurationPanel.html() === "00:00") {
            return;
        }

        if (sectionType === "[FIB]" ||
            sectionType === "[MCSA]" ||
            sectionType === "[MCMA]" ||
            sectionType === "[HCS]" ||
            sectionType === "[SMW]" ||
            sectionType === "[HIW]"
        ) {
            self._startBeforePlayAudioCountdown(wrapper);
        } else if (sectionType === "[RA]") {
            self._startBeforeRecordCountdown(wrapper);
        }
        else if (sectionType === "[INS]") {
            self._startAudio(wrapper);
        }

        if (sectionType === "[RL]") {
            self._startBeforePlayAudioRLCountdown(wrapper);
            self._retellLectureAudioPlayerHandler(wrapper);
        } else if (sectionType === "[DI]") {
            var playRingBell = function () {
                wrapper.find(".bell-ring")[0].play();
            };
            self._startBeforeRecordCountdown(wrapper, playRingBell);
        } else if (sectionType === "[RS]") {
            self._startBeforePlayAudioCountdown(wrapper);
            self._repeatSenteceAudioPlayerHandler(wrapper);
        } else if (sectionType === "[ASQ]") {
            self._startBeforePlayAudioCountdown(wrapper);
            self._answerShortQuestionAudioPlayerHandler(wrapper);
        } else if (sectionType === "[DI]") {
            self._startBeforeRecordCountdown(wrapper);
        } else if (sectionType === "[SST]") {
            self._startBeforePlayAudioRLCountdown(wrapper);
            self._spokenTextAudioPlayerHandler(wrapper);
        } else if (sectionType === "[WFD]") {
            self._startBeforePlayAudioCountdown(wrapper);
            self._writeFromDictionaryAudioPlayerHandler(wrapper);
        } else if (sectionType === "[LFIB]") {
            self._listeningFillInTheBlankAudioPlayerHandler(wrapper);
        }
    },
    TimeOut: function (wrapper) {
        var self = this;
        var currentGroupSection = wrapper.parents(".panelSectionGroup");
        var currentGroupSectionId = currentGroupSection.prop("id");
        var currentActiveSection = currentGroupSection.find(".wrapper-question:visible");

        var nodes = document.getElementById(currentGroupSectionId).getElementsByTagName('*');
        $(nodes).attr("disabled", "disabled").addClass("disabled");

        var nextBtns = document.getElementById(currentGroupSectionId).getElementsByClassName('next-btn');
        $(nextBtns).removeAttr("disabled").removeClass("disabled");

        var submitBtn = $(document.getElementById(currentGroupSectionId)).find("#submitButton");
        $(submitBtn).removeAttr("disabled").removeClass("disabled");

        var draggables = document.getElementById(currentGroupSectionId).getElementsByClassName('draggable');
        $(draggables).addClass("no-click");

        var buttonHandlerEl = wrapper.closest(".panelSectionGroup").find(".next-btn").parent();
        var lastNextButton = wrapper.closest(".panelSectionGroup").find(".wrapper-question:last-child").find(".next-btn");
        var submitButton = wrapper.closest(".panelSectionGroup").find(".wrapper-question:last-child").find("#submitButton");

        buttonHandlerEl.empty();

        if (submitButton.length > 0) {
            buttonHandlerEl.append(submitButton);
            $(".submit-btn").off("click").on("click", function () {
                self.SaveAnswer();
            });
        }

        if (lastNextButton.length > 0) {
            buttonHandlerEl.append(lastNextButton);
        }

        self.StopRecord(currentActiveSection.prop("id"));
        self.StopAudio();
        self.StopYoutubeVideo();
        self.StopWistiaVideo(currentActiveSection.prop("id"));
        self._stopBeforeRecordCounter();
        self._stopBeforePlayAudioCounter();
    },
    QuestionTimeOut: function (wrapper) {
        var self = this;
        var currentSection = wrapper;
        var currentSectionId = currentSection.prop("id");

        var nodes = document.getElementById(currentSectionId).getElementsByTagName('*');
        $(nodes).attr("disabled", "disabled").addClass("disabled");

        var nextBtns = document.getElementById(currentSectionId).getElementsByClassName('next-btn');
        $(nextBtns).removeAttr("disabled").removeClass("disabled");

        var submitBtn = $(document.getElementById(currentSectionId)).find("#submitButton");
        $(submitBtn).removeAttr("disabled").removeClass("disabled");

        var draggables = document.getElementById(currentSectionId).getElementsByClassName('draggable');
        $(draggables).addClass("no-click");

        self.StopRecord(currentSectionId);
        self.StopAudio();
        self.StopYoutubeVideo();
        self.StopWistiaVideo(currentSectionId);
        self._stopBeforeRecordCounter();
        self._stopBeforePlayAudioCounter();
    },
    PrepareTimerForSectionGroup: function (wrapper) {
        var self = this;
        var duration = 0;
        var durationPanel = wrapper.parents(".panelSectionGroup").find(".timer-duration-panel");
        if (durationPanel.length > 0) {
            duration = $(durationPanel).data("duration");
        }

        var secondaryTimer = wrapper.find(".secondaryTimer");

        if (duration !== 0) {
            var timerId = durationPanel.prop("id");

            interval = setInterval(function () {
                DynamicTimerWithoutPopup("#" + timerId, "",
                    function () { self.TimeOut(wrapper); });

                if (secondaryTimer.length) {
                    secondaryTimer.html(durationPanel.html());
                }
            },
                1000);
            countDown = interval;
        }
    },
    PrepareTimerForQuestion: function (wrapper) {
        var self = this;
        var duration = 0;
        var durationPanel = wrapper.find(".timer-duration-panel");
        if (durationPanel.length > 0) {
            duration = $(durationPanel).data("duration");
        }

        var readingDuration = 0;
        var secondaryTimer = wrapper.find(".secondaryTimer");
        var isDisableAutoStart = wrapper.find(".disable-auto-start-timer").length > 0;
        var oetWritingPanel = wrapper.find(".oet-writing-panel");

        if (oetWritingPanel.length > 0) {
            readingDuration = oetWritingPanel.data("reading-duration");
        }

        if (isDisableAutoStart) {
            return;
        }

        if (duration !== 0) {
            var timerId = durationPanel.prop("id");

            questionInterval = setInterval(function () {
                DynamicTimerWithoutPopup("#" + timerId, "",
                    function () { self.QuestionTimeOut(wrapper); });

                if (secondaryTimer.length) {
                    secondaryTimer.html(durationPanel.html());
                }

                if (readingDuration > 0) {
                    readingDuration--;
                }

                if (readingDuration === 0 && oetWritingPanel.length) {
                    oetWritingPanel.find("textarea").removeAttr("disabled");
                }
            },
                1000);
            questionCountDown = questionInterval;
        }
    },
    StopYoutubeVideo: function () {
        $(".youtube-player").each(function () {
            var el_src = $(this).attr("src");
            $(this).attr("src", el_src);
        });
    },
    StopWistiaVideo: function (currentSection) {
        if ($(currentSection).find(".wistia_responasive_wrapper").length > 0) {
            var allVideos = Wistia.api.all();
            for (var i = 0; i < allVideos.length; i++) {
                allVideos[i].pause();
            }
        }
    },
    StopAudio: function () {
        var sounds = $(".audio-player");
        var i;
        for (i = 0; i < sounds.length; i++) sounds[i].pause();
    },
    StopRecord: function (currentSection) {
        var wrapper = $("#" + currentSection);
        var recordButton = wrapper.find("#recordButton");
        if (recordButton.length && !recordButton.hasClass("btn-danger")) {
            $(recordButton).click();
        }
    },
    ClearIntervalBeforePlayAudio: function () {
        var self = this;
        clearInterval(self.BeforePlayAudioCountDown);
    },
    _setUploadAudioHandler: function (wrapper) {
        var self = this;
        self.CurrentMockTestQuestionId = wrapper.data("id");
        var recordingUrl = self.MaintenanceForm.data("upload-recorder-file-url");
        recordingUrl += "?mockTestQuestionId=" + self.CurrentMockTestQuestionId;

        uploadRecorderSpeakingFile(
            recordingUrl,
            function (response) {
                self._hideLog(wrapper);
                var spinner = wrapper.find('[id^="spinnerImage"]');
                spinner.hide();
                if (response.IsSuccess === true) {
                    wrapper.find("#submitSpeakingAnswerButton").removeClass("hidden");

                    wrapper.find('[id ^= "audio-player"]').attr("src", response.Value.AudioUrl);
                    wrapper.find("#record-url").attr("href", response.Value.AudioUrl);
                    wrapper.find("#record-url").html(response.Value.AudioName);

                    var inputName = 'MiniMockTest_' +
                        wrapper.data("section-type") +
                        "_" +
                        wrapper.data("id") +
                        "_" +
                        response.Value.QuestionId + "_" +
                        response.Value.AnswerId;

                    var inputNamePattern = "MiniMockTest_" + wrapper.data("section-type") + "_" + wrapper.data("id");
                    var existingInput = $('input[name^="' + inputNamePattern + '"]');
                    if (existingInput.length === 0) {
                        $(document.getElementsByName(inputName)).remove();
                        self.MaintenanceForm.append('<input type="hidden" name="' +
                            inputName +
                            '" value="' +
                            response.Value.AnswerId +
                            '"/>');
                    }

                    if (wrapper.find("#recordButton").length > 0) {
                        var anyUnanswered = false;

                        wrapper.find("input[type=text]").each(function () {
                            var element = $(this);
                            if (element.val().trim() === "") {
                                anyUnanswered = true;
                                return;
                            }
                        });

                        if (!anyUnanswered) {
                            wrapper.find(".next-btn").attr("disabled", false);
                            wrapper.find("#submitButton").attr("disabled", false);
                        }
                    }
                } else {
                    var message = "";
                    for (var i = 0; i < response.MessageTextArray.length; i++) {
                        message += response.MessageTextArray[i];
                    }

                    showErrorWithActionDialog(message,
                        function () {
                            wrapper.find(".upload-audio-manual").show();
                        });
                }
            });
    },
    _constructSubmitData: function () {
        var self = this;
        var highlight = $(".highlighted");
        var j;

        for (j = 0; j < highlight.length; j++) {
            var answerText = highlight[j].textContent.replace(/\s\s+/g, " ").replace(/\"/g, "&quot;");
            var questionId = highlight[j].getAttribute("data-question-id");
            var index = highlight[j].getAttribute("data-index");
            var mockTestQuestionId = highlight[j].closest(".wrapper-question").getAttribute("data-id");
            var sectionType = highlight[j].closest(".wrapper-question").getAttribute("data-section-type");

            if (answerText !== "") {
                self.MaintenanceForm.append('<input type="hidden" name="MiniMockTest_' + sectionType +
                    "_" +
                    mockTestQuestionId +
                    "_" +
                    questionId +
                    "_" +
                    index +
                    '" value="' +
                    answerText +
                    '" />');
            }
        }

        $(".droppable")
            .each(function () {
                var sectionKey = $(this).data("sentencekey");
                var questionId = $(this).data("orderparagraphid");
                var mockTestQuestionId = $(this).closest(".wrapper-question").data("id");
                var sectionType = $(this).closest(".wrapper-question").data("section-type");
                var answerId = $(this).data("answerid");
                var sortingIndexTarget = sectionKey.replace("Q", "");

                if (answerId !== undefined && answerId !== "") {
                    self.MaintenanceForm.append('<input type="hidden" name="MiniMockTest_' + sectionType +
                        "_" +
                        mockTestQuestionId +
                        "_" +
                        questionId +
                        "_" +
                        answerId +
                        '" value="' +
                        sortingIndexTarget +
                        '" />');
                }
            });

        $("input:hidden")
            .not('[name*="MockTestId"]')
            .not('[name*="MiniMockTest"]')
            .remove();

        $(".disabled").removeAttr("disabled").removeClass("disabled");
    },
    _radioButtonClickHandler: function (wrapper) {
        wrapper.find("input[type=radio]")
            .change(function () {
                if (this.value !== null) {
                    wrapper.find(".next-btn").removeAttr("disabled");
                    wrapper.find("#submitButton").removeAttr("disabled");
                }
            });
    },
    _checkBoxClickHandler: function (wrapper) {
        wrapper.find("input[type=checkbox]")
            .change(function () {
                var totalChecked = wrapper.find("input:checkbox:checked").length;

                if (totalChecked > 0) {
                    wrapper.find(".next-btn").removeAttr("disabled");
                    wrapper.find("#submitButton").removeAttr("disabled");
                } else {
                    wrapper.find(".next-btn").attr("disabled", "disabled");
                    wrapper.find("#submitButton").attr("disabled", "disabled");
                }
            });
    },
    _clickableClickHandler: function (wrapper) {
        wrapper.find(".clickable")
            .click(function () {
                var element = $(this);
                setTimeout(function () {
                    if (element.hasClass("hasclicked")) {
                        wrapper.find(".next-btn").removeAttr("disabled");
                        wrapper.find("#submitButton").removeAttr("disabled");
                    } else {
                        wrapper.find(".next-btn").attr("disabled", "disabled");
                        wrapper.find("#submitButton").attr("disabled", "disabled");
                    }
                },
                    100);
            });
    },
    _highlightWordClickHandler: function (wrapper) {
        wrapper.find(".highlight-word")
            .click(function () {
                $(this).toggleClass("blank highlighted");

                var isHighlighted = wrapper.find(".highlighted").length > 0;
                if (isHighlighted) {
                    wrapper.find(".next-btn").removeAttr("disabled");
                    wrapper.find("#submitButton").removeAttr("disabled");
                } else {
                    wrapper.find(".next-btn").attr("disabled", "disabled");
                    wrapper.find("#submitButton").attr("disabled", "disabled");
                }
            });
    },
    _inputTextChangeHandler: function (wrapper) {
        wrapper.find("input[type=text]").bind("keyup change",
            function () {
                var anyUnanswered = false;

                wrapper.find("input[type=text]").each(function () {
                    var element = $(this);
                    if (element.val().trim() === "") {
                        anyUnanswered = true;
                        return false;
                    }
                });

                if (!anyUnanswered) {
                    if (wrapper.find("#recordButton").length > 0) {
                        if (wrapper.find("#record-url").attr("href") !== "") {
                            wrapper.find(".next-btn").removeAttr("disabled");
                            wrapper.find("#submitButton").removeAttr("disabled");
                        }
                    } else {
                        wrapper.find(".next-btn").removeAttr("disabled");
                        wrapper.find("#submitButton").removeAttr("disabled");
                    }
                } else {
                    wrapper.find(".next-btn").attr("disabled", "disabled");
                    wrapper.find("#submitButton").attr("disabled", "disabled");
                }
            });
    },
    _inputTextAreaChangeHandler: function (wrapper) {
        wrapper.find("textarea").bind("keyup change",
            function () {
                var anyUnanswered = false;

                wrapper.find("textarea").each(function () {
                    var element = $(this);
                    if (element.val().trim() === "") {
                        anyUnanswered = true;
                        return false;
                    }
                });

                if (wrapper.find(".wordCount").length > 0) {
                    var element = wrapper.find("textarea");

                    var value = element.val();

                    if (value.length === 0) {
                        wrapper.find('.wordCount').html(0);
                    }
                    var regex = /\s+/gi;
                    var wordCount = value.trim().replace(regex, ' ').split(' ').length;

                    wrapper.find('.wordCount').html(wordCount);
                }

                if (!anyUnanswered) {
                    wrapper.find(".next-btn").removeAttr("disabled");
                    wrapper.find("#submitButton").removeAttr("disabled");
                } else {
                    wrapper.find(".next-btn").attr("disabled", "disabled");
                    wrapper.find("#submitButton").attr("disabled", "disabled");
                }
            });
    },
    _clickWordClickHandler: function (wrapper) {
        wrapper.find(".click-word").click(function () {
            $(this).toggleClass("blank wordhasclicked");

            var hasClicked = wrapper.find(".wordhasclicked").length > 0;
            if (hasClicked) {
                wrapper.find(".next-btn").removeAttr("disabled");
                wrapper.find("#submitButton").removeAttr("disabled");
            } else {
                wrapper.find(".next-btn").attr("disabled", "disabled");
                wrapper.find("#submitButton").attr("disabled", "disabled");
            }
        });
    },
    _selectChangeHandler: function (wrapper) {
        wrapper.find("select").change(
            function () {
                var anyUnanswered = false;
                wrapper.find("select").each(function () {
                    var selectedOption = $(this).find("option:selected");
                    if (selectedOption.index() === 0 || selectedOption.text() === "" || selectedOption.text() === "-") {
                        anyUnanswered = true;
                        return false;
                    }
                });

                if (!anyUnanswered) {
                    wrapper.find(".next-btn").removeAttr("disabled");
                    wrapper.find("#submitButton").removeAttr("disabled");
                } else {
                    wrapper.find(".next-btn").attr("disabled", "disabled");
                    wrapper.find("#submitButton").attr("disabled", "disabled");
                }
            });
    },
    _recordClickHandler: function (wrapper) {
        var self = this;
        wrapper.find(".multipleRecorderButton").click(
            function (e) {
                var btnEl = $(this);
                self._startCountdown(wrapper, btnEl);
            });
    },
    _uploadAudioFileHandler: function (wrapper) {
        var self = this;
        wrapper.find(".multipleUploadButton").click(function (event) {
            var recordingUrl = $("#maintenanceForm").data("upload-audio-file-url");
            recordingUrl += "?mockTestQuestionId=" + wrapper.data("id");
            uploadAudioSpeakingFile(
                event,
                recordingUrl,
                function (response) {
                    self._hideLog(wrapper);
                    var spinner = wrapper.find('[id^="spinnerImage"]');
                    spinner.hide();
                    if (response.IsSuccess === true) {
                        wrapper.find("#record-result").removeClass("hidden");
                        wrapper.find("#submitSpeakingAnswerButton").removeClass("hidden");

                        wrapper.find('[id ^= "audio-player"]').attr("src", response.Value.AudioUrl);
                        wrapper.find("#record-url").attr("href", response.Value.AudioUrl);
                        wrapper.find("#record-url").html(response.Value.AudioName);
                        var inputName = 'MiniMockTest_' +
                            wrapper.data("section-type") +
                            "_" +
                            wrapper.data("id") +
                            "_" +
                            response.Value.QuestionId + "_" +
                            response.Value.AnswerId;

                        var inputNamePattern = "MiniMockTest_" + wrapper.data("section-type") + "_" + wrapper.data("id");
                        var existingInput = $('input[name^="' + inputNamePattern + '"]');
                        if (existingInput.length === 0) {
                            $(document.getElementsByName(inputName)).remove();
                            self.MaintenanceForm.append('<input type="hidden" name="' +
                                inputName +
                                '" value="' +
                                response.Value.AnswerId +
                                '"/>');
                        }

                        if (wrapper.find(".multipleUploadButton").length > 0) {
                            var anyUnanswered = false;

                            wrapper.find("input[type=text]").each(function () {
                                var element = $(this);
                                if (element.val().trim() === "") {
                                    anyUnanswered = true;
                                    return;
                                }
                            });

                            if (!anyUnanswered) {
                                wrapper.find(".next-btn").attr("disabled", false);
                                wrapper.find("#submitButton").attr("disabled", false);
                            }
                        }
                    } else {
                        var message = "";
                        for (var i = 0; i < response.MessageTextArray.length; i++) {
                            message += response.MessageTextArray[i];
                        }

                        showErrorWithActionDialog(message,
                            function () {
                                wrapper.find(".upload-audio-manual").show();
                                wrapper.find("#uploadControlPanel").show();
                            });
                    }
                });
        });
    },
    _repeatSenteceAudioPlayerHandler: function (wrapper) {
        var self = this;

        var onEnded = function () {
            wrapper.find("#recorderControlPanel").closest(".panel-default").removeClass("hidden");
            self._startBeforeRecordCountdown(wrapper);
        };

        self._audioPlayerHandle(wrapper, null, onEnded);
    },
    _answerShortQuestionAudioPlayerHandler: function (wrapper) {
        var self = this;

        var onPlay = function (currentAudioPlayerEl) {
            if (currentAudioPlayerEl.hasClass("disabled-audio")) {
                this.pause();
                this.currentTime = 0;
                return;
            }
        };

        var onEnded = function () {
            wrapper.find("#recorderControlPanel").closest(".exercise-text.hidden").removeClass("hidden");
            self._startBeforeRecordCountdown(wrapper);
        };

        self._audioPlayerHandle(wrapper, onPlay, onEnded);
    },
    _retellLectureAudioPlayerHandler: function (wrapper) {
        var self = this;
        var onPlay = function (currentAudioPlayerEl) {
            if (currentAudioPlayerEl.closest(".audioPlayerPanel").hasClass("disabled-audio")) {
                this.pause();
                this.currentTime = 0;
                return;
            }
        };

        var onEnded = function () {
            wrapper.find(".panel-retell-lecture").removeClass("hidden");
            self._startBeforeRecordCountdown(wrapper);
        };

        self._audioPlayerHandle(wrapper, onPlay, onEnded);
    },
    _spokenTextAudioPlayerHandler: function (wrapper) {
        var self = this;
        var onEnded = function () {
            wrapper.find(".writing-section").removeClass("hidden");
            wrapper.find(".disable-auto-start-timer").removeClass("disable-auto-start-timer");
            wrapper.find(".audio-player-instruction").html("Begin Writing");
            self.PrepareTimerForQuestion(wrapper);
        };

        self._audioPlayerHandle(wrapper, null, onEnded);
    },
    _writeFromDictionaryAudioPlayerHandler: function (wrapper) {
        var self = this;
        self._audioPlayerHandle(wrapper);
    },
    _listeningFillInTheBlankAudioPlayerHandler: function (wrapper) {
        var self = this;
        var onEnded = function () {
            self.TimeOut(wrapper);
        };

        var groupWrapper = wrapper.closest(".panelSectionGroup");
        self._audioPlayerHandle(groupWrapper, null, onEnded);
    },
    _showLog: function (wrapper) {
        wrapper.find('[id^="recordingLog"]').css("visibility", "visible");
        wrapper.find('[id^="recordingLog"]').html("");
    },
    _hideLog: function (wrapper) {
        wrapper.find('[id^="recordingLog"]').css("visibility", "hidden");
        wrapper.find('[id^="recordingLog"]').empty();
    },
    _hideBeforeRecordLog: function (wrapper) {
        wrapper.find('[id^="beforeRecordingLog"]').css("visibility", "hidden");
        wrapper.find('[id^="beforeRecordingLog"]').empty();
    },
    _hideBeforePlayAudioLog: function (wrapper) {
        wrapper.find('.counter-before-play').css("visibility", "hidden");
        wrapper.find('.counter-before-play').empty();
    },
    _stopCountdown: function (wrapper, btnEl) {
        var self = this;
        self._stopRecording(wrapper, btnEl);
        self._stopCounter();

        wrapper.find('[id^="spinnerImage"]').show();
        wrapper.find('[id^="recordingLog"]').html("Processing, please wait...");
    },
    _showRecordButton: function (wrapper, recordButtonEl) {
        var self = this;

        recordButtonEl.removeClass("hidden");
        self._showLog(wrapper);
        var duration = recordButtonEl.data("duration");
        var timerNumber = 35;
        if (duration !== 0) {
            timerNumber = parseInt(duration);
        }
        self._writeDown(wrapper, timerNumber);

        recordButtonEl.click();
    },
    _stopBeforeRecordCountdown: function (wrapper, countDownEl) {
        var self = this;
        var recordButtonEl = countDownEl.closest("#recorderControlPanel").find("#recordButton");
        self._showRecordButton(wrapper, recordButtonEl);

        self._stopBeforeRecordCounter();
        self._hideBeforeRecordLog(wrapper);
    },
    _stopBeforePlayAudioCountdown: function (wrapper, countDownEl) {
        var self = this;
        var audioPlayerEl = wrapper.find("#audioPlayerPanel audio");

        if (audioPlayerEl.length) {
            audioPlayerEl[0].play();
        }
        self._stopBeforePlayAudioCounter();
        self._hideBeforePlayAudioLog(wrapper);
    },
    _startCountdown(wrapper, btnEl) {
        var self = this;
        var timerNumber = 35;
        var duration = btnEl.data("duration");
        self._startRecording(wrapper, btnEl);

        if (duration !== 0) {
            timerNumber = parseInt(duration);
        }
        self.CountDown = setInterval(function () {
            self._writeDown(wrapper, timerNumber);
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                self._stopCountdown(wrapper, btnEl);
            }
        },
            1000);
    },
    _startBeforeRecordCountdown(wrapper, onStopCountDown) {
        var self = this;
        var timerNumber = 0;
        var countDownEl = wrapper.find('[id^="beforeRecordingLog"]');
        var duration = countDownEl.data("duration");
        var stopCountdownAction = function () {

            if (typeof onStopCountDown === "function") {
                onStopCountDown();
            }

            self._stopBeforeRecordCountdown(wrapper, countDownEl);
        };

        wrapper.find("#recordButton").addClass("hidden");

        if (duration === 0 || duration === null || duration === undefined) {
            stopCountdownAction();
            return;
        } else {
            timerNumber = parseInt(duration);
        }

        self.BeforeRecordCountDown = setInterval(function () {
            self._writeBeforeRecordLogCountDown(wrapper, timerNumber);
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                stopCountdownAction();
            }
        },
            1000);
    },
    _startBeforePlayAudioCountdown(wrapper) {
        var self = this;
        var timerNumber = 3;
        var countDownEl = wrapper.find('.counter-before-play');
        if (countDownEl.length) {
            var duration = countDownEl.data("duration");

            if (duration !== 0) {
                timerNumber = parseInt(duration);
            }
            self.BeforePlayAudioCountDown = setInterval(function () {
                self._writeBeforePlayAudioLogCountDown(wrapper, timerNumber);
                timerNumber = timerNumber - 1;
                if (timerNumber < 0) {
                    $(".audioPlayer", wrapper).removeClass("disabled-audio");
                    self._stopBeforePlayAudioCountdown(wrapper, countDownEl);
                }
            },
                1000);
        }

        self._audioPlayerHandle(wrapper);
    },
    _startAudio(wrapper) {
        var self = this;
        var timerNumber = 0;
        
        self.BeforePlayAudioCountDown = setInterval(function () {
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                $(".audioPlayer", wrapper).removeClass("disabled-audio");
                self._stopBeforePlayAudioCountdown(wrapper);
            }
        },
        1000);

        self._audioPlayerHandle(wrapper);
    },
    _startBeforePlayAudioRLCountdown(wrapper) {
        var self = this;
        var timerNumber = 3;
        var countDownEl = wrapper.find('.counter-before-play');
        var duration = countDownEl.data("duration");

        if (duration !== 0) {
            timerNumber = parseInt(duration);
        }
        self.BeforePlayAudioCountDown = setInterval(function () {
            self._writeBeforePlayAudioLogCountDown(wrapper, timerNumber);
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                $("#audioPlayerPanel", wrapper).removeClass("disabled-audio");
                self._stopBeforePlayAudioCountdown(wrapper, countDownEl);
            }
        },
            1000);

        self._audioPlayerHandle(wrapper);
    },
    _audioPlayerHandle: function (wrapper, onPlay, onEnded) {
        var self = this;
        var audioPlayerEl = wrapper.find("#audioPlayerPanel audio");

        if (audioPlayerEl.length === 0) {
            return;
        }

        self.IsAudioPlayed = false;

        audioPlayerEl.off("play").on('play', function () {
            if (self.IsAudioPlayed || self.BeforePlayAudioCountDown !== null) {
                this.pause();
                return;
            }

            if (typeof onPlay === "function") {
                onPlay($(this));
            }
        });

        audioPlayerEl.off("ended").on('ended', function () {
            if (self.IsAudioPlayed) {
                return;
            }

            self.IsAudioPlayed = true;
            if (typeof onEnded === "function") {
                onEnded();
            }
        });
    },
    _startRecording: function (wrapper, btnEl) {
        var self = this;

        self._setUploadAudioHandler(wrapper);
        self._stopBeforeRecordCounter();
        self._hideBeforeRecordLog(wrapper);

        btnEl.removeClass("btn-danger").removeClass("hidden")
            .html('<i class="fa fa-square fa-fw"></i> Stop')
            .unbind()
            .click(function () {
                self._stopCountdown(wrapper, btnEl);
            });

        wrapper.find(".record-instruction").removeClass("hidden").html("<span class='text-danger'>Now Recording</span> <br/>");

        startAudioRecording(function () {
            self._showManualUploadAudio(wrapper);
            self._stopCounter();
        });

    },
    _stopRecording: function (wrapper, btnEl) {
        var self = this;
        self._setUploadAudioHandler(wrapper);
        stopAudioRecording();

        btnEl.unbind()
            .click(function () {
                return false;
            });

        btnEl.addClass("hidden");
        wrapper.find(".record-instruction").removeClass("hidden").html("Completed. Click NEXT. <br/>");
    },
    _stopCounter: function () {
        var self = this;
        if (self.CountDown !== undefined) {
            clearInterval(self.CountDown);
        }
    },
    _stopBeforeRecordCounter: function () {
        var self = this;
        if (self.BeforeRecordCountDown !== undefined || self.BeforeRecordCountDown !== null) {
            clearInterval(self.BeforeRecordCountDown);
            self.BeforeRecordCountDown = null;
        }
    },
    _stopBeforePlayAudioCounter: function () {
        var self = this;
        if (self.BeforePlayAudioCountDown !== undefined || self.BeforePlayAudioCountDown !== null) {
            clearInterval(self.BeforePlayAudioCountDown);
            self.BeforePlayAudioCountDown = null;
        }
    },
    _showManualUploadAudio: function (wrapper) {
        wrapper.find('#recorderControlPanel').hide();
        wrapper.find('.recorderControlSection').hide();
        wrapper.find('#uploadControlPanel').show();
        wrapper.find('.uploadControlSection').show();
    },
    _writeDown(wrapper, number) {
        var label = "seconds";

        if (number <= 1) {
            label = "second";
        }

        wrapper.find('[id^="recordingLog"]').html("<strong>Remaining time: " + number + " " + label + "</strong>");
    },
    _writeBeforeRecordLogCountDown(wrapper, number) {
        var label = "seconds";

        if (number <= 1) {
            label = "second";
        }

        wrapper.find('[id^="beforeRecordingLog"]').html("Record your answer in: <strong>" + number + " " + label + "</strong>");
    },
    _writeBeforePlayAudioLogCountDown(wrapper, number) {
        var label = "seconds";

        if (number <= 1) {
            label = "second";
        }

        wrapper.find('.counter-before-play').html("Beginning in: <strong>" + number + " " + label + "</strong>");
    },
    _updateParentActivityPanel(response) {
        if (window.opener !== null && !window.opener.closed) {
            $("#btnStart", window.opener.document).remove();
            $("#MiniMockTestMessage", window.opener.document).html(response.Value.Message);
            $("#btnBookAppointment", window.opener.document).removeClass("hidden");
        }
    }
};

var goto = function (sectionName, currentSection) {
    var currentSectionElement = $("#" + currentSection);
    var recorderButton = currentSectionElement.find(".multipleRecorderButton");
    if (recorderButton.length !== 0 && !recorderButton.hasClass("hidden")) {
        recorderButton.click();
    }

    var sectionWrapper = $("#" + sectionName);

    var currentGroupSection = $("#" + currentSection).parents(".panelSectionGroup");
    var currentGroupSectionId = currentGroupSection.data("section-group-id");

    var nextGroupSection = sectionWrapper.parents(".panelSectionGroup");
    var nextGroupSectionId = nextGroupSection.data("section-group-id");

    var instructionPanel = currentGroupSection.find(".row.mini-mocktest-single-panel.ins");
    var instructionAudio = instructionPanel.find(".instruction-audio");

    window.StudentMiniMockTestView.prototype.StopRecord(currentSection);
    if (currentGroupSectionId !== nextGroupSectionId || instructionAudio.length === 0) {
        window.StudentMiniMockTestView.prototype.StopAudio();
    }

    window.StudentMiniMockTestView.prototype.StopYoutubeVideo();
    window.StudentMiniMockTestView.prototype.StopWistiaVideo(currentSection);

    $("#" + currentSection).hide();
    $("#" + sectionName).show();

    window.StudentMiniMockTestView.prototype.ClearIntervalBeforePlayAudio();

    var nextGroupDuration = nextGroupSection.data("duration");

    if (currentGroupSectionId !== nextGroupSectionId && nextGroupDuration !== -1) {
        currentGroupSection.hide();
        nextGroupSection.show();

        var timerInQuestion = sectionWrapper.find(".timer-duration-panel");
        if (timerInQuestion.length) {
            clearInterval(questionCountDown);
            window.StudentMiniMockTestView.prototype.PrepareTimerForQuestion(sectionWrapper);
        }
        else {
            clearInterval(countDown);
            window.StudentMiniMockTestView.prototype.PrepareTimerForSectionGroup(sectionWrapper);
        }
    } else if (currentGroupSectionId !== nextGroupSectionId && nextGroupDuration === -1) {
        currentGroupSection.hide();
        nextGroupSection.show();
        var timerEl = currentGroupSection.find(".timer-widget");
        nextGroupSection.prepend(timerEl);
    } else {
        clearInterval(questionCountDown);
        window.StudentMiniMockTestView.prototype.PrepareTimerForQuestion(sectionWrapper);
    }
    window.StudentMiniMockTestView.prototype.NextButtonExtendHandler(sectionWrapper);
};;
var StudentMiniMockTestViewDetail = function (element) {
    this.Element = element;
};

StudentMiniMockTestViewDetail.prototype = {
    constructor: StudentMiniMockTestViewDetail,
    Register: function () {
        var self = this;

        self.GenerateComment();

        $(".closeButton").click(function () {
            window.close();
        });
    },
    GenerateComment: function () {
        $(".panel-section").each(function () {
            var comment = "";
            $(this).find(".form-group").each(function () {
                var selectedInput = $(this).find("input[type=radio]:checked");
                if (selectedInput.length) {
                    var currentComment = selectedInput[0].dataset["comment"];
                    if (currentComment !== "")
                        comment += "<p>" + currentComment + "</p>";

                }
            });
            $(this).find("[id^=comment]").html(comment);
        });
    }
};
var StudentOetMiniMockTestAppointmentDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#appointmentBookForm", this.Element);
    this.ModalDialog = this.Element.closest(".modal");
}

StudentOetMiniMockTestAppointmentDialog.prototype = {
    constructor: StudentOetMiniMockTestAppointmentDialog,
    Register: function () {
        var self = this;

        self.LoadWeek();
        self.ModalDialog.modal();

        $("#btnCancel", self.Element)
            .off("click")
            .on("click", function () {

                if (typeof self.Caller.ReloadModal === "function") {
                    self.Caller.ReloadModal();
                }

            });

        $(".close", self.Element)
            .off("click")
            .on("click", function () {

                if (typeof self.Caller.ReloadModal === "function") {
                    self.Caller.ReloadModal();
                }

            });
    },

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + '</h2>');

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format"))
        };

        self.GenerateWeekListForMMT(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });
    },
    GenerateWeekListForMMT: function(postData, element, contentWrapperId, form, onSelectedDate) {

        submitDataWithoutLoader(postData, form.data("week-url"), function (data) {

            $(contentWrapperId, element).html("");
            if (data.WeekAvailabilities.length === 0) {
                $(contentWrapperId, element).html('<p class="text-center">' + data.ErrorMessageWhenNoDaysAvailable + "</p>");
            }

            $.each(data.WeekAvailabilities, function (index, item) {

                var textColor = "text-primary";
                var buttonTagOpen = '<button type="button" class="dateLink list-group-item" data-date=' + item.ShortDate + '>';

                var buttonTagClose = '</button>';

                var rightArrowIcon = '<i class="fa fa-3x fa-arrow-circle-o-right" aria-hidden="true"></i>';
                var leftContent = '<span class="pull-left ' + textColor + '"><b>' + item.DayOfDate + '</b><br/> ' + item.DateLabel + '</span>';
                var rightContent = '<span class="pull-right ' + textColor + '">' + rightArrowIcon + '</span>';

                $(contentWrapperId, element).append(buttonTagOpen + rightContent + leftContent + buttonTagClose);

            });

            $(".dateLink", element).unbind("click").on("click", function (e) {
                e.preventDefault();
                onSelectedDate($(this).data("date"));
            });

            $(".wrap-schedule", element).animate({
                scrollTop: 0
            }, "slow");
        }, null);

    },
    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        submitDataWithoutLoader({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type")
        }, self.form.data("time-url"), function (data) {
            $("#headTitle", self.Element).html('');
            $("#timeList", self.Element).html('');
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + '</h3>' +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + '</p>');

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + ' data-date=' + selectedDate + '>' + item.AvailableTime + '</button>');
            });

            $("#WeekView", self.Element).addClass("hidden");
            $("#TimeView", self.Element).removeClass("hidden");

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back();
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    },

    PopulateForm: function (time, selectDate) {
        var self = this;

        $("#errorPane").hide();
        self.form.find('#generatedForm').html("");
        self.form.find('#generatedForm').append('<input type="hidden" name="startHour" value="' + time + '" />');
        self.form.find('#generatedForm').append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    self.form.find('#generatedForm').append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    self.form.find('#generatedForm').append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    self.form.find('#generatedForm').append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');
                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    self.form.find('#generatedForm').append('<input type="hidden" name="checkboxAnswer_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = 'answerType_' + index + '_' + questionId + '';
                $("input[name=" + name + "]").remove();
                self.form.find('#generatedForm').append('<input type="hidden" name="answerType_' + index + '_' + questionId + '" value="' + $(this).val() + '" />');
            });
        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#errorPane").hide();
        self.ModalDialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("create-url"), function (data) {

                showInfoDialog(data.InformationMessage, function () {
                    $("#miniMockTestMenu").click();
                });

                $("#TotalAppointment").val(data.TotalAppointment);
                $("#NumberOfTutorial").val(data.NumberOfTutorial);

            }, self.ModalDialog.modal.bind(self.ModalDialog, "show"));

        }, function () {
            self.ModalDialog.modal("show");
        }, function () {
            self.ModalDialog.modal("show");
        });
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        self.MakeAppointment(time, selectDate);

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    }
};
var StudentOetMiniMockTestAppointmentEditDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.form = $("#appointmentEditBookForm", this.Element);
    this.ModalDialog = this.Element.closest(".modal");
}

StudentOetMiniMockTestAppointmentEditDialog.prototype = {
    constructor: StudentOetMiniMockTestAppointmentEditDialog,
    Register: function () {
        var self = this;

        self.LoadWeek();
        self.ModalDialog.modal();

        $("#btnCancel", self.Element)
            .off("click")
            .on("click", function () {
                if (typeof self.Caller.ReloadModal === "function") {
                    self.Caller.ReloadModal();
                }
            });

        $(".close", self.Element)
            .off("click")
            .on("click", function () {
                if (typeof self.Caller.ReloadModal === "function") {
                    self.Caller.ReloadModal();
                }
            });

    },

    Back: function () {
        var self = this;

        $("#errorPane").hide();
        $("#TimeView", self.Element).addClass("hidden");
        $("#WeekView", self.Element).removeClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + "</h2>");
        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    },

    LoadWeek: function () {
        var self = this;

        $("#errorPane").hide();
        $("#WeekView", self.Element).removeClass("hidden");
        $("#TimeView", self.Element).addClass("hidden");
        $("#headTitle", self.Element).html('<h2 class="text-center">' + self.form.data("select-day") + "</h2>");

        var startDate = moment().add(1, "d");
        var postData = {
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type"),
            'startDate': startDate.format(self.form.data("date-format"))
        };

        generateWeekListWithCustomDialog(postData, self.Element, "#WeekList", self.form, function (data) {
            self.DetailTime(data);
        });
    },

    DetailTime: function (date) {
        var self = this;
        var selectedDate = moment(date, self.form.data("server-date-format"));

        $("#errorPane").hide();
        $("#WeekView", self.Element).addClass("hidden");
        $("#TimeView", self.Element).removeClass("hidden");

        submitDataWithCustomLoader({
            'selectedDate': selectedDate.format(self.form.data("date-format")),
            'appointmentDurationKey': self.form.data("duration-key"),
            'appointmentType': self.form.data("appointment-type")
        }, self.form.data("time-url"), function (data) {
            $("#headTitle", self.Element).html("");
            $("#timeList", self.Element).html("");
            $("#headTitle", self.Element).append(
                '<a href="#" id="backLink"><i class="fa fa-2x fa-arrow-left" aria-hidden="true"></i></a>' +
                '<h3 class="text-center">' + selectedDate.format(self.form.data("day-format")) + "</h3>" +
                '<p class="text-muted text-center">' + selectedDate.format(self.form.data("display-date-format")) + "</p>");

            $("#timeList", self.Element).html("");
            $.each(data.TimeAvailabilities, function (index, item) {
                var time = "'" + item.AvailableTime24 + "'";
                $("#timeList", self.Element).append('<button class="timeLink btn scheduler btn-primary btn-block" data-time=' + time + " data-date=" + selectedDate + ">" + item.AvailableTime + "</button>");
            });

            $(".timeLink", self.Element).on("click", function (e) {
                e.preventDefault();
                self.LoadQuestion($(this).data("time"), $(this).data("date"));
            });

            $("#backLink", self.Element).on("click", function () {
                self.Back();
                $("#btnSubmit", self.Element).hide();
                $("#questionView", self.Element).hide();
            });

            $(".wrap-schedule", self.Element).animate({
                scrollTop: 0
            }, "slow");

        }, function () {
            // onError
            $("#timeList", self.Element).html(generateInnerLoader("Error when sending request. Please refresh your browser and try again."));
        }, function () {
            // showProgressDialog
            $("#timeList", self.Element).html(generateInnerLoader('<span class="icon fa fa-refresh fa-spin"></span> Generating panel, please wait....'));
        }, function () {
            // hideProgressDialog
            clearInnerLoader($("#timeList", self.Element));
        });

    },

    PopulateForm: function (time, selectDate) {
        var self = this;
        var generatedForm = self.form.find("#generatedForm");

        $("#errorPane").hide();
        generatedForm.html("");
        generatedForm.append('<input type="hidden" name="startHour" value="' + time + '" />');
        generatedForm.append('<input type="hidden" name="selectedDate" value="' + selectDate + '" />');

        $(".appointment-questions", self.Element).each(function () {
            var questionId = $(this).data("question-id");

            $(this).find("textarea").each(function () {
                if ($(this).val().length > 0) {
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '" value="' + $(this).data("answer-id") + '" />');
                    generatedForm.append('<input type="hidden" name="textboxAnswer_' + questionId + '_notes" value="' + $(this).val() + '" />');
                }
            });

            $(this).find("select").each(function () {
                if ($(this).val() !== "0") {
                    var selectId = $(this).attr("id");
                    generatedForm.append('<input type="hidden" name="selectAnswer_' + questionId + '" value="' + $("#" + selectId + " option:selected").data("answer-id") + '" />');
                }
            });

            $(this).find(".answer-checkbox").each(function (index) {
                if (this.checked) {
                    generatedForm.append('<input type="hidden" name="checkboxAnswer_' + index + "_" + questionId + '" value="' + $(this).val() + '" />');
                }
            });

            $(this).find(".answer-type").each(function (index) {
                var name = "answerType_" + index + "_" + questionId + "";
                $("input[name=" + name + "]").remove();
                generatedForm.append('<input type="hidden" name="answerType_' + index + "_" + questionId + '" value="' + $(this).val() + '" />');
            });
        });
    },

    MakeAppointment: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));
        var templateMessage = self.form.data("confirm-message");
        var templateDateTime = moment(date).format(self.form.data("server-date-format")) + " " + moment(time, [self.form.data("long-time-format")]).format(self.form.data("short-time-format"));
        var confirmMessage = templateMessage.replace("[DATETIME]", templateDateTime);

        $("#errorPane").hide();
        self.ModalDialog.modal("hide");

        showConfirmationDialog(confirmMessage, function () {
            self.PopulateForm(time, selectDate);

            submitForm(self.form, self.form.data("edit-url"), function (data) {
                showInfoDialog(data.Value.InformationMessage, function () {
                    $("#miniMockTestMenu").click();
                });

            }, self.ModalDialog.modal.bind(self.ModalDialog, "show"));

        }, function () {
            self.ModalDialog.modal("show");
        }, function () {
            self.ModalDialog.modal("show");
        });
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    LoadQuestion: function (time, date) {
        var self = this;
        var selectDate = moment(date).format(self.form.data("date-format"));

        self.MakeAppointment(time, selectDate);

        $("#btnSubmit", self.Element).unbind("click").click(function () {
            self.MakeAppointment(time, selectDate);
        });

        $(".wrap-schedule", self.Element).animate({
            scrollTop: 0
        }, "slow");
    }
};
var StudentOetMiniMockTestGridAppointmentDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.IsReloadModal = false;
    this.ModalDialog = this.Element.closest(".modal");
}

StudentOetMiniMockTestGridAppointmentDialog.prototype = {
    constructor: StudentOetMiniMockTestGridAppointmentDialog,
    Register: function () {
        hideProcessingDialog();

        var self = this;
        self.ModalDialog.modal('show');
        var grid = $("#gridAppointment");

        self.LoadGrid(grid);

        self.ModalDialog.on("hidden.bs.modal", function (e) {
            if (self.IsReloadModal) {
                self.IsReloadModal = false;
            }
        });

        $("#btnAdd", self.Element).on("click", function () {
            $("#errorPane").remove();
            var maintenanceDiv = $("#appointmentWrapper");
            var url = grid.data("book-url");

            loadApplicationContent(url, "GET", function (data) {
                maintenanceDiv.html(grid.data("error-pane"));
                maintenanceDiv.append(data);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application(maintenanceDiv, namespace);
                apps.RegisterWithCaller(self);
            });
        });
    },

    ReloadModal: function () {
        var self = this;
        var total = $("#TotalAppointment").val();
        var max = $("#NumberOfAppointment").val();

        self.ModalDialog.modal('show');

        if (total !== "" || max !== "") {
            if (total >= max) {
                $("#btnAdd").remove();
            }

            var infoMessage = $("#gridAppointment").data("info-message");
            infoMessage = infoMessage.replace("{0}", total);
            infoMessage = infoMessage.replace("{1}", max);

            $("#info-total").html(infoMessage);
        }
        $("#gridAppointment").bootgrid("reload");

    },

    LoadGrid: function (grid) {
        var self = this;
        $("#errorPane").hide();
        $("#errorPane").empty();

        grid.bootgrid({
            ajax: true,
            post: function () {
            },
            url: grid.data("url"),
            formatters: {
                "Action": function (column, row) {
                    var html = "";

                    if (row.Status === "Open" && row.IsValidToCancel) {
                        html = '<a href="#" class="actionReschedule" id="' + row.Id + '" " ' +
                            'data-toggle="tooltip" data-appointment-startdate="' + row.AppointmentStartDateTime + '" data-appointment-date="' + row.AppointmentDate + '" data-appointment-time="' + row.Time + '" data-placement="top" ' +
                            'title="' + grid.data("reschedule-tooltip") + '">' +
                            '<i class="fa fa-exchange" aria-hidden="true"></i>' +
                            '</a>';

                        html += '&nbsp;&nbsp;<a href="#" class="actionCancelAppointment" data-id="' + row.Id + '" " ' +
                            'data-toggle="tooltip" data-appointment-startdate="' + row.AppointmentStartDateTime + '" data-appointment-date="' + row.AppointmentDate + '" data-appointment-time="' + row.Time + '" data-placement="top" ' +
                            'title="' + grid.data("cancel-appointment-tooltip") + '">' +
                            '<i class="fa fa-trash" aria-hidden="true"></i>' +
                            '</a>';
                    }

                    return html;
                }
            }
        }).on("loaded.rs.jquery.bootgrid", function () {
            $('[data-toggle="tooltip"]').tooltip();

            $(".actionReschedule", self.Element).on("click", function () {
                var btnElement = $(this);

                self.ModalDialog.modal("hide");

                submitData({
                    "startDateTime": $(this).data("appointment-startdate"),
                    "appointmentType": grid.data("appointment-type")
                }, grid.data("different-url"), function (data) {
                    if (data.IsLessThan24Hour) {
                        showInfoDialog(data.Message, function () {
                            self.ModalDialog.modal("show");
                        });
                    } else { self.Reschedule(btnElement, grid); }
                });
            });

            $(".actionCancelAppointment", self.Element).on("click", function () {

                self.ModalDialog.modal("hide");

                var appointmentStartDate = $(this).data("appointment-startdate");
                var appointmentId = $(this).data("id");

                submitData({
                    "startDateTime": appointmentStartDate,
                    "appointmentType": grid.data("appointment-type")
                }, grid.data("different-url"), function (data) {
                    if (data.IsLessThan24Hour) {
                        showInfoDialog(data.MessageCancel, function () {
                            self.ModalDialog.modal("show");
                        });
                    } else {
                        var url = grid.data("cancel-url");
                        url += "?appointmentId=" + appointmentId;

                        submitNonForm(grid.data("delete-message"), url, function (data) {
                            self.ModalDialog.modal("hide");
                            showInformation(grid.data("appointment-cancel"));
                            self.IsReloadModal = true;

                            $("#miniMockTestMenu").click();
                        }, function () {
                                self.ModalDialog.modal("show");
                        });
                    }
                });
            });
        });
    },

    Reschedule: function (element, grid) {
        var self = this;
        var id = element.attr('id');
        var appointmentDate = element.data('appointment-date') + " " + element.data('appointment-time');

        var message = grid.data("change-message");
        message = message.replace("[DATE TIME]", appointmentDate);
        message = message.replace("[APPOINTMENT TYPE]", "appointment");

        showConfirmationDialog(message,
            function () {
                $("#errorPane").remove();
                var maintenanceDiv = $("#appointmentWrapper");
                var url = grid.data("edit-url");
                url += '?id=' + id;

                showPartialViewAsync(url, true)
                    .done(function (data) {

                        var afterHideProcessingDialog = function () {
                            maintenanceDiv.html(grid.data("error-pane"));
                            maintenanceDiv.append(data);

                            var helper = new Helper();
                            var namespace = helper.CreateNameSpaceFromURL(url);
                            var apps = new Application(maintenanceDiv, namespace);
                            apps.RegisterWithCaller(self);
                        };

                        hideProcessingDialog(afterHideProcessingDialog);

                    }).fail(function (data) {
                    });
            }, function () { self.ModalDialog.modal("show"); }
             , function () { self.ModalDialog.modal("show"); });
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    }
};
var StudentOetMiniMockTestIndex = function (element) {
    this.Element = element;
    this.ScoreChartPanel = $("#scoreChartPanel");
}

StudentOetMiniMockTestIndex.prototype = {
    constructor: StudentOetMiniMockTestIndex,
    Register: function () {
        var self = this;
        $("#btnStart").click(function (e) {
            e.preventDefault();
            closeErrorPane();

            var element = $(this);
            var url = element.data("url") +
                "?mockTestId=" +
                element.data("mock-test-id");
            showPopup(url);
        });

        $("#btnBuyAddOns").click(function (e) {
            e.preventDefault();

            showLoadingDialog();
            var url = $(this).data("payment-url");

            if (url !== "") {
                $.get(url, function (contentData) {
                    $('#mainUserContent').html(contentData);
                    hideLoadingDialog();

                    var helper = new Helper();
                    var namespace = helper.CreateNameSpaceFromURL(contentUrl);
                    var apps = new Application($('#mainUserContent'), namespace);
                    apps.Register();
                });
            }
        });

        $("#btnScoreSummary").click(function (e) {
            e.preventDefault();
            var element = $(this);
            var url = element.data("url");
            var container = $("#mainUserContent");

            loadApplicationContent(url, "GET",
                function (result) {
                    container.html(result);
                });
        });

        $("#btnBookAppointment").click(function (e) {
            e.preventDefault();
            var maintenanceDiv = $("#appointmentWrapper");
            var appointmentUrl = $(this).data("appointment-url");

            self.GenerateApplicationDialog(appointmentUrl, maintenanceDiv);
        });

        $("#btnViewAppointment").click(function (e) {
            e.preventDefault();
            var maintenanceDiv = $("#gridAppointmentWrapper");
            var appointmentUrl = $(this).data("grid-appointment-url");

            self.GenerateApplicationDialog(appointmentUrl, maintenanceDiv);
        });

        $("#btnSpeakingFeedbackResult")
            .off("click")
            .on("click", function (e) {
                e.preventDefault();

                var url = $(this).data("speaking-report-url");
                self.SpeakingReportToggle(true, url);
            });

        $('.answer-report-tooltip').tooltipster({
            theme: 'tooltipster-light',
            side: 'right'
        });

        $('.answerDetailLink').click(function () {
            var mockTestQuestionId = $(this).data("mock-test-question-id");
            var url = $(this).data("url") + "?mockTestQuestionId=" + mockTestQuestionId;
            showPopup(url);
        });

        self.GetScoreChart(self.ScoreChartPanel);
    },
    SpeakingReportToggle: function (isShow, url) {
        var self = this;
        var maintenanceDiv = $("#speakingFeedbackResultPane");
        var mainIndexDiv = $("#mainIndexPane");
        if (isShow === true) {
            if (maintenanceDiv.is(':empty')) {
                self.GenerateApplicationDialog(url, maintenanceDiv);
            }

            mainIndexDiv.addClass("hidden");
            maintenanceDiv.removeClass("hidden");
        } else {
            mainIndexDiv.removeClass("hidden");
            maintenanceDiv.addClass("hidden");
        }
    },
    GenerateApplicationDialog: function (url, maintenanceDiv) {
        var self = this;

        showProcessingDialog();
        $("#errorPane").remove();
        maintenanceDiv.html("");

        $.get(url,
            function (data) {
                hideProcessingDialog();
                maintenanceDiv.html('');
                maintenanceDiv.append(data);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application(maintenanceDiv, namespace);
                apps.RegisterWithCaller(self);
            });        
    },
    GetScoreChart: function (panel) {
        var self = this;
        var url = panel.data("get-url");

        panel.html('<span class="icon fa fa-refresh fa-spin"></span> ' + panel.data("loading-message"));

        submitDataWithoutLoader({}, url, function (data) {
            panel.empty();
            self._generateScoreChart(data.Value, panel);
            panel.parent().addClass("p-0");
        },
            function () {
                return;
            });
    },

    _generateScoreChart: function (dataPanel, panel) {
        var self = this;
        var xdata = [];
        var ydata = [];
        var scoreTextData = [];
        var colorData = [];
        var examTypeCode = $("#ExamTypeCode").val();

        $.each(dataPanel,
            function (index, row) {
                xdata.push(row.Title);
                ydata.push(row.Score);

                var chartItem = {
                    scoreLabel: row.ScoreText,
                    score: row.Score,
                    sectionScoreText: row.SectionScoreText
                };
                scoreTextData.push(chartItem);

                if (row.Title === 'OVERALL') {
                    colorData.push(panel.data("overall-color"));
                }
                else {
                    colorData.push(panel.data("default-color"));
                }
            });

        function getScoreText(score) {
            return scoreTextData.find(item => item.score === score).scoreLabel;
        }

        function getSectionScoreText(score) {
            return scoreTextData.find(item => item.score === score).sectionScoreText;
        }

        Highcharts.chart('scoreChartWrapper', {
            chart: {
                type: 'bar'
            },
            title: {
                text: 'Overall Score',
                align: 'left',
                style: {
                    "color": "#2D4F7D",
                    "fontSize": "18px",
                    "fontWeight": "500"
                }
            },
            xAxis: {
                categories: xdata,
                title: {
                    text: null
                }
            },
            yAxis: {
                min: 0,
                max: 100,
                title: {
                    text: null
                },
                labels: {
                    overflow: 'justify',
                    step: 5
                },
                lineWidth: 2,
                lineColor: '#bdbdbd'
            },
            tooltip: {
                enabled: examTypeCode === $(".page-main").data("exam-type-oet"),
                formatter: function () {
                    return this.x + "<br/>" + getSectionScoreText(this.y);
                }
            },
            plotOptions: {
                bar: {
                    dataLabels: {
                        enabled: true
                    }
                },
                series: {
                    dataLabels: {
                        formatter: function () {
                            return getScoreText(this.y);
                        }
                    },
                    pointWidth: 30,
                    colorByPoint: true
                }
            },
            credits: {
                enabled: false
            },
            exporting: {
                enabled: false
            },
            series: [{
                showInLegend: false,
                data: ydata,
                colors: colorData,
            }],
            navigation: {
                buttonOptions: {
                    verticalAlign: 'top',
                    y: 0
                }
            }
        });
    }
};
(function ($, window) {
    "use strict";

    // Constructor
    var studentOetMiniMockTestSpeakingReport = function (element) {
        this.Element = element;
        this.Caller = null;
    };

    studentOetMiniMockTestSpeakingReport.prototype = {
        constructor: studentOetMiniMockTestSpeakingReport,
        Register: function () {
            var self = this;

            $("#btnBackToMain")
                .off("click")
                .on("click", function () {
                    if (self.Caller !== null && typeof self.Caller.SpeakingReportToggle == 'function') {
                        self.Caller.SpeakingReportToggle(false, null);
                    }
                });

            $('.answerDetailLink')
                .off("click")
                .on("click", function () {
                var mockTestQuestionId = $(this).data("mock-test-question-id");
                var url = $(this).data("url") + "?mockTestQuestionId=" + mockTestQuestionId;
                showPopup(url);
            });

            if (self.Caller !== null && typeof self.Caller.GetScoreChart == 'function') {
                var panel = $("#scoreChartPanel");
                self.Caller.GetScoreChart(panel);
            }
        },
        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    // Export javascript class into window environment
    window.StudentOetMiniMockTestSpeakingReport = studentOetMiniMockTestSpeakingReport;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    // Private Functions
    function goToSection(sectionName, currentSection) {
        var self = this;

        var currentSectionElement = $("#" + currentSection);
        var nextSectionElement = $("#" + sectionName);
        self.CurrentMockTestQuestionId = nextSectionElement.data("id");

        var currentGroupSection = currentSectionElement.parents(".panelSectionGroup");
        var currentGroupSectionId = currentGroupSection.data("section-group-id");

        var nextGroupSection = nextSectionElement.parents(".panelSectionGroup");
        var nextGroupSectionId = nextGroupSection.data("section-group-id");

        var instructionPanel = currentGroupSection.find(".row.mini-mocktest-single-panel.ins");
        var instructionAudio = instructionPanel.find(".instruction-audio");

        if (currentGroupSectionId !== nextGroupSectionId || instructionAudio.length === 0) {
            stopAudio.callWithLog(self);
        }

        stopYoutubeVideo.callWithLog(self);
        stopWistiaVideo.callWithLog(self, currentSection);
        clearIntervalBeforePlayAudio.callWithLog(self);

        currentSectionElement.hide();
        nextSectionElement.show();

        var nextGroupDuration = nextGroupSection.data("duration");

        if (currentGroupSectionId !== nextGroupSectionId && nextGroupDuration !== -1) {
            currentGroupSection.hide();
            nextGroupSection.show();

            var timerInQuestion = nextSectionElement.find(".timer-duration-panel");
            if (timerInQuestion.length) {
                clearInterval(self.QuestionCountDown);
                prepareTimerForQuestion.callWithLog(self, nextSectionElement);
            }
            else {
                clearInterval(self.TimerCountDown);
                prepareTimerForSectionGroup.callWithLog(self, nextSectionElement);
            }
        } else if (currentGroupSectionId !== nextGroupSectionId && nextGroupDuration === -1) {
            currentGroupSection.hide();
            nextGroupSection.show();
            var timerEl = currentGroupSection.find(".timer-widget");
            nextGroupSection.prepend(timerEl);
        } else {
            clearInterval(self.QuestionCountDown);
            prepareTimerForQuestion.callWithLog(self, nextSectionElement);
        }
        nextButtonExtendHandler.callWithLog(self, nextSectionElement);
    }

    function initEventHandler(wrapper) {
        var self = this;
        var eventHandler = {
            radioButtonChange: function (e) {
                e.preventDefault();
                var isEnable = this.value !== null;
                setButtonEnable.callWithLog(self, isEnable, wrapper);
            },
            inputTextChange: function () {
                var anyUnanswered = false;
                wrapper.find("input[type=text]").each(function () {
                    var element = $(this);
                    if (element.val().trim() === "") {
                        anyUnanswered = true;
                        return false;
                    }
                });

                if (!anyUnanswered) {
                    if (wrapper.find("#recordButton").length > 0) {
                        if (wrapper.find("#record-url").attr("href") !== "") {
                            setButtonEnable.callWithLog(self, true, wrapper);
                        }
                    } else {
                        setButtonEnable.callWithLog(self, true, wrapper);
                    }
                } else {
                    setButtonEnable.callWithLog(self, false, wrapper);
                }
            },
            textAreaChange: function () {
                var anyUnanswered = false;
                wrapper.find("textarea").each(function () {
                    var element = $(this);
                    if (element.val().trim() === "") {
                        anyUnanswered = true;
                        return false;
                    }
                });

                if (wrapper.find(".wordCount").length > 0) {
                    var element = wrapper.find("textarea");
                    var value = element.val();

                    if (value.length === 0) {
                        wrapper.find('.wordCount').html(0);
                    }
                    var regex = /\s+/gi;
                    var wordCount = value.trim().replace(regex, ' ').split(' ').length;

                    wrapper.find('.wordCount').html(wordCount);
                }
                setButtonEnable.callWithLog(self, !anyUnanswered, wrapper);
            },
            selectChange: function (e) {
                e.preventDefault();
                var anyUnanswered = false;
                wrapper.find("select").each(function () {
                    var selectedOption = $(this).find("option:selected");
                    if (selectedOption.index() === 0 || selectedOption.text() === "" || selectedOption.text() === "-") {
                        anyUnanswered = true;
                        return false;
                    }
                });
                setButtonEnable.callWithLog(self, !anyUnanswered, wrapper);
            }
        };

        wrapper.find("input[type=radio]")
            .off("change")
            .on("change", eventHandler.radioButtonChange);

        wrapper.find("input[type=text]")
            .bind("keyup change", eventHandler.inputTextChange);

        wrapper.find("textarea")
            .bind("keyup change", eventHandler.textAreaChange);

        wrapper.find("select")
            .off("change")
            .on("change", eventHandler.selectChange);
    }

    function initButtonEventHandler() {
        var self = this;

        var eventHandler = {
            closeBtnClick: function () {
                window.close();
            },
            nextBtnClick: function (e) {
                e.preventDefault();
                var currentSection = $(this).data('current-section');
                var nextSection = $(this).data('next-section');
                goToSection.callWithLog(self, nextSection, currentSection);
            },
            submitBtnClick: function (e) {
                e.preventDefault();
                stopAudio.callWithLog(self);
                clearIntervalBeforePlayAudio.callWithLog(self);
                saveAnswer.callWithLog(self);
            }
        };

        $(".closeButton", self.Element)
            .off("click")
            .on("click", eventHandler.closeBtnClick);

        $(".next-btn", self.Element)
            .off("click")
            .on("click", eventHandler.nextBtnClick);

        $("#submitButton", self.Element)
            .off("click")
            .on("click", eventHandler.submitBtnClick);
    }

    function nextButtonExtendHandler(wrapper) {
        var self = this;
        var sectionType = wrapper.data("section-type");

        initAudioPlayerWidget(wrapper.find("#audioPlayerPanel"));

        if (sectionType === "[INS]") {
            startAudio.callWithLog(self, wrapper);
        } else if (sectionType === "[LFIB]") {
            listeningFillInTheBlankAudioPlayerHandler.callWithLog(self, wrapper);
        }
    }

    function setButtonEnable(isEnable, wrapper) {
        if (isEnable === true) {
            wrapper.find(".next-btn").removeAttr("disabled");
            wrapper.find("#submitButton").removeAttr("disabled");
        } else {
            wrapper.find(".next-btn").attr("disabled", "disabled");
            wrapper.find("#submitButton").attr("disabled", "disabled");
        }
    }

    function prepareTimerForSectionGroup(wrapper) {
        var self = this;
        var duration = 0;
        var durationPanel = wrapper.parents(".panelSectionGroup").find(".timer-duration-panel");
        if (durationPanel.length > 0) {
            duration = $(durationPanel).data("duration");
        }

        var secondaryTimer = wrapper.find(".secondaryTimer");

        if (duration !== 0) {
            var timerId = durationPanel.prop("id");

            self.TimerInterval = setInterval(function () {
                DynamicTimerWithCustomInterval("#" + timerId, "",
                    function () { timeOut.callWithLog(self, wrapper); },
                self.TimerInterval);

                if (secondaryTimer.length) {
                    secondaryTimer.html(durationPanel.html());
                }
            },
                1000);
            self.TimerCountDown = self.TimerInterval;
        }
    }

    function prepareTimerForQuestion(wrapper) {
        var self = this;
        var duration = 0;
        var durationPanel = wrapper.find(".timer-duration-panel");
        if (durationPanel.length > 0) {
            duration = $(durationPanel).data("duration");
        }

        var readingDuration = 0;
        var secondaryTimer = wrapper.find(".secondaryTimer");
        var isDisableAutoStart = wrapper.find(".disable-auto-start-timer").length > 0;
        var oetWritingPanel = wrapper.find(".oet-writing-panel");

        if (oetWritingPanel.length > 0) {
            readingDuration = oetWritingPanel.data("reading-duration");
        }

        if (isDisableAutoStart) {
            return;
        }

        if (duration !== 0) {
            var timerId = durationPanel.prop("id");

            self.QuestionInterval = setInterval(function () {
                DynamicTimerWithCustomInterval("#" + timerId, "",
                    function () { questionTimeOut.callWithLog(self, wrapper); },
                self.QuestionInterval);

                if (secondaryTimer.length) {
                    secondaryTimer.html(durationPanel.html());
                }

                if (readingDuration > 0) {
                    readingDuration--;
                }

                if (readingDuration === 0 && oetWritingPanel.length && durationPanel.html() !== "00:00") {
                    oetWritingPanel.find("textarea").removeAttr("disabled");
                }
            },
                1000);
            self.QuestionCountDown = self.QuestionInterval;
        }
    }

    function timeOut(wrapper) {
        questionTimeOut.call(this, wrapper);
    }

    function questionTimeOut(wrapper) {
        var self = this;
        var sectionGroupCode = wrapper.parent().data("groupCode");

        self.E2Logger.MockTestManualLog("TIMEOUT", wrapper);

        if (sectionGroupCode === self.SectionGroupCode.Writing) {
            showInfoDialog(self.Message.WritingTimeOut);
            return;

        } else if (sectionGroupCode === self.SectionGroupCode.Listening) {
            showInfoDialog(self.Message.ListeningTimeOut);
            return;

        } else if (sectionGroupCode === self.SectionGroupCode.Reading) {
            showInfoDialog(self.Message.ReadingTimeOut);
            return;

        }
    }

    function clearIntervalBeforePlayAudio() {
        var self = this;
        clearInterval(self.BeforePlayAudioCountDown);
    }
    
    function stopAudio() {
        var sounds = $(".audio-player");
        var i;
        for (i = 0; i < sounds.length; i++) sounds[i].pause();
    }

    function stopYoutubeVideo() {
        $(".youtube-player").each(function () {
            var el_src = $(this).attr("src");
            $(this).attr("src", el_src);
        });
    }

    function stopWistiaVideo(currentSection) {
        if ($(currentSection).find(".wistia_responasive_wrapper").length) {
            var allVideos = Wistia.api.all();
            for (var i = 0; i < allVideos.length; i++) {
                allVideos[i].pause();
            }
        }
    }

    function constructSubmitData() {
        var self = this;
        $("input:hidden")
            .not('[name*="MockTestId"]')
            .not('[name*="MiniMockTest"]')
            .remove();

        $(".disabled").removeAttr("disabled").removeClass("disabled");
    }

    function validateTextArea() {
        var self = this;
        var validTextAreas = [];

        $("textarea[id^='SummarizeWritingAnswer']").each(function () {
            var result = isValidTextAreaValue.call(self, $(this));
            validTextAreas.push(result);
        });

        return validTextAreas;
    }

    function isValidTextAreaValue(textAreaEl) {
        var self = this;
        var value = textAreaEl.val();
        var minWord = textAreaEl.data("min-word");
        var maxWord = textAreaEl.data("max-word");
        var regex = /\s+/gi;
        var wordCount = value.trim().replace(regex, ' ').split(' ').length;

        if (wordCount < minWord || wordCount > maxWord) {
            var message = self.Message.WordLimitMessage;

            message = message.replace("[MIN_WORD]", minWord);
            message = message.replace("[MAX_WORD]", maxWord);

            showInfoDialog(message);

            return false;
        }

        return true;
    }

    function saveAnswer() {
        var self = this;
        stopAudio.callWithLog(self);
        var url = self.MaintenanceForm.data("save-url");
        constructSubmitData.callWithLog(self);

        var validateTextAreaResult = validateTextArea.call(self);
        if (validateTextAreaResult.includes(false)) {
            return;
        }

        submitFormOverride("#" + self.MaintenanceForm.prop("id"),
            url,
            function (data) {
                if (data.IsSuccess) {
                    $("#submitButton", self.Element).hide();
                    $(".page-main-activity", self.Element).empty();
                    $("#SubmittedView", self.Element).show();
                    $("#SubmittedMessage", self.Element).html(data.Value.Message);

                    updateParentActivityPanel.callWithLog(self, data);
                }
                else {
                    showInfoDialog(data.MessageErrorTextArray);
                    clearInterval(self.TimerCountDown);
                    clearInterval(self.QuestionCountDown);

                    $("#" + self.MaintenanceForm.prop("id"))
                        .find("*")
                        .attr("disabled", "disabled")
                        .addClass("disabled");
                }
            }
        );
    }

    function listeningFillInTheBlankAudioPlayerHandler(wrapper) {
        var self = this;
        var onEnded = function () {
            timeOut.callWithLog(self, wrapper);
        };

        var groupWrapper = wrapper.closest(".panelSectionGroup");
        audioPlayerHandler.callWithLog(self, groupWrapper, null, onEnded);
    }

    function stopBeforePlayAudioCounter() {
        var self = this;
        if (self.BeforePlayAudioCountDown !== undefined || self.BeforePlayAudioCountDown !== null) {
            clearInterval(self.BeforePlayAudioCountDown);
            self.BeforePlayAudioCountDown = null;
        }
    }

    function stopBeforePlayAudioCountdown(wrapper) {
        var self = this;
        var audioPlayerEl = wrapper.find("#audioPlayerPanel audio");

        if (audioPlayerEl.length && audioPlayerEl[0] !== undefined) {
            var playAudioPromise = audioPlayerEl[0].play();
            if (playAudioPromise !== undefined) {
                playAudioPromise.then(_ => {
                    wrapper.find(".e2l-audio-player-footer").addClass("hidden");
                }).catch(error => {
                    wrapper.find(".e2l-audio-player-footer").removeClass("hidden");
                });
            } else {
                wrapper.find(".e2l-audio-player-footer").removeClass("hidden");
            }
        } else {
            wrapper.find(".e2l-audio-player-footer").removeClass("hidden");
        }

        var sectionGroupCode = wrapper.closest(".panelSectionGroup").data("group-code");
        if (sectionGroupCode === "LIS") {
            wrapper.find(".e2l-audio-player-footer").removeClass("hidden");
        }

        stopBeforePlayAudioCounter.callWithLog(self);
        hideBeforePlayAudioLog.callWithLog(self, wrapper);
    }

    function hideBeforePlayAudioLog(wrapper) {
        wrapper.find('.counter-before-play')
            .css("visibility", "hidden")
            .empty();
    }
    
    function startAudio(wrapper) {
        var self = this;
        var timerNumber = 0;

        self.BeforePlayAudioCountDown = setInterval(function () {
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                wrapper.find(".audioPlayer").removeClass("disabled-audio");
                stopBeforePlayAudioCountdown.callWithLog(self, wrapper);
            }
        },
            1000);

        audioPlayerHandler.callWithLog(self, wrapper);
    }

    function audioPlayerHandler(wrapper, onPlay, onEnded) {
        var self = this;
        var audioPlayerEl = wrapper.find("#audioPlayerPanel audio");

        if (audioPlayerEl.length === 0) {
            return;
        }

        self.IsAudioPlayed = false;

        var eventHandler = {
            play: function () {
                audioPlayerEl.find(".e2l-audio-player-footer").addClass("hidden");

                if (self.IsAudioPlayed || self.BeforePlayAudioCountDown !== null) {
                    this.pause();
                    return;
                }

                if (typeof onPlay === "function") {
                    onPlay($(this));
                }
            },
            ended: function () {
                if (self.IsAudioPlayed) {
                    return;
                }

                self.IsAudioPlayed = true;
                if (typeof onEnded === "function") {
                    onEnded();
                }
            }
        };

        audioPlayerEl
            .off("play")
            .on('play', eventHandler.play);

        audioPlayerEl
            .off("ended")
            .on('ended', eventHandler.ended);
    }

    function updateParentActivityPanel(response) {
        if (window.opener !== null && !window.opener.closed) {
            $("#btnStart", window.opener.document).remove();
            $("#MiniMockTestMessage", window.opener.document).html(response.Value.Message);
            $("#btnBookAppointment", window.opener.document).removeClass("hidden");
        }
    }

    // Constructor
    var studentOetMiniMockTestView = function (element) {
        this.Element = element;
        this.MaintenanceForm = $("#maintenanceForm");
        this.BeforePlayAudioCountDown = null;
        this.CurrentMockTestQuestionId = null;
        this.IsAudioPlayed = false;
        this.TimerCountDown = null;
        this.TimerInterval = null;
        this.QuestionCountDown = null;
        this.QuestionInterval = null;
        this.E2Logger = new E2Logger();
        this.Message = {
            WordLimitMessage: "",
            WritingTimeOut: "",
            ListeningTimeOut: "",
            ReadingTimeOut: ""
        };
        this.SectionGroupCode = {
            Listening: "",
            Writing: "",
            Speaking: "",
            Reading: ""
        };
    };

    studentOetMiniMockTestView.prototype = {
        constructor: studentOetMiniMockTestView,
        Register: function () {
            var self = this;

            self.E2Logger.InitializeMockTestLogger(self.Element);
            self.BindEventHandler();
            self.Initialize();
        },
        BindEventHandler: function () {
            var self = this;

            $(".wrapper-question", self.Element)
                .each(function () {
                    var wrapper = $(this);
                    var sectionType = wrapper.data("section-type");
                    var isEnable = sectionType === "[INS]";
                    setButtonEnable.callWithLog(self, isEnable, wrapper);
                    initEventHandler.callWithLog(self, wrapper);
                });

            initButtonEventHandler.callWithLog(self);
        },
        Initialize: function () {
            var self = this;

            $(".wordCount", self.Element).html(0);

            var sectionWrapper = $("#Q1", self.Element);
            nextButtonExtendHandler.callWithLog(self, sectionWrapper);
            prepareTimerForSectionGroup.callWithLog(self, sectionWrapper);
        }
    };

    // Export javascript class into window environment
    window.StudentOetMiniMockTestView = studentOetMiniMockTestView;
})(jQuery, window);;
var StudentOetMiniMockTestViewDetail = function (element) {
    this.Element = element;
};

StudentOetMiniMockTestViewDetail.prototype = {
    constructor: StudentOetMiniMockTestViewDetail,
    Register: function () {
        var self = this;

        self.GenerateComment();

        $(".closeButton").click(function () {
            window.close();
        });
    },
    GenerateComment: function () {
        $(".panel-section").each(function () {
            var comment = "";
            $(this).find(".form-group").each(function () {
                var selectedInput = $(this).find("input[type=radio]:checked");
                if (selectedInput.length) {
                    var currentComment = selectedInput[0].dataset["comment"];
                    if (currentComment !== "")
                        comment += "<p>" + currentComment + "</p>";
                }
            });
            $(this).find("[id^=comment]").html(comment);
        });
    }
};
var StudentOetMiniMockTestViewDetailV2 = function (element) {
    this.Element = element;
};

StudentOetMiniMockTestViewDetailV2.prototype = {
    constructor: StudentOetMiniMockTestViewDetailV2,
    Register: function () {
        var self = this;

        $(".closeButton").click(function () {
            window.close();
        });
    }
};
var StudentPteMiniMockTestIndex = function (element) {
    this.Element = element;
    this.ScoreChartPanel = $("#scoreChartPanel");
}

StudentPteMiniMockTestIndex.prototype = {
    constructor: StudentPteMiniMockTestIndex,
    Register: function () {
        var self = this;
        $("#btnStart").click(function (e) {
            e.preventDefault();
            closeErrorPane();

            var element = $(this);
            var url = element.data("url") +
                "?mockTestId=" +
                element.data("mock-test-id");
            showPopup(url);
        });


        $("#btnBuyAddOns").click(function(e) {
            e.preventDefault();

            showLoadingDialog();
            var url = $(this).data("payment-url");

            if (url !== "") {
                $.get(url, function (contentData) {
                    $('#mainUserContent').html(contentData);
                    hideLoadingDialog();

                    var helper = new Helper();
                    var namespace = helper.CreateNameSpaceFromURL(contentUrl);
                    var apps = new Application($('#mainUserContent'), namespace);
                    apps.Register();
                });
            }
        });

        $("#btnScoreSummary").click(function (e) {
            e.preventDefault();
            var element = $(this);
            var url = element.data("url");
            var container = $("#mainUserContent");

            loadApplicationContent(url, "GET",
                function (result) {
                    container.html(result);
                });
        });

        $("#btnBookAppointment").click(function (e) {
            e.preventDefault();
            var maintenanceDiv = $("#appointmentWrapper");
            var appointmentUrl = $(this).data("appointment-url");

            self.GenerateApplicationDialog(appointmentUrl, maintenanceDiv);
        });

        $("#btnViewAppointment").click(function (e) {
            e.preventDefault();
            var maintenanceDiv = $("#gridAppointmentWrapper");
            var appointmentUrl = $(this).data("grid-appointment-url");

            self.GenerateApplicationDialog(appointmentUrl, maintenanceDiv);
        });
        
        $('.answer-report-tooltip').tooltipster({
            theme: 'tooltipster-light',
            side: 'right'
        });

        $('.answerDetailLink').click(function () {
            var mockTestQuestionId = $(this).data("mock-test-question-id");
            var url = $(this).data("url") + "?mockTestQuestionId=" + mockTestQuestionId;
            showPopup(url);
        });

        self.GetScoreChart();

        
    },
    GenerateApplicationDialog: function(url, maintenanceDiv) {

        showProcessingDialog();
        $("#errorPane").remove();
        maintenanceDiv.html("");

        $.get(url,
            function (data) {
                maintenanceDiv.html('');
                maintenanceDiv.append(data);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application(maintenanceDiv, namespace);
                apps.RegisterWithCaller(self);

            });
    },
    GetScoreChart: function () {
        var self = this;
        var url = self.ScoreChartPanel.data("get-url");

        self.ScoreChartPanel.html('<span class="icon fa fa-refresh fa-spin"></span> ' + self.ScoreChartPanel.data("loading-message"));

        submitDataWithoutLoader({}, url, function (data) {
            self.ScoreChartPanel.empty();
            self._generateScoreChart(data.Value);
            self.ScoreChartPanel.parent().addClass("p-0");
        },
        function () {
                return;
        });
    },

    _generateScoreChart: function (dataPanel) {
        var self = this;
        var xdata = [];
        var ydata = [];
        var scoreTextData = [];
        var colorData = [];
        var examTypeCode = $("#ExamTypeCode").val();

        $.each(dataPanel,
            function (index, row) {

                xdata.push(row.Title);
                ydata.push(row.Score);

                var chartItem = {
                    scoreLabel: row.ScoreText,
                    score: row.Score,
                    sectionScoreText: row.SectionScoreText
                };
                scoreTextData.push(chartItem);

                if (row.Title === 'OVERALL') {
                    colorData.push(self.ScoreChartPanel.data("overall-color"));
                }
                else {
                    colorData.push(self.ScoreChartPanel.data("default-color"));
                }
            });

        function getScoreText(score) {
            return scoreTextData.find(item => item.score === score).scoreLabel;
        }

        function getSectionScoreText(score) {
            return scoreTextData.find(item => item.score === score).sectionScoreText;
        }

        Highcharts.chart('scoreChartWrapper', {
            chart: {
                type: 'bar'
            },
            title: {
                text: 'Overall Score',
                align: 'left',
                style: {
                    "color": "#2D4F7D",
                    "fontSize": "18px",
                    "fontWeight": "500"
                }
            },
            xAxis: {
                categories: xdata,
                title: {
                    text: null
                }
            },
            yAxis: {
                min: 0,
                max: 100,
                title: {
                    text: null
                },
                labels: {
                    overflow: 'justify',
                    step: 5
                },
                lineWidth: 2,
                lineColor: '#bdbdbd'
            },
            tooltip: {
                enabled: examTypeCode === $(".page-main").data("exam-type-oet"),
                formatter: function () {
                    return this.x + "<br/>" + getSectionScoreText(this.y);
                }
            },
            plotOptions: {
                bar: {
                    dataLabels: {
                        enabled: true
                        
                    }
                },
                series: {
                    dataLabels: {
                        formatter: function () {
                            return getScoreText(this.y);
                        }
                    },
                    pointWidth: 30,
                    colorByPoint: true
                }
            },
            credits: {
                enabled: false
            },
            exporting: {
                enabled: false
            },
            series: [{
                showInLegend: false,
                data: ydata,
                colors: colorData,
                
            }],
            navigation: {
                buttonOptions: {
                    verticalAlign: 'top',
                    y: 0
                }
            }
        });

    }
};
(function ($, window) {
    "use strict";

    // Private Functions
    function goToSection(sectionName, currentSection) {
        var self = this;
        var currentSectionElement = $("#" + currentSection);
        var nextSectionElement = $("#" + sectionName);
        self.CurrentMockTestQuestionId = nextSectionElement.data("id");

        var recorderButton = currentSectionElement.find(".multipleRecorderButton");
        if (recorderButton.length !== 0 && !recorderButton.hasClass("hidden")) {
            recorderButton.click();
        }

        var currentGroupSection = currentSectionElement.parents(".panelSectionGroup");
        var currentGroupSectionId = currentGroupSection.data("section-group-id");

        var nextGroupSection = nextSectionElement.parents(".panelSectionGroup");
        var nextGroupSectionId = nextGroupSection.data("section-group-id");

        var instructionPanel = currentGroupSection.find(".row.mini-mocktest-single-panel.ins");
        var instructionAudio = instructionPanel.find(".instruction-audio");

        stopRecord.callWithLog(self, currentSection);
        if (currentGroupSectionId !== nextGroupSectionId || instructionAudio.length === 0) {
            stopAudio.callWithLog(self);
        }

        stopYoutubeVideo.callWithLog(self);
        stopWistiaVideo.callWithLog(self, currentSection);
        clearIntervalBeforePlayAudio.callWithLog(self);

        currentSectionElement.hide();
        nextSectionElement.show();

        var nextGroupDuration = nextGroupSection.data("duration");

        if (currentGroupSectionId !== nextGroupSectionId && nextGroupDuration !== -1) {
            currentGroupSection.hide();
            nextGroupSection.show();

            var timerInQuestion = nextSectionElement.find(".timer-duration-panel");
            if (timerInQuestion.length) {
                clearInterval(self.QuestionCountDown);
                prepareTimerForQuestion.callWithLog(self, nextSectionElement);
            }
            else {
                clearInterval(self.TimerCountDown);
                prepareTimerForSectionGroup.callWithLog(self, nextSectionElement);
            }
        } else if (currentGroupSectionId !== nextGroupSectionId && nextGroupDuration === -1) {
            currentGroupSection.hide();
            nextGroupSection.show();
            var timerEl = currentGroupSection.find(".timer-widget");
            nextGroupSection.prepend(timerEl);
        } else {
            clearInterval(self.QuestionCountDown);
            prepareTimerForQuestion.callWithLog(self, nextSectionElement);
        }
        nextButtonExtendHandler.callWithLog(self, nextSectionElement);
    }

    function initEventHandler(wrapper) {
        var self = this;
        var eventHandler = {
            radioButtonChange: function (e) {
                e.preventDefault();
                var isEnable = this.value !== null;
                setButtonEnable.callWithLog(self, isEnable, wrapper);
            },
            checkBoxChange: function (e) {
                e.preventDefault();
                var totalChecked = wrapper.find("input:checkbox:checked").length;
                var isEnable = totalChecked > 0;
                setButtonEnable.callWithLog(self, isEnable, wrapper);
            },
            clickableClick: function (e) {
                e.preventDefault();
                var element = $(this);
                setTimeout(function () {
                    var isEnable = element.hasClass("hasclicked");
                    setButtonEnable.callWithLog(self, isEnable, wrapper);
                }, 100);
            },
            highlightClick: function (e) {
                e.preventDefault();
                $(this).toggleClass("blank highlighted");

                var isHighlighted = wrapper.find(".highlighted").length > 0;
                setButtonEnable.callWithLog(self, isHighlighted, wrapper);
            },
            inputTextChange: function () {
                var anyUnanswered = false;
                wrapper.find("input[type=text]").each(function () {
                    var element = $(this);
                    if (element.val().trim() === "") {
                        anyUnanswered = true;
                        return false;
                    }
                });

                if (!anyUnanswered) {
                    if (wrapper.find("#recordButton").length > 0) {
                        if (wrapper.find("#record-url").attr("href") !== "") {
                            setButtonEnable.callWithLog(self, true, wrapper);
                        }
                    } else {
                        setButtonEnable.callWithLog(self, true, wrapper);
                    }
                } else {
                    setButtonEnable.callWithLog(self, false, wrapper);
                }
            },
            textAreaChange: function () {
                var anyUnanswered = false;
                wrapper.find("textarea").each(function () {
                    var element = $(this);
                    if (element.val().trim() === "") {
                        anyUnanswered = true;
                        return false;
                    }
                });

                if (wrapper.find(".wordCount").length > 0) {
                    var element = wrapper.find("textarea");
                    var value = element.val();

                    if (value.length === 0) {
                        wrapper.find('.wordCount').html(0);
                    }
                    var regex = /\s+/gi;
                    var wordCount = value.trim().replace(regex, ' ').split(' ').length;

                    wrapper.find('.wordCount').html(wordCount);
                }
                setButtonEnable.callWithLog(self, !anyUnanswered, wrapper);
            },
            selectChange: function (e) {
                e.preventDefault();
                var anyUnanswered = false;
                wrapper.find("select").each(function () {
                    var selectedOption = $(this).find("option:selected");
                    if (selectedOption.index() === 0 || selectedOption.text() === "" || selectedOption.text() === "-") {
                        anyUnanswered = true;
                        return false;
                    }
                });
                setButtonEnable.callWithLog(self, !anyUnanswered, wrapper);
            },
            recordButtonClick: function (e) {
                self.E2Logger.IsManualClick = e.originalEvent !== undefined;

                e.preventDefault();
                var btnEl = $(this);

                startCountdown.callWithLog(self, wrapper, btnEl);
                
            },
            uploadButtonClick: function (e) {
                e.preventDefault();
                uploadAudioFile.callWithLog(self, wrapper);
            }
        };

        wrapper.find("input[type=radio]")
            .off("change")
            .on("change", eventHandler.radioButtonChange);

        wrapper.find("input[type=checkbox]")
            .off("change")
            .on("change", eventHandler.checkBoxChange);

        wrapper.find(".clickable")
            .off("click")
            .on("click", eventHandler.clickableClick);

        wrapper.find(".highlight-word")
            .off("click")
            .on("click", eventHandler.highlightClick);

        wrapper.find("input[type=text]")
            .bind("keyup change", eventHandler.inputTextChange);

        wrapper.find("textarea")
            .bind("keyup change", eventHandler.textAreaChange);

        wrapper.find("select")
            .off("change")
            .on("change", eventHandler.selectChange);

        wrapper.find(".multipleRecorderButton")
            .off("click")
            .on("click", eventHandler.recordButtonClick);

        wrapper.find(".multipleUploadButton")
            .off("click")
            .on("click", eventHandler.uploadButtonClick);
    }

    function initDragAndDropHandler() {
        var uniqueAnswerIds = new Array();

        function isInArray(value, array) {
            return array.indexOf(value) > -1;
        }

        $(".draggable")
            .draggable({
                helper: "clone",
                revert: function () {
                    if ($(this).hasClass("drag-revert")) {
                        return true;
                    }
                }
            });

        $(".droppable")
            .droppable({
                accept: ".draggable",
                drop: function (e, ui) {
                    var answerId = $(ui.draggable).data("answerid");
                    var sortingIndex = $(ui.draggable).data("sortingindex");
                    var sentenceKey = $(ui.draggable).data("sentencekey");
                    if (uniqueAnswerIds.length === 0 || isInArray(answerId, uniqueAnswerIds) === false) {
                        if ($(this).find(".remove-sentence").hasClass("hidden") &&
                            !$(this).hasClass("correct-answer")) {
                            var content = $(this);
                            var btnNext = content.closest(".wrapper-question").find(".next-btn");
                            var orderParagraph = content.closest(".wrapper-question").find(".sentence-text");
                            var btnSubmit = content.closest(".wrapper-question").find(".submit-btn");
                            var haveSentence = 0;

                            $(this)
                                .find(".remove-sentence")
                                .click(function (e) {
                                    e.preventDefault();
                                    content.find(".sentence-text").html("");
                                    content.find(".remove-sentence").addClass("hidden");
                                    $("#draggable-" + $(this)[0].dataset["answerid"]).removeClass("hidden");
                                    var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                    uniqueAnswerIds.splice(index, 1);
                                    $(this).parent().data("answerid", "");

                                    haveSentence = 0;
                                    orderParagraph.each(function () {
                                        if ($(this).html() !== "") {
                                            haveSentence--;
                                        }
                                    });

                                    if (orderParagraph.length === haveSentence) {
                                        btnNext.removeAttr("disabled");
                                        btnSubmit.removeAttr("disabled");
                                    } else {
                                        btnNext.attr("disabled", "disabled");
                                        btnSubmit.attr("disabled", "disabled");
                                    }
                                });
                            if ($(this).data("answerid") !== "") {
                                var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                uniqueAnswerIds.splice(index, 1);
                            }
                            $(this).data("answerid", answerId);
                            $(this).data("sortingindex", sortingIndex);
                            $(this).data("sentencekey", sentenceKey);
                            $(this).find(".sentence-text").html($(ui.draggable).html());
                            $(this).find(".remove-sentence").removeClass("hidden")
                                .attr("data-answerid", answerId);

                            $("#draggable-" + answerId).addClass("hidden");

                            uniqueAnswerIds.push($(this).data("answerid"));

                            orderParagraph.each(function () {
                                if ($(this).html() !== "") {
                                    haveSentence++;
                                }
                            });

                            if (orderParagraph.length === haveSentence) {
                                btnNext.removeAttr("disabled");
                                btnSubmit.removeAttr("disabled");
                            } else {
                                btnNext.attr("disabled", "disabled");
                                btnSubmit.attr("disabled", "disabled");
                            }
                            return $(ui.draggable).removeClass("drag-revert");
                        } else {
                            $("#draggable-" + answerId).removeClass("hidden");
                            return $(ui.draggable).addClass("drag-revert");
                        }
                    }
                }
            });
    }

    function initButtonEventHandler() {
        var self = this;

        var eventHandler = {
            closeBtnClick: function () {
                window.close();
            },
            nextBtnClick: function (e) {
                e.preventDefault();

                var wrapper = $(e.currentTarget).parents(".wrapper-question");
                var isValidTextArea = validateTextArea(wrapper);
                if (isValidTextArea) {
                    var currentSection = $(this).data('current-section');
                    var nextSection = $(this).data('next-section');

                    goToSection.callWithLog(self, nextSection, currentSection);
                }
            },
            submitBtnClick: function (e) {
                e.preventDefault();

                var wrapper = $(e.currentTarget).parents(".wrapper-question");
                var isValidTextArea = validateTextArea(wrapper);
                if (isValidTextArea) {
                    var form = $(e.currentTarget).parents("form");
                    stopAudio.callWithLog(self);
                    clearIntervalBeforePlayAudio.callWithLog(self);
                    saveAnswer.callWithLog(self, form);
                }
            }
        };

        $(".closeButton")
            .off("click")
            .on("click", eventHandler.closeBtnClick);

        $(".next-btn", self.Element)
            .off("click")
            .on("click", eventHandler.nextBtnClick);

        $(".submit-btn", self.Element)
            .off("click")
            .on("click", eventHandler.submitBtnClick);

        $('#troubleshootSectionBtn', self.Element)
            .off("click")
            .on("click", function (e) {
                e.preventDefault();
                var logText = 'Please take a screenshot and send it to hello@e2language.com. ';
                logText += self.LogText;
                alert(logText);
            });

        $('#troubleshootWfdSectionBtn', self.Element)
            .off("click")
            .on("click", function (e) {
                e.preventDefault();

                var audioPlayerEl = self.WfdWrapper.find("#audioPlayerPanel audio");
                if (audioPlayerEl.length && audioPlayerEl[0] !== undefined) {
                    var newAudio = new Audio(audioPlayerEl[0].src);
                    var playerPromise = newAudio.play();
                    if (playerPromise !== undefined) {
                        playerPromise.then(function () {
                            alert('Audio is refreshed and played. Please take a screenshot and send it to hello@e2language.com.');
                        }).catch(function () {
                            alert('Audio is refreshed and error occurred. Please take a screenshot and send it to hello@e2language.com.');
                        });
                    } else {
                        alert('Audio promise is undefined. Please check your connection. Please take a screenshot and send it to hello@e2language.com.');
                    }
                } else {
                    alert('Audio file is missing. Please take a screenshot and send it to hello@e2language.com.');
                }
            });
    }

    function validateTextArea(wrapper) {
        var textAreaInput = wrapper.find("textarea");
        if (textAreaInput.length) {
            var minWord = textAreaInput.data("min-word");
            var maxWord = textAreaInput.data("max-word");
            var countWord = wrapper.find(".wordCount").html();
            var message = wrapper.parents("form").data("word-count-invalid") + minWord + "-" + maxWord + " words.";
            if (countWord < minWord || countWord > maxWord) {
                showInfoDialog(message);
                return false;
            }
        }
        return true;
    }

    function nextButtonExtendHandler(wrapper) {
        var self = this;
        var sectionType = wrapper.data("section-type");
        var wrapperId = wrapper.data('id');

        var hasHiddenTroubeShoot = $('#troubleshootSection', self.Element).hasClass('hidden');
        if (!hasHiddenTroubeShoot) {
            $('#troubleshootSection', self.Element).addClass('hidden');
        }

        var hasHiddenTroubeShootWfd = $('#troubleshootWfdSection', self.Element).hasClass('hidden');
        if (!hasHiddenTroubeShootWfd) {
            $('#troubleshootWfdSection', self.Element).addClass('hidden');
        }

        initAudioPlayerWidget(wrapper.find("#audioPlayerPanel"));

        if (sectionType === "[FIB]" ||
            sectionType === "[MCSA]" ||
            sectionType === "[MCMA]" ||
            sectionType === "[HCS]" ||
            sectionType === "[SMW]" ||
            sectionType === "[HIW]"
        ) {
            startBeforePlayAudioCountdown.callWithLog(self, wrapper);
        } else if (sectionType === "[RA]") {
            startBeforeRecordCountdown.callWithLog(self, wrapper);
        }
        else if (sectionType === "[INS]") {
            startAudio.callWithLog(self, wrapper);
        }

        if (sectionType === "[RL]") {
            startBeforePlayAudioRLCountdown.callWithLog(self, wrapper);
            retellLectureAudioPlayerHandler.callWithLog(self, wrapper);
        } else if (sectionType === "[DI]") {
            var playRingBell = function () {
                wrapper.find(".bell-ring")[0].play();
            };
            startBeforeRecordCountdown.callWithLog(self, wrapper, playRingBell);
        } else if (sectionType === "[RS]") {
            startBeforePlayAudioCountdown.callWithLog(self, wrapper);
            repeatSentenceAudioPlayerHandler.callWithLog(self, wrapper);
        } else if (sectionType === "[ASQ]") {
            startBeforePlayAudioCountdown.callWithLog(self, wrapper);
            answerShortQuestionAudioPlayerHandler.callWithLog(self, wrapper);
        } else if (sectionType === "[DI]") {
            startBeforeRecordCountdown.callWithLog(self, wrapper);
        } else if (sectionType === "[SST]") {
            $('#troubleshootSection', self.Element).removeClass('hidden');
            self.LogText = 'Goes to SST >';
            startBeforePlayAudioCountdown.callWithLog(self, wrapper);
            spokenTextAudioPlayerHandler.callWithLog(self, wrapper);
        } else if (sectionType === "[WFD]") {
            setwriteFromDictionaryAudioPlayerLog.callWithLog(self, wrapper);
            startBeforePlayAudioCountdown.callWithLog(self, wrapper);
            writeFromDictionaryAudioPlayerHandler.callWithLog(self, wrapper);
        } else if (sectionType === "[LFIB]") {
            listeningFillInTheBlankAudioPlayerHandler.callWithLog(self, wrapper);
        }
    }

    function setwriteFromDictionaryAudioPlayerLog(wrapper) {
        var self = this;

        $('#troubleshootWfdSection', self.Element).removeClass('hidden');
        self.WfdWrapper = wrapper;
    }

    function setButtonEnable(isEnable, wrapper) {
        if (isEnable === true) {
            wrapper.find(".next-btn").removeAttr("disabled");
            wrapper.find(".submit-btn").removeAttr("disabled");
        } else {
            wrapper.find(".next-btn").attr("disabled", "disabled");
            wrapper.find(".submit-btn").attr("disabled", "disabled");
        }
    }

    function prepareTimerForSectionGroup(wrapper) {
        var self = this;
        var duration = 0;
        var durationPanel = wrapper.parents(".panelSectionGroup").find(".timer-duration-panel");
        if (durationPanel.length > 0) {
            duration = $(durationPanel).data("duration");
        }

        var secondaryTimer = wrapper.find(".secondaryTimer");

        if (duration !== 0) {
            var timerId = durationPanel.prop("id");

            self.TimerInterval = setInterval(function () {
                DynamicTimerWithCustomInterval("#" + timerId, "",
                    function () { timeOut.callWithLog(self, wrapper); },
                    self.TimerInterval);

                if (secondaryTimer.length) {
                    secondaryTimer.html(durationPanel.html());
                }
            },
                1000);
            self.TimerCountDown = self.TimerInterval;
        }
    }

    function prepareTimerForQuestion(wrapper) {
        var self = this;
        var duration = 0;
        self.LogText += 'Goes to prepareTimerForQuestion(wrapper) ';
        var durationPanel = wrapper.find(".timer-duration-panel");
        if (durationPanel.length > 0) {
            self.LogText += 'Goes if (durationPanel.length > 0) ';
            duration = $(durationPanel).data("duration");
        }

        self.LogText += 'Check Line var secondaryTimer = wrapper.find(".secondaryTimer") ';
        var secondaryTimer = wrapper.find(".secondaryTimer");
        if (wrapper.find(".disable-auto-start-timer").length) {
            self.LogText += 'Goes if (wrapper.find(".disable-auto-start-timer").length) ';
            return;
        }

        self.LogText += 'Check if (duration !== 0) ';
        if (duration !== 0) {
            var timerId = durationPanel.prop("id");

            self.LogText += 'Goes to if (duration !== 0) and set self.QuestionInterval ';
            self.QuestionInterval = setInterval(function () {
                DynamicTimerWithCustomInterval("#" + timerId, "",
                    function () { questionTimeOut.callWithLog(self, wrapper); },
                    self.QuestionInterval);

                if (secondaryTimer.length) {
                    secondaryTimer.html(durationPanel.html());
                }
            },
                1000);
            self.QuestionCountDown = self.QuestionInterval;
        }
    }

    function timeOut(wrapper) {
        var self = this;
        var currentGroupSection = wrapper.parents(".panelSectionGroup");
        var currentActiveSection = currentGroupSection.find(".wrapper-question:visible");

        self.E2Logger.MockTestManualLog("TIMEOUT", currentActiveSection);
    }

    function questionTimeOut(wrapper) {
        var self = this;
        var sectionGroupCode = wrapper.parent().data("groupCode");

        self.E2Logger.MockTestManualLog("TIMEOUT", wrapper);

        if (sectionGroupCode === self.SectionGroupCode.Writing) {
            showInfoDialog(self.Message.WritingTimeOut);
        }
    }

    function clearIntervalBeforePlayAudio() {
        var self = this;
        clearInterval(self.BeforePlayAudioCountDown);
    }

    function stopRecord(currentSection) {
        var recordButton = $("#" + currentSection).find("#recordButton");
        if (recordButton.length && !recordButton.hasClass("btn-danger")) {
            recordButton.click();
        }
    }

    function stopAudio() {
        var sounds = $(".audio-player");
        var i;
        for (i = 0; i < sounds.length; i++) sounds[i].pause();
    }

    function stopYoutubeVideo() {
        $(".youtube-player").each(function () {
            var el_src = $(this).attr("src");
            $(this).attr("src", el_src);
        });
    }

    function stopWistiaVideo(currentSection) {
        if ($(currentSection).find(".wistia_responasive_wrapper").length) {
            var allVideos = Wistia.api.all();
            for (var i = 0; i < allVideos.length; i++) {
                allVideos[i].pause();
            }
        }
    }

    function stopBeforeRecordCounter() {
        var self = this;
        if (self.BeforeRecordCountDown !== undefined || self.BeforeRecordCountDown !== null) {
            clearInterval(self.BeforeRecordCountDown);
            self.BeforeRecordCountDown = null;
        }
    }

    function stopBeforePlayAudioCounter() {
        var self = this;
        if (self.BeforePlayAudioCountDown !== undefined || self.BeforePlayAudioCountDown !== null) {
            clearInterval(self.BeforePlayAudioCountDown);
            self.BeforePlayAudioCountDown = null;
        }
    }

    function startBeforePlayAudioCountdown(wrapper) {
        var self = this;
        self.LogText += 'Goes startBeforePlayAudioCountdown(wrapper) ';
        var timerNumber = 3;
        self.LogText += 'Check .counter-before-play ';
        var countDownEl = wrapper.find('.counter-before-play');
        if (countDownEl.length) {
            self.LogText += 'Goes if (countDownEl.length) ';
            var duration = countDownEl.data("duration");

            if (duration !== 0) {
                self.LogText += 'Goes if (duration !== 0) ';
                timerNumber = parseInt(duration);
            }

            self.LogText += 'Set interval self.BeforePlayAudioCountDown ';
            self.BeforePlayAudioCountDown = setInterval(function () {
                writeBeforePlayAudioLogCountDown.callWithLog(self, wrapper, timerNumber);
                timerNumber = timerNumber - 1;
                if (timerNumber < 0) {
                    wrapper.find(".audioPlayer").removeClass("disabled-audio");
                    stopBeforePlayAudioCountdown.callWithLog(self, wrapper);
                }
            }, 1000);
        }

        audioPlayerHandler.callWithLog(self, wrapper);
    }

    function stopBeforeRecordCountdown(wrapper, countDownEl) {
        var self = this;
        var recordButtonEl = countDownEl.closest("#recorderControlPanel").find("#recordButton");
        showRecordButton.callWithLog(self, wrapper, recordButtonEl);

        stopBeforeRecordCounter.callWithLog(self);
        hideBeforeRecordLog.callWithLog(self, wrapper);
    }

    function startBeforeRecordCountdown(wrapper, onStopCountDown) {
        var self = this;
        var timerNumber = 0;
        var countDownEl = wrapper.find('[id^="beforeRecordingLog"]');
        var duration = countDownEl.data("duration");
        var isUploadFormVisible = wrapper.find(".uploadControlSection").is(":visible");

        if (isUploadFormVisible) {
            return;
        }

        var stopCountdownAction = function () {
            if (typeof onStopCountDown === "function") {
                onStopCountDown();
            }

            stopBeforeRecordCountdown.callWithLog(self, wrapper, countDownEl);
        };

        wrapper.find("#recordButton").addClass("hidden");

        if (duration === 0 || duration === null || duration === undefined) {
            stopCountdownAction();
            return;
        } else {
            timerNumber = parseInt(duration);
        }

        self.BeforeRecordCountDown = setInterval(function () {
            writeBeforeRecordLogCountDown.callWithLog(self, wrapper, timerNumber);
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                stopCountdownAction();
            }
        },
            1000);
    }

    function writeBeforePlayAudioLogCountDown(wrapper, number) {
        var label = "seconds";

        if (number <= 1) {
            label = "second";
        }

        wrapper.find('.counter-before-play').html("Beginning in: <strong>" + number + " " + label + "</strong>");
    }

    function showRecordButton(wrapper, recordButtonEl) {
        var self = this;

        recordButtonEl.removeClass("hidden");
        showLog.callWithLog(self, wrapper);
        var duration = recordButtonEl.data("duration");
        var timerNumber = 35;
        if (duration !== 0) {
            timerNumber = parseInt(duration);
        }
        writeDown.callWithLog(self, wrapper, timerNumber);

        recordButtonEl.click();
    }

    function uploadAudioFile(wrapper) {
        var self = this;
        var form = wrapper.parents("form");
        var recordingUrl = form.data("upload-audio-file-url");
        recordingUrl += "?mockTestQuestionId=" + wrapper.data("id");

        var pauseTimer = function () {
            clearInterval(self.QuestionCountDown);
            clearInterval(self.TimerCountDown);
        };

        customUploadAudioSpeakingFile(
            event,
            recordingUrl,
            pauseTimer,
            function (response) {
                resumeSectionTimer.callWithLog(self, wrapper);
                hideLog.callWithLog(self, wrapper);
                var spinner = wrapper.find('[id^="spinnerImage"]');
                spinner.hide();

                if (response.IsSuccess === true) {
                    wrapper.find("#record-result").removeClass("hidden");
                    wrapper.find("#submitSpeakingAnswerButton").removeClass("hidden");
                    wrapper.find('[id ^= "audio-player"]').attr("src", response.Value.AudioUrl);
                    wrapper.find("#record-url").attr("href", response.Value.AudioUrl);
                    wrapper.find("#record-url").html(response.Value.AudioName);
                    var inputName = 'MiniMockTest_' +
                        wrapper.data("section-type") +
                        "_" +
                        wrapper.data("id") +
                        "_" +
                        response.Value.QuestionId + "_" +
                        response.Value.AnswerId;

                    var inputNamePattern = "MiniMockTest_" + wrapper.data("section-type") + "_" + wrapper.data("id");
                    var existingInput = $('input[name^="' + inputNamePattern + '"]');
                    if (existingInput.length === 0) {
                        existingInput.remove();
                        form.append('<input type="hidden" name="' +
                            inputName +
                            '" value="' +
                            response.Value.AnswerId +
                            '"/>');
                    }

                    if (wrapper.find(".multipleUploadButton").length > 0) {
                        var anyUnanswered = false;

                        wrapper.find("input[type=text]").each(function () {
                            var element = $(this);
                            if (element.val().trim() === "") {
                                anyUnanswered = true;
                                return;
                            }
                        });
                        setButtonEnable.callWithLog(self, !anyUnanswered, wrapper);
                    }

                    wrapper.find(".uploadControlSection").html("Completed. Click NEXT. <br/>");
                } else {
                    showInfoDialog(response.MessageErrorTextArray);
                    clearInterval(self.TimerCountDown);
                    clearInterval(self.QuestionCountDown);

                    $("#" + self.MaintenanceForm.prop("id"))
                        .find("*")
                        .attr("disabled", "disabled")
                        .addClass("disabled");
                }
            });
    }

    function constructSubmitData(form) {
        var self = this;
        var highlight = $(".highlighted");
        var j;

        for (j = 0; j < highlight.length; j++) {
            var answerText = highlight[j].textContent.replace(/\s\s+/g, " ").replace(/\"/g, "&quot;");
            var questionId = highlight[j].getAttribute("data-question-id");
            var index = highlight[j].getAttribute("data-index");
            var mockTestQuestionId = highlight[j].closest(".wrapper-question").getAttribute("data-id");
            var sectionType = highlight[j].closest(".wrapper-question").getAttribute("data-section-type");

            if (answerText !== "") {
                var inputName = "MiniMockTest_" + sectionType + "_" +
                    mockTestQuestionId +
                    "_" +
                    questionId +
                    "_" +
                    index;
                var input = form.find("input[name='" + inputName + "']");

                if (input.length) {
                    input.remove();
                }

                form.append('<input type="hidden" name="' + inputName +
                    '" value="' +
                    answerText +
                    '" />');
            }
        }

        form.find(".droppable")
            .each(function () {
                var sectionKey = $(this).data("sentencekey");
                var questionId = $(this).data("orderparagraphid");
                var mockTestQuestionId = $(this).closest(".wrapper-question").data("id");
                var sectionType = $(this).closest(".wrapper-question").data("section-type");
                var answerId = $(this).data("answerid");
                var sortingIndexTarget = sectionKey.replace("Q", "");

                var input = form.find("input[name='MiniMockTest_" + sectionType +
                    "_" +
                    mockTestQuestionId +
                    "_" +
                    questionId +
                    "_" +
                    answerId +
                    "']");

                if (input.length) {
                    input.remove();
                }

                if (answerId !== undefined && answerId !== "") {
                    form.append('<input type="hidden" name="MiniMockTest_' + sectionType +
                        "_" +
                        mockTestQuestionId +
                        "_" +
                        questionId +
                        "_" +
                        answerId +
                        '" value="' +
                        sortingIndexTarget +
                        '" />');
                }
            });

        if (form.prop("id") === ("maintenanceForm-lis")) {
            var formListeningWriting = $("#maintenanceForm-lis_wri");
            formListeningWriting.find("textarea").each(function () {
                var el = $(this);
                if (form.find("#" + el.prop("id")).length > 0) {
                    form.find("#" + el.prop("id")).remove();
                }
                el.addClass("hidden");
                form.append(el);
            });
        }

        $("input:hidden")
            .not('[name*="MockTestId"]')
            .not('[name*="MiniMockTest"]')
            .not('[name*="SectionGroupCode"]')
            .remove();

        $(".disabled").removeAttr("disabled").removeClass("disabled");
    }

    function saveAnswer(form) {
        var self = this;
        stopAudio.callWithLog(self);
        var url = form.data("save-url");
        constructSubmitData.callWithLog(self, form);

        submitFormOverride("#" + form.prop("id"),
            url,
            function (data) {
                if (data.IsSuccess) {
                    var submitBtn = form.find(".submit-btn", self.Element);
                    submitBtn.hide();

                    if (submitBtn.data("next-section") === undefined) {
                        $(".page-main-activity", self.Element).empty();
                        $("#SubmittedView", self.Element).show();
                        $("#SubmittedMessage", self.Element).html(data.Value.Message.replace(/&lt;br\/&gt;/g, "<br/>"));

                        updateParentActivityPanel.callWithLog(self, data);
                    }
                    else {
                        var currentSection = submitBtn.data('current-section');
                        var nextSection = submitBtn.data('next-section');
                        goToSection.callWithLog(self, nextSection, currentSection);
                    }
                }
                else {
                    showInfoDialog(data.MessageErrorTextArray);
                    clearInterval(self.TimerCountDown);
                    clearInterval(self.QuestionCountDown);

                    $("#" + self.MaintenanceForm.prop("id"))
                        .find("*")
                        .attr("disabled", "disabled")
                        .addClass("disabled");
                }
            });
    }

    function writeBeforeRecordLogCountDown(wrapper, number) {
        var label = "seconds";

        if (number <= 1) {
            label = "second";
        }

        wrapper.find('[id^="beforeRecordingLog"]').html("Record your answer in: <strong>" + number + " " + label + "</strong>");
    }

    function resumeSectionTimer(wrapper) {
        var self = this;
        var durationPanel = wrapper.find(".timer-duration-panel");

        if (durationPanel.length) {
            var timerId = durationPanel.prop("id");
            self.QuestionInterval = setInterval(function () {
                DynamicTimerWithCustomInterval("#" + timerId, "",
                    function () { questionTimeOut.callWithLog(self, wrapper); },
                    self.QuestionInterval);
            },
                1000);
            self.QuestionCountDown = self.QuestionInterval;
        }
        else {
            var groupDurationPanel = wrapper.parents(".panelSectionGroup").find(".timer-duration-panel");
            var groupTimerId = groupDurationPanel.prop("id");

            self.TimerInterval = setInterval(function () {
                DynamicTimerWithCustomInterval("#" + groupTimerId, "",
                    function () { timeOut.callWithLog(self, wrapper); },
                    self.TimerInterval);
            },
                1000);
            self.TimerCountDown = self.TimerInterval;
        }
    }

    function showLog(wrapper) {
        wrapper.find('[id^="recordingLog"]')
            .css("visibility", "visible")
            .empty();
    }

    function hideLog(wrapper) {
        wrapper.find('[id^="recordingLog"]')
            .css("visibility", "hidden")
            .empty();
    }

    function hideBeforeRecordLog(wrapper) {
        wrapper.find('[id^="beforeRecordingLog"]')
            .css("visibility", "hidden")
            .empty();
    }

    function setUploadAudioHandler(wrapper) {
        var self = this;
        self.CurrentMockTestQuestionId = wrapper.data("id");
        var form = wrapper.parents("form");
        var recordingUrl = form.data("upload-recorder-file-url");
        recordingUrl += "?mockTestQuestionId=" + self.CurrentMockTestQuestionId;

        var onStopRecord = function () {
            clearInterval(self.QuestionCountDown);
            clearInterval(self.TimerCountDown);
        };

        customUploadRecorderSpeakingFile(
            recordingUrl,
            onStopRecord,
            function (response) {
                resumeSectionTimer.callWithLog(self, wrapper);
                hideLog.callWithLog(self, wrapper);
                var spinner = wrapper.find('[id^="spinnerImage"]');
                spinner.hide();
                if (response.IsSuccess === true) {
                    wrapper.find("#submitSpeakingAnswerButton").removeClass("hidden");
                    wrapper.find('[id ^= "audio-player"]').attr("src", response.Value.AudioUrl);
                    wrapper.find("#record-url")
                        .attr("href", response.Value.AudioUrl)
                        .html(response.Value.AudioName);

                    var inputName = 'MiniMockTest_' +
                        wrapper.data("section-type") +
                        "_" +
                        wrapper.data("id") +
                        "_" +
                        response.Value.QuestionId + "_" +
                        response.Value.AnswerId;

                    var inputNamePattern = "MiniMockTest_" + wrapper.data("section-type") + "_" + wrapper.data("id");
                    var existingInput = $('input[name^="' + inputNamePattern + '"]');
                    if (existingInput.length === 0) {
                        existingInput.remove();
                        form.append('<input type="hidden" name="' +
                            inputName +
                            '" value="' +
                            response.Value.AnswerId +
                            '"/>');
                    }

                    if (wrapper.find("#recordButton").length) {
                        var anyUnanswered = false;

                        wrapper.find("input[type=text]").each(function () {
                            var element = $(this);
                            if (element.val().trim() === "") {
                                anyUnanswered = true;
                                return;
                            }
                        });

                        setButtonEnable.callWithLog(self, !anyUnanswered, wrapper);
                    }
                } else {
                    showInfoDialog(response.MessageErrorTextArray);
                    clearInterval(self.TimerCountDown);
                    clearInterval(self.QuestionCountDown);

                    $("#" + self.MaintenanceForm.prop("id"))
                        .find("*")
                        .attr("disabled", "disabled")
                        .addClass("disabled");
                }
            });
    }

    function repeatSentenceAudioPlayerHandler(wrapper) {
        var self = this;

        var onEnded = function () {
            wrapper.find("#recorderControlPanel").closest(".panel-default").removeClass("hidden");
            startBeforeRecordCountdown.callWithLog(self, wrapper);
        };

        audioPlayerHandler.callWithLog(self, wrapper, null, onEnded);
    }

    function answerShortQuestionAudioPlayerHandler(wrapper) {
        var self = this;

        var onPlay = function (currentAudioPlayerEl) {
            if (currentAudioPlayerEl.hasClass("disabled-audio")) {
                this.pause();
                this.currentTime = 0;
                return;
            }
        };

        var onEnded = function () {
            wrapper.find("#recorderControlPanel").closest(".exercise-text.hidden").removeClass("hidden");
            startBeforeRecordCountdown.callWithLog(self, wrapper);
        };

        audioPlayerHandler.callWithLog(self, wrapper, onPlay, onEnded);
    }

    function retellLectureAudioPlayerHandler(wrapper) {
        var self = this;
        var onPlay = function (currentAudioPlayerEl) {
            if (currentAudioPlayerEl.closest(".audioPlayerPanel").hasClass("disabled-audio")) {
                this.pause();
                this.currentTime = 0;
                return;
            }
        };

        var onEnded = function () {
            wrapper.find(".panel-retell-lecture").removeClass("hidden");
            startBeforeRecordCountdown.callWithLog(self, wrapper);
        };

        audioPlayerHandler.callWithLog(self, wrapper, onPlay, onEnded);
    }

    function spokenTextAudioPlayerHandler(wrapper) {
        var self = this;

        self.LogText += 'Execute spokenTextAudioPlayerHandler method';

        var onEnded = function () {
            self.LogText += 'Goes onEnded callback ';
            self.LogText += 'Execute remove class hidden for #3 ';
            var writingWrapper = wrapper.find(".writing-section");
            if (writingWrapper.length > 0) {
                writingWrapper.removeClass("hidden");
            }

            self.LogText += 'Execute remove class disable-auto-start-timer ';
            wrapper.find(".disable-auto-start-timer").removeClass("disable-auto-start-timer");

            self.LogText += 'Execute change html Begin Writing ';
            wrapper.find(".audio-player-instruction").html("Begin Writing");

            self.LogText += 'Goes to prepareTimerForQuestion.callWithLog(self, wrapper) ';
            prepareTimerForQuestion.callWithLog(self, wrapper);
        };

        //audioPlayerHandler.callWithLog(self, wrapper, onPlay, onEnded);
        audioPlayerHandler.callWithLog(self, wrapper, null, onEnded);
    }

    function writeFromDictionaryAudioPlayerHandler(wrapper) {
        var self = this;
        audioPlayerHandler.callWithLog(self, wrapper);
    }

    function listeningFillInTheBlankAudioPlayerHandler(wrapper) {
        var self = this;
        var onEnded = function () {
            timeOut.callWithLog(self, wrapper);
        };

        var groupWrapper = wrapper.closest(".panelSectionGroup");
        audioPlayerHandler.callWithLog(self, groupWrapper, null, onEnded);
    }

    function stopBeforePlayAudioCountdown(wrapper) {
        var self = this;
        var audioPlayerEl = wrapper.find("#audioPlayerPanel audio");

        if (audioPlayerEl.length && audioPlayerEl[0] !== undefined) {
            var playAudioPromise = audioPlayerEl[0].play();
            if (playAudioPromise !== undefined) {
                playAudioPromise.then(_ => {
                    wrapper.find(".e2l-audio-player-footer").addClass("hidden");
                }).catch(error => {
                    wrapper.find(".e2l-audio-player-footer").removeClass("hidden");
                });
            } else {
                wrapper.find(".e2l-audio-player-footer").removeClass("hidden");
            }
        } else {
            wrapper.find(".e2l-audio-player-footer").removeClass("hidden");
        }

        var sectionGroupCode = wrapper.closest(".panelSectionGroup").data("group-code");
        if (sectionGroupCode === "LIS") {
            wrapper.find(".e2l-audio-player-footer").removeClass("hidden");
        }

        stopBeforePlayAudioCounter.callWithLog(self);
        hideBeforePlayAudioLog.callWithLog(self, wrapper);
    }

    function hideBeforePlayAudioLog(wrapper) {
        wrapper.find('.counter-before-play')
            .css("visibility", "hidden")
            .empty();
    }

    function stopCountdown(wrapper, btnEl) {
        var self = this;
        stopCounter.callWithLog(self);
        stopRecording.callWithLog(self, wrapper, btnEl);

        wrapper.find('[id^="spinnerImage"]').show();
        wrapper.find('[id^="recordingLog"]').html("Processing, please wait...");
    }

    function startCountdown(wrapper, btnEl) {
        var self = this;
        var timerNumber = 35;
        var duration = btnEl.data("duration");
        startRecording.callWithLog(self, wrapper, btnEl);

        if (duration !== 0) {
            timerNumber = parseInt(duration);
        }
        self.CountDown = setInterval(function () {
            writeDown.callWithLog(self, wrapper, timerNumber);
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                stopCountdown.callWithLog(self, wrapper, btnEl);
            }
        },
            1000);
    }

    function startAudio(wrapper) {
        var self = this;
        var timerNumber = 0;

        self.BeforePlayAudioCountDown = setInterval(function () {
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                wrapper.find(".audioPlayer").removeClass("disabled-audio");
                stopBeforePlayAudioCountdown.callWithLog(self, wrapper);
            }
        },
            1000);

        audioPlayerHandler.callWithLog(self, wrapper);
    }

    function startBeforePlayAudioRLCountdown(wrapper) {
        var self = this;
        var timerNumber = 3;
        var countDownEl = wrapper.find('.counter-before-play');
        var duration = countDownEl.data("duration");

        if (duration !== 0) {
            timerNumber = parseInt(duration);
        }
        self.BeforePlayAudioCountDown = setInterval(function () {
            writeBeforePlayAudioLogCountDown.callWithLog(self, wrapper, timerNumber);
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                wrapper.find("#audioPlayerPanel").removeClass("disabled-audio");
                stopBeforePlayAudioCountdown.callWithLog(self, wrapper);
            }
        },
            1000);

        audioPlayerHandler.callWithLog(self, wrapper);
    }

    function audioPlayerHandler(wrapper, onPlay, onEnded) {
        var self = this;
        var audioPlayerEl = wrapper.find("#audioPlayerPanel audio");

        if (audioPlayerEl.length === 0) {
            return;
        }

        self.IsAudioPlayed = false;

        var eventHandler = {
            play: function () {
                audioPlayerEl.find(".e2l-audio-player-footer").addClass("hidden");

                if (self.IsAudioPlayed || self.BeforePlayAudioCountDown !== null) {
                    this.pause();
                    return;
                }

                if (typeof onPlay === "function") {
                    onPlay($(this));
                }
            },
            ended: function () {
                if (self.IsAudioPlayed) {
                    return;
                }

                self.IsAudioPlayed = true;
                if (typeof onEnded === "function") {
                    onEnded();
                }
            }
        };

        audioPlayerEl
            .off("play")
            .on('play', eventHandler.play);

        audioPlayerEl
            .off("ended")
            .on('ended', eventHandler.ended);
    }

    function startRecording(wrapper, btnEl) {
        var self = this;

        self.E2Logger.MockTestManualLog("START_RECORD", wrapper, btnEl);

        setUploadAudioHandler.callWithLog(self, wrapper);
        stopBeforeRecordCounter.callWithLog(self);
        hideBeforeRecordLog.callWithLog(self, wrapper);

        btnEl.removeClass("btn-danger").removeClass("hidden")
            .html('<i class="fa fa-square fa-fw"></i> Stop')
            .unbind()
            .click(function (e) {
                self.E2Logger.IsManualClick = e.originalEvent !== undefined;
                stopCountdown.callWithLog(self, wrapper, btnEl);
            });

        wrapper.find(".record-instruction").removeClass("hidden").html("<span class='text-danger'>Now Recording</span> <br/>");

        startAudioRecording(function () {
            showManualUploadAudio.callWithLog(self, wrapper);
            stopCounter.callWithLog(self);
        }, btnEl);
    }

    function stopRecording(wrapper, btnEl) {
        var self = this;

        self.E2Logger.MockTestManualLog("STOP_RECORD", wrapper, btnEl);

        setUploadAudioHandler.callWithLog(self, wrapper);
        stopAudioRecording(btnEl);

        btnEl.unbind()
            .click(function () {
                return false;
            });

        btnEl.addClass("hidden");
        wrapper.find(".record-instruction").removeClass("hidden").html("Completed. Click NEXT. <br/>");
    }

    function stopCounter() {
        var self = this;
        if (self.CountDown !== undefined) {
            clearInterval(self.CountDown);
        }
    }

    function showManualUploadAudio(wrapper) {
        wrapper.find("#recorderControlPanel").hide();
        wrapper.find(".recorderControlSection").hide();
        wrapper.find("#uploadControlPanel").show();
        wrapper.find(".uploadControlSection").show();
    }

    function writeDown(wrapper, number) {
        var label = "seconds";

        if (number <= 1) {
            label = "second";
        }

        wrapper.find('[id^="recordingLog"]').html("<strong>Remaining time: " + number + " " + label + "</strong>");
    }

    function updateParentActivityPanel(response) {
        if (window.opener !== null && !window.opener.closed) {
            $("#btnStart", window.opener.document).remove();
            $("#MiniMockTestMessage", window.opener.document).html(response.Value.Message);
            $("#btnBookAppointment", window.opener.document).removeClass("hidden");
        }
    }

    // Constructor
    var studentPteMiniMockTestView = function (element) {
        this.Element = element;
        this.MaintenanceForm = $("#maintenanceForm");
        this.CountDown = null; // record countdown
        this.BeforeRecordCountDown = null;
        this.BeforePlayAudioCountDown = null;
        this.CurrentMockTestQuestionId = null;
        this.IsAudioPlayed = false;
        this.TimerCountDown = null; // timer countdown
        this.TimerInterval = null;
        this.QuestionCountDown = null;
        this.QuestionInterval = null;
        this.LogText = '';
        this.WfdWrapper = null;
        this.E2Logger = new E2Logger();
        this.Message = {
            WritingTimeOut: ""
        };
        this.SectionGroupCode = {
            Listening: "",
            Writing: "",
            Speaking: ""
        };
    };

    studentPteMiniMockTestView.prototype = {
        constructor: studentPteMiniMockTestView,
        Register: function () {
            var self = this;

            self.E2Logger.InitializeMockTestLogger(self.Element);
            self.BindEventHandler();
            self.Initialize();
        },
        BindEventHandler: function () {
            var self = this;

            $(".wrapper-question", self.Element)
                .each(function () {
                    var wrapper = $(this);
                    var sectionType = wrapper.data("section-type");
                    var isEnable = sectionType === "[INS]";
                    setButtonEnable.callWithLog(self, isEnable, wrapper);
                    initEventHandler.callWithLog(self, wrapper);
                });

            initDragAndDropHandler.callWithLog(self);
            initButtonEventHandler.callWithLog(self);
        },
        Initialize: function () {
            var self = this;

            initializeRecorderPanel();

            $(".wordCount", self.Element).html(0);

            var sectionWrapper = $(".wrapper-question:not(.mmt-hide-panel)", self.Element);
            nextButtonExtendHandler.callWithLog(self, sectionWrapper);
            prepareTimerForSectionGroup.callWithLog(self, sectionWrapper);

            var recordingPanel = $("#recorderControlPanel", sectionWrapper);
            if (recordingPanel.length > 0) {
                startBeforeRecordCountdown.callWithLog(self, sectionWrapper);
            }

            self.CurrentMockTestQuestionId = sectionWrapper.data("id");
        }
    };

    // Export javascript class into window environment
    window.StudentPteMiniMockTestView = studentPteMiniMockTestView;
})(jQuery, window);;
var StudentPteMiniMockTestViewDetail = function (element) {
    this.Element = element;
};

StudentPteMiniMockTestViewDetail.prototype = {
    constructor: StudentPteMiniMockTestViewDetail,
    Register: function () {
        var self = this;

        self.GenerateComment();

        $(".closeButton").click(function () {
            window.close();
        });
    },
    GenerateComment: function () {
        $(".panel-section").each(function () {
            var comment = "";
            $(this).find(".form-group").each(function () {
                var selectedInput = $(this).find("input[type=radio]:checked");
                if (selectedInput.length) {
                    var currentComment = selectedInput[0].dataset["comment"];
                    if (currentComment !== "")
                        comment += "<p>" + currentComment + "</p>";

                }
            });
            $(this).find("[id^=comment]").html(comment);
        });
    }
};
var StudentPteMiniMockTestViewDetailV2 = function (element) {
    this.Element = element;
};

StudentPteMiniMockTestViewDetailV2.prototype = {
    constructor: StudentPteMiniMockTestViewDetailV2,
    Register: function () {
        var self = this;

        $(".closeButton").click(function () {
            window.close();
        });
    }
};
var StudentSettingIndex = function (element) {
    this.Element = element;
    this.IsTriggerMode = false;
    this.TriggerId = 0;
}

StudentSettingIndex.prototype = {
    constructor: StudentSettingIndex,
    Register: function () {
        var self = this;
        var form = $("#settingForm");

        $('.checkbox :checkbox').change(function () {
            if (this.checked) {
                $('#IsSyncAppointmentWithGoogle').val(true);
            } else {
                $('#IsSyncAppointmentWithGoogle').val(false);
            }
        });

        $("#saveButton", self.Element).click(function () {
            submitForm(form,
                form.data("save-url"),
                function () {
                    showInformation(form.data('saved-message'));
                });

        });

    }
};
var StudentShareAndEarnCreate = function (element) {
    this.Element = element;
    this.Caller = null;
    this.MaintenanceForm = $("#maintenanceForm", this.Element);
}

StudentShareAndEarnCreate.prototype = {
    constructor: StudentShareAndEarnCreate,
    Register: function () {
        var self = this;

        $("#btnAddEmailForm").click(function () {

            var form = self._generateForm();

            $("#body-table").append(form);

        });

        $("#createAndSendButton").click(function() {
            submitForm("#maintenanceForm",
                self.MaintenanceForm.data("url"),
                function (result) {

                    showInformation(result.Value.SuccessMessage);

                    if (result.Value.IsWarning) {
                        showInfoDialog(result.Value.WarningMessage);
                    }

                    if (self.Caller !== null && (typeof self.Caller.ReloadGrid === "function")) {
                        self.Caller.ReloadGrid();
                    }

                    closeMaintenanceWindow();
                });
        });

        $("#cancelButton").click(function() {
            closeMaintenanceWindow();
        });

    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    _generateForm: function () {

        var totalEmailForm = $(".email-row").length;
        var formRow = $("#row_" + totalEmailForm).clone();
        var newRowNumber = +totalEmailForm + 1;

        if (newRowNumber > 10) {
            $("#btnAddEmailForm").prop("disabled", true);
            return "";
        }

        formRow.find("input").attr("name", "EmailAddress_" + newRowNumber)
            .attr("id", "EmailAddress_" + newRowNumber)
            .attr("value", "");

        var newRowForm = $("<tr>").attr("class", "email-row")
            .attr("data-index", newRowNumber)
            .attr("id", "row_" + newRowNumber)
            .append(formRow.html());

        if (newRowNumber === 10) {
            $("#btnAddEmailForm").prop("disabled", true);
        }

        return newRowForm;
    }
};
var StudentShareAndEarnIndex = function (element) {
    this.Element = element;
    this.Caller = null;
    this.Grid = $("#gridShareAndEarn", this.Element);
    this.InvitationGrid = $("#gridInvitation", this.Element);
}

StudentShareAndEarnIndex.prototype = {
    constructor: StudentShareAndEarnIndex,
    Register: function () {
        var self = this;

        self.LoadGrid();
        self.LoadInvitationGrid();
    },

    LoadGrid: function () {
        var app = this;

        $("#errorPane").hide();
        $("#errorPane").empty();

        app.Grid.bootgrid({
            sorting: false,
            ajax: true,
            navigation: 0,
            post: function () {
                return {
                    TotalPoint: $('#CurrentTotalPoint', app.Element).val()
                }
            },
            url: app.Grid.data("url"),
            formatters: {
                "Action": function (column, row) {
                    if ($("#IsCampaignEnabled").val() === "True") {

                        var message = row.EntityType === "VOUCHER" ? app.Grid.data("redeem-message") : app.Grid.data("addon-redeem-message");
                        var totalPoint = $('#CurrentTotalPoint').val();
                        if (totalPoint >= row.Point) {
                            return '<a href="#" class="redeem-link" data-entity-type="' + row.EntityType + '" data-point="' + row.Point + '" data-id="' +
                                row.Id +
                                '"><i class="fa fa-ticket"></i> ' +
                                message +
                                '</a>';
                        }

                        return '<a href="#" class="load-invitation-link" data-toggle="tooltip" data-placement="top" data-original-title="' +
                            app.Grid.data("invite-tooltip") +
                            '" data-id="' +
                            row.Id +
                            '"><i class="fa fa-ban" aria-hidden="true"></i> ' +
                            app.Grid.data('not-enough-point-message') +
                            '</a>';
                    }

                    return '<span><i class="fa fa-ban" aria-hidden="true"></i> ' +
                        app.Grid.data('not-usable-message') + '</span>';

                }
            }
        }).on("loaded.rs.jquery.bootgrid", function () {

            $('[data-toggle="tooltip"]').tooltip();

            $(".redeem-link").click(function (e) {
                e.preventDefault();

                var resendUrl = app.Grid.data("redeem-url");
                var rewardId = $(this).data("id");
                var entityType = $(this).data("entity-type");

                var checkUrl = app.Grid.data("check-reward-url");
                var checkPostData = {
                    selectedRulePoint: $(this).data("point"),
                    currentStudentPoint: $('#CurrentTotalPoint').val(),
                    entityType: entityType
                };

                submitData(checkPostData, checkUrl, function (result) {

                    var postData = {
                        rewardId: rewardId
                    };
                    showYesNoConfirmationDialog(result.Value.NotificationMessage,
                        function () {
                            advancedSubmitData(postData,
                                resendUrl,
                                function (result) {
                                    if (entityType === 'VOUCHER') {
                                        window.location.href = result.Value.UpgradeUrl;
                                    }
                                    else {
                                        app.Grid.bootgrid('reload');
                                        $('#CurrentTotalPoint').val(result.Value.CurrentPoint);

                                        var redeemPoint = parseInt($('#RedeemedPoint').val()) + result.Value.RedeemPoint;
                                        $('#RedeemedPoint').val(redeemPoint);
                                    }
                                },
                                function (error) {
                                    hideProcessingDialog();
                                    advancedErrorPostResponse(error, "reward-grid");
                                });
                        });

                });

            });

            $(".activeRuleNameDetailLink", app.Element).click(function (e) {
                e.preventDefault();
                var entityId = $(this).data("entity-id");
                var entityType = $(this).data("entity-type");
                var ruleId = $(this).attr("id");
                app.ReloadViewForm(entityId, entityType, ruleId, app.Grid);

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application($('#mainUserContent'), namespace);
                apps.Register();
            });

            $(".load-invitation-link", app.Element).click(function(e) {
                app.LoadCreateInvitationPage();
            });

        });
    },
    LoadInvitationGrid: function () {

        var app = this;

        app.InvitationGrid.bootgrid({
            sorting: false,
            ajax: true,
            post: function () {
            },
            url: app.InvitationGrid.data("url"),
            formatters: {
                "Action": function (column, row) {

                    if (row.IsEnableResend) {
                        return '<a href="#" class="resend-link" data-id="' + row.Id + '"><i class="fa fa-paper-plane" aria-hidden="true" data-toggle="tooltip" data-placement="top" data-original-title="Resend"></i></a>';
                    }

                    return "";

                }
            }
        }).on("loaded.rs.jquery.bootgrid", function () {

            if ($("#gridInvitation-header").find("#inviteFriendButton").length === 0) {
                $("#gridInvitation-header").find(".actionBar").prepend("<div class='actions btn-group'><button class='btn btn-orange-bordered' type='button' id='inviteFriendButton' style='margin-right: 20px;'><strong>INVITE FRIENDS</strong></button></div>");
            }

            $('[data-toggle="tooltip"]').tooltip();

                $(".resend-link").click(function (e) {
                    e.preventDefault();
                    closeErrorPane();

                    var resendUrl = app.Grid.data("resend-url");
                    var invitationId = $(this).data("id");

                    var postData = {
                        invitationId: invitationId
                    };

                    advancedSubmitData(postData, resendUrl, function (result) {
                        showInformation(result.Value.SuccessMessage);
                        app.ReloadGrid();

                    }, function (error) {
                        hideProcessingDialog();
                        advancedErrorPostResponse(error, "share-earn-grid");
                    });

                });

                $("#inviteFriendButton", app.Element).click(function () {
                    app.LoadCreateInvitationPage();
                });
        });
    },
    ReloadViewForm: function (entityId, entityType, ruleId, grid) {
        var maintenanceDiv = $('#maintenancePane');

        var self = this;

        var url = "";

        if (entityType === grid.data("voucher-constant")) {
            url = grid.data("view-voucher-rule-url");
            url += "?voucherRuleId=" + entityId;
            url += "&ruleId=" + ruleId;
        }

        showMaintenancePane(url, function (data) {
            maintenanceDiv.html(data);

            var helper = new Helper();
            var namespace = helper.CreateNameSpaceFromURL(url);
            var apps = new Application(maintenanceDiv, namespace);
            apps.RegisterWithCaller(self);

            scrollToElement("maintenancePane");

        });
    },
    ReloadGrid: function() {
        this.Grid.bootgrid("reload");
        this.InvitationGrid.bootgrid("reload");
    },
    LoadRewardPage: function () {
        var self = this;
        var url = self.Grid.data("reward-page-url");
        showLoadingDialog();
        $.ajax({
            url: url,
            cache: false,
            type: "GET",
            async: true,
            success: function (contentData) {
                $('#mainUserContent').html(contentData);
                hideLoadingDialog();

                $('#rewardsListMenu').collapse('show');
                $('#rewardsListSubMenu').collapse('show');
                $('#rewardsListMenu').removeClass("active");

                $('#shareAndLearnStudentLayout').removeClass("active");
                $('#myRewardMenu').addClass("active");

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application($('#mainUserContent'), namespace);
                apps.Register();

            }
        });
    },
    LoadCreateInvitationPage: function() {
        var app = this;
        var maintenanceDiv = $('#maintenancePane', self.Element);
        var url = app.InvitationGrid.data("create-url");

        showMaintenancePane(url, function (data) {
            maintenanceDiv.html(data);

            var helper = new Helper();
            var namespace = helper.CreateNameSpaceFromURL(url);
            var apps = new Application(maintenanceDiv, namespace);
            apps.RegisterWithCaller(app);

            scrollToElement("maintenancePane");

        });
    },
    SetupCaller: function (caller) {
        this.Caller = caller;
    }
};
var StudentShareAndEarnReward = function (element) {
    this.Element = element;
    this.Caller = null;
    this.ActiveRewardGrid = $("#gridActiveReward", this.Element);
    this.UsedRewardGrid = $("#gridUsedReward", this.Element);
}

StudentShareAndEarnReward.prototype = {
    constructor: StudentShareAndEarnReward,
    Register: function () {
        var self = this;

        self.LoadGrid(self.UsedRewardGrid, {});
    },

    LoadGrid: function (grid, column, onLoadCallback) {
        var app = this;

        $("#errorPane").hide();
        $("#errorPane").empty();

        grid.bootgrid({
            sorting: false,
            ajax: true,
            post: function () {
            },
            url: grid.data("url"),
            formatters: column
        }).on("loaded.rs.jquery.bootgrid", function () {
            if (typeof onLoadCallback === "function") {
                onLoadCallback();
            }
        });
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    }
};
var StudentShareAndEarnViewVoucherRule = function (element) {
    this.Element = element;
    this.Caller = null;
}

StudentShareAndEarnViewVoucherRule.prototype = {
    constructor: StudentShareAndEarnViewVoucherRule,
    Register: function () {
        var self = this;
        
        var voucherType = $('input[type=radio][name=VoucherType]:checked').val();
        self.CheckVoucherType(voucherType);

        $('input[type=radio][name=VoucherType]').change(function () {
            self.CheckVoucherType(this.value);
        });


    
        $('#closeButton', self.Element)
            .click(function () {
                self.Element.html('');
            });

    },
    CheckVoucherType: function (radioChecked) {
        if (radioChecked === 'PRC') {
            $('#priceDiscountWrapper').removeClass('hidden');
            $('#percentageDiscountWrapper').addClass('hidden');
        }
        else if (radioChecked === 'PCT') {
            $('#priceDiscountWrapper').addClass('hidden');
            $('#percentageDiscountWrapper').removeClass('hidden');
        }
    },
    SetupCaller: function (caller) {
        this.Caller = caller;
    }
};
(function ($, window) {
    "use strict";

    var studentSpeakingIntensiveLandingPageIndex = function (element) {
        this.Element = element;
    };

    studentSpeakingIntensiveLandingPageIndex.prototype = {
        constructor: studentSpeakingIntensiveLandingPageIndex,
        Register: function () {

        },

        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    window.StudentSpeakingIntensiveLandingPageIndex = studentSpeakingIntensiveLandingPageIndex;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    var studentSpeakingWritingLandingPageIELTS = function (element) {
        this.Element = element;
    };

    studentSpeakingWritingLandingPageIELTS.prototype = {
        constructor: studentSpeakingWritingLandingPageIELTS,
        Register: function () {

        },

        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    window.StudentSpeakingWritingLandingPageIELTS = studentSpeakingWritingLandingPageIELTS;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    var studentSpeakingWritingLandingPageOet = function (element) {
        this.Element = element;
    };

    studentSpeakingWritingLandingPageOet.prototype = {
        constructor: studentSpeakingWritingLandingPageOet,
        Register: function () {

        },

        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    window.StudentSpeakingWritingLandingPageOet = studentSpeakingWritingLandingPageOet;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    var studentSpeakingWritingLandingPagePte = function (element) {
        this.Element = element;
    };

    studentSpeakingWritingLandingPagePte.prototype = {
        constructor: studentSpeakingWritingLandingPagePte,
        Register: function () {

        },

        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    window.StudentSpeakingWritingLandingPagePte = studentSpeakingWritingLandingPagePte;
})(jQuery, window);;
var StudentStudentPathwayShowActivity = function (element) {
    this.Element = element;
    this.Caller = null;
    this.StudentPathwayPanel = $("#studentPathwayPanelSection");
    this.FilterForm = $("#filterActivityForm");
}

StudentStudentPathwayShowActivity.prototype = {
    constructor: StudentStudentPathwayShowActivity,
    Register: function () {
        var app = this;

        app._filterFormControl();

        $('[data-toggle="tooltip"]').tooltip();

        $(".activity-link", app.Element)
            .on("click",
                function () {
                    var element = $(this);
                    app.ShowPopUp(element.data("url"), element.data("param"), element.data("activity-id"));
                });

        $(".video-link", app.Element)
            .on("click",
                function () {
                    var element = $(this);
                    var actionType = element.data("action-type");
                    var activityId = element.data("activity-id");
                    var activityName = element.data("activity-name");
                    var videoUrl = element.data("url");
                    var callbackUrl = element.data("callback-url");

                    app.OpenVideo(actionType, activityId, activityName, videoUrl, callbackUrl);
                });

        $(".pronounce-download", app.Element)
            .on("click",
                function () {
                    var element = $(this);
                    var activityId = element.data("activity-id");
                    var callbackUrl = element.data("callback-url");
                    app.OpenE2PronounceDownloadDialog(activityId, callbackUrl);
                });

        $(".pdf-download", app.Element)
            .on("click",
                function () {
                    var element = $(this);
                    var activityId = element.data("activity-id");
                    var callbackUrl = element.data("callback-url");
                    app.OpenDocument(activityId, callbackUrl);
                });

        $(".target-link", app.Element)
            .on("click",
                function () {
                    var element = $(this);
                    var activityId = element.data("activity-id");
                    var callbackUrl = element.data("callback-url");
                    app.MarkAsClicked(activityId, callbackUrl);
            });

        $(".answer-link", app.Element)
            .on("click",
                function () {
                    var element = $(this);
                    var activityId = element.data("activity-id");
                    var callbackUrl = element.data("callback-url");
                    app.MarkAsViewed(activityId, callbackUrl);
                    app.ShowPopUp(element.data("url"), element.data("param"), element.data("activity-id"));
            });

        $("#studentPathwayButton").click(function() {
            app._generateQuestionStudentPathway();
        });

        if ($("#option-content").length > 0) {
            $("#btnFilter").removeClass("hidden");
        } else {
            $("#btnFilter").addClass("hidden");
        }

        $("#btnFilter").click(function() {

            $("#option-content").removeClass("hidden");

        });

        $("#btnSaveFilter").click(function() {

            app._constructFilterOption();
            var url = app.StudentPathwayPanel.data("filter-url");

            app.StudentPathwayPanel.find("#studentPathwayPanelBody").html('<span class="icon fa fa-refresh fa-spin"></span> ' + app.StudentPathwayPanel.data("loading-message"));

            submitFormWithoutLoader("filterActivityForm", url, function (result) {
                app.FilterForm.empty();

                var homeIndex = new StudentHomeIndex();
                homeIndex.GetPathwayActivityData();

            }, function(error) {

            });

            $("#option-content").addClass("hidden");

        });

        $("#btnCancelFilter").click(function() {

            $("#option-content").addClass("hidden");

        });


        $("#reCreateStudyPathWayButton").click(function () {
            app._generateQuestionStudentPathway();
        });
    },

    OpenVideo: function (actionType, activityId, activityName, videoUrl, callbackUrl) {
        videoUrl += '?actionType=' + actionType;
        videoUrl += '&activityId=' + activityId;

        var postData = { activityId: activityId };
        showVideo(videoUrl,
            activityName,
            function () {
                submitData(postData,
                    callbackUrl,
                    function (data) {
                        $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                        $("#panel-" + activityId).removeClass("panel-default");
                        $("#panel-" + activityId).addClass("panel-success");
                        $("#badge-" + activityId).addClass("badge--success");
                        $("#badge-" + activityId).html('Done');
                        $("#label-" + activityId).remove();
                        $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                        if (data.Value.IsGroupCompleted) {
                            $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                            $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                        }

                        if (data.Value.IsSubModuleCompleted) {
                            $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                            $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                        }
                    });
            });
    },

    OpenE2PronounceDownloadDialog: function (activityId, callbackUrl) {
        var app = this;

        $("#e2PronounceDownloadDialog").modal('show');
        $('#gplayLink').click(function () { app.SubmitE2PronounceProgress(activityId, callbackUrl) });
        $('#iTunesLink').click(function () { app.SubmitE2PronounceProgress(activityId, callbackUrl) });
    },

    OpenDocument: function (activityId, callbackUrl) {
        var app = this;
        var postData = { activityId: activityId };
        submitData(postData,
            callbackUrl,
            function (data) {
                $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                $("#panel-" + activityId).removeClass("panel-default");
                $("#panel-" + activityId).addClass("panel-success");
                $("#panel-" + activityId).removeClass("label-free");
                $("#badge-" + activityId).addClass("badge--success");
                $("#badge-" + activityId).html('Done');
                $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                if (data.Value.IsGroupCompleted) {
                    $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                    $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                }

                if (data.Value.IsSubModuleCompleted) {
                    $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                    $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                }

                var examPreparationBase = new StudentExamPreparationBase();
                examPreparationBase.UpdateDashboardActivityCourse(activityId, data.Value.PanelDescription, app.Element);
            });
    },

    MarkAsClicked: function (activityId, callbackUrl) {
        $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
        $("#panel-" + activityId).removeClass("panel-default");
        $("#panel-" + activityId).addClass("panel-success");
        $("#panel-" + activityId).removeClass("label-free");
        $("#badge-" + activityId).addClass("badge--success");
        $("#badge-" + activityId).html('Done');
    },

    SubmitE2PronounceProgress: function (activityId, callbackUrl) {
        var postData = { activityId: activityId };
        submitData(postData,
            callbackUrl,
            function (data) {
                $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                $("#panel-" + activityId).removeClass("panel-default");
                $("#panel-" + activityId).addClass("panel-success");
                $("#panel-" + activityId).removeClass("label-free");
                $("#badge-" + activityId).addClass("badge--success");
                $("#badge-" + activityId).html('Done');
                $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                if (data.Value.IsGroupCompleted) {
                    $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                    $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                }

                if (data.Value.IsSubModuleCompleted) {
                    $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                    $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                }
            });
    },

    MarkAsViewed: function (activityId, callbackUrl) {
        var postData = { activityId: activityId };
        submitData(postData,
            callbackUrl,
            function (data) {
                $("#checkedIcon-" + activityId).addClass("fa fa-check-circle");
                $("#panel-" + activityId).removeClass("panel-default");
                $("#panel-" + activityId).addClass("panel-success");
                $("#badge-" + activityId).addClass("badge--success");
                $("#badge-" + activityId).html('Done');
                $("#label-" + activityId).remove();
                $("#descriptionPanel-" + activityId).html(data.Value.PanelDescription);

                if (data.Value.IsGroupCompleted) {
                    $("#checkedGroupIcon-" + data.Value.GroupActivityId).addClass("fa fa-check-circle");
                    $("#groupActivity-" + data.Value.GroupActivityId).addClass("panel-success");
                }

                if (data.Value.IsSubModuleCompleted) {
                    $("#checkedModuleIcon-" + data.Value.SubModuleId).addClass("fa fa-check-circle");
                    $("#subModulePrimary-" + data.Value.SubModuleId).addClass("panel-success panel-task");
                }
            });
    },

    ShowPopUp: function (url, param, id) {
        if (!param) param = 'activityId';
        url += '?' + param + '=' + id;
        showPopup(url);
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    _generateQuestionStudentPathway: function () {
        var app = this;
        var url = app.StudentPathwayPanel.data("question-url");

        showMaintenancePane(url,
            function(data) {
                $("#questionStudentPathwaySection").html(data);
                $("#studentPathwayDialog").modal("show");

                var helper = new Helper();
                var namespace = helper.CreateNameSpaceFromURL(url);
                var apps = new Application("#questionStudentPathwaySection", namespace);
                apps.RegisterWithCaller(app);

            });

    },

    _constructFilterOption: function() {
        var app = this;

        app.FilterForm.empty();

        $('input.priority-setting:checked').each(function (index, row) {

            app.FilterForm.append('<input type="hidden" name="settingPriority_'+index+'" value="'+ $(this).val() +'" />');

        });

        $('input.showitem-checkbox:checked').each(function (index, row) {
            
            app.FilterForm.append('<input type="hidden" name="checkboxShowItems_' + index + '" value="' + $(this).val() + '" />');
        });
    },

    _filterFormControl: function() {

        $("input.priority-setting").change(function() {
            var value = $(this).val();
            
            if ($(this).is(":checked") && value === "-1") {
                $(".priority-setting.multiple").prop("checked", false);
            } else {
                $(".priority-setting.show-all").prop("checked", false);
            }

        });

        $("input.priority-setting").each(function () {
            var value = $(this).val();

            if ($(this).is(":checked") && value === "-1") {
                $(".priority-setting.multiple").prop("checked", false);
            } else {
                $(".priority-setting.show-all").prop("checked", false);
            }

        });
    }

};
var StudentStudentPathwayShowQuestionDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.MaintenanceForm = $("#studentPathwayForm", this.Element);
}

StudentStudentPathwayShowQuestionDialog.prototype = {
    constructor: StudentStudentPathwayShowQuestionDialog,
    Register: function () {
        var app = this;

        app._studentPathwayQuestionControl();

        $(".btn-next").click(function() {
            var questionId = $(this).data("question-id");
            var answerQuestion = $("#question-" + questionId).find(".answer-question-" + questionId);
            var nextQuestionId;

            if (answerQuestion.length > 1) {
                nextQuestionId = $("#question-" + questionId).find(".answer-question-" + questionId + ":checked")
                    .data("next-id");
            } else {
                nextQuestionId = $("#question-" + questionId).find(".answer-question-" + questionId).data("next-id");
            }

            if (nextQuestionId === 0) {
                app._submitStudentPathway();
            } else {
                $("#question-" + questionId).hide();
                $("#question-" + nextQuestionId).attr("hasActived", true);
                $("#question-" + nextQuestionId).show();
            }

        });

        $(".btn-previous").click(function () {
            var questionId = $(this).data("question-id");
            var backQuestionId = $(this).data("back-question-id");

            $("#question-" + questionId).hide();
            $("#question-" + questionId).attr("hasActived", false);
            $("#question-" + backQuestionId).attr("hasActived", true);
            $("#question-" + backQuestionId).show();

        });

    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    },

    _submitStudentPathway: function () {
        var app = this;

        app._constructStudentPathwaySubmitData();

        submitForm(app.MaintenanceForm,
            app.MaintenanceForm.data("submit-url"),
            function (result) {

                $("#questionStudentPathwaySection").html("");
                $("#studentPathwayForm").html("");
                $("#studentPathwayDialog").modal("hide");
                showAdvancedDialog(result.Value.InfoTitle, result.Value.Message, "OK", function () {
                    window.studentHome.GetPathwayActivityData();
                    window.studentHome.GetMyCoursePanel();
                    window.studentHome.GenerateCalendarData();
                });

                return true;
            });
    },

    _constructStudentPathwaySubmitData: function () {
        var app = this;

        $("#studentPathwayForm").empty();
        $("#studentPathwayForm").html("");
        app.MaintenanceForm.empty();
        app.MaintenanceForm.html("");

        $(".student-pathway-questions").each(function () {
            if ($(this).attr("hasActived") === "true") {
                var questionId = $(this).data("id");
                var type = $(this).find(".answer-question-" + questionId).attr("type");

                if (type === "text") {
                    var text = $(this).find(".answer-question-" + questionId);
                    text.each(function () {
                        app.MaintenanceForm.append('<input type="hidden" name="answerKey-' + questionId + '" value="' + $(this).val() + '" />');
                    });
                } else {
                    $("#question-" + questionId).find("select").each(function () {
                        var currQuestionId = $(this).data("question-id");
                        var selectedValue = $(this).find("option:selected").val();
                        if (selectedValue !== "") {
                            app.MaintenanceForm.append('<input type="hidden" name="answerKey-' + currQuestionId + '" value="' + selectedValue + '" />');
                        }
                    });
                }
            }

        });

    },

    _studentPathwayQuestionControl: function () {

        $(".student-pathway-questions").each(function () {
            var wrapper = $(this);

            wrapper.find("select").change(function () {
                var optionValue = $(this).find("option:selected").val();
                if (optionValue !== "") {

                    var questions = wrapper.find("select");
                    var checkedAll = true;
                    questions.each(function () {

                        var selectedValue = $(this).find("option:selected").val();
                        if (selectedValue === "") {
                            checkedAll = false;
                            return false;
                        }
                        return true;

                    });

                    if (checkedAll === true) {
                        if (wrapper.find('[id^="btn_next_"]').length) {
                            $("#" + (wrapper.find('[id^="btn_next"]')[0]).id).removeAttr("disabled");
                        }
                    }

                } else {

                    if (wrapper.find('[id^="btn_next_"]').length) {
                        $("#" + (wrapper.find('[id^="btn_next"]')[0]).id).attr("disabled", "disabled");
                    }

                }
            });

            wrapper.find("select").each(function () {
                var optionValue = $(this).find("option:selected").val();
                if (optionValue !== "") {
                    wrapper.find("#btn_next_" + $(this).data("question-id")).removeAttr("disabled");
                } else {
                    wrapper.find("#btn_next_" + $(this).data("question-id")).attr("disabled", "disabled");
                }
            });

            wrapper.find("input[type=checkbox]").change(function () {
                var checkboxId = $(this).attr("id");
                var countChecked = $("#" + checkboxId + ":checked").length;

                if (countChecked > 0) {
                    wrapper.find("#btn_next_" + $(this).data("question-id")).removeAttr("disabled");
                } else {
                    wrapper.find("#btn_next_" + $(this).data("question-id")).attr("disabled", "disabled");
                }
            });

            wrapper.find("input[type=text]").each(function () {
                var calendar = $(this).attr("id");
                var text = $("#" + calendar).val();

                if (text !== "") {
                    wrapper.find("#btn_next_" + $(this).data("question-id")).removeAttr("disabled");
                } else {
                    wrapper.find("#btn_next_" + $(this).data("question-id")).attr("disabled", "disabled");
                }
            });


        });

        var initialDate = new Date();
        initialDate.setDate(initialDate.getDate() + 1);

        $(".datepicker").datepicker({
            startDate: initialDate,
            autoclose: true
        }).change(function () {
            var calendar = $(this).attr("id");
            var text = $("#" + calendar).val();

            if (text !== "") {
                $("#btn_next_" + $(this).data("question-id")).removeAttr("disabled");
            } else {
                $("#btn_next_" + $(this).data("question-id")).attr("disabled", "disabled");
            }
            });

        $(".datepicker").datepicker("update", $(".datepicker").val());

    }

};
var StudentStudentProfileIndex = function (element) {
    this.Element = element;
}

StudentStudentProfileIndex.prototype = {
    constructor: StudentStudentProfileIndex,
    Register: function () {
        var self = this;
        
        $("#maintenanceForm")
        .validate({
            rules: {
                TimeZoneId: {
                    required: true
                },
                FirstName: {
                    maxlength: 200
                },
                LastName: {
                    maxlength: 200
                }
            },
            highlight: function (element) {
                $(element).closest('.form-group').addClass('has-error');
            },
            unhighlight: function (element) {
                $(element).closest('.form-group').removeClass('has-error');
            }
        });

        $("[data-toggle='tooltip']", self.Element).tooltip();

        $('#btnClose').click(function () {
            location.href = $('#maintenanceForm', self.Element).data('cancel-url');
        });

        $('#btnSave')
            .click(function () {
                $('#errorPane', self.Element).hide();
                submitForm('#maintenanceForm',
                    $('#maintenanceForm', self.Element).data('edit-url'),
                    function (data) {
                        showInformation($('#maintenanceForm', self.Element).data('saved-message'));
                        $(".student-profile-menu").click();
                    });
			});

		$('#undoChangeEmailButton')
			.click(function (e) {
				e.preventDefault();
				var confirmationMessage = $('#maintenanceForm', self.Element).data('undo-email-confirmation-message');
				var successMessage = $('#maintenanceForm', self.Element).data('undo-email-success-message');
				var url = $('#maintenanceForm', self.Element).data('undo-change-email-url');
                var contentUrl = $('#maintenanceForm', self.Element).data('user-profile-url');

				submitDataWithAdvancedConfirmDialog(
					confirmationMessage,
					{},
					url,
					function () {
						showInformation(successMessage);

						processApplicationContent(contentUrl, "GET", function (contentData) {
							if (contentData.indexOf('UNAUTHORIZED') >= 0) {
								window.location.href = "/Account/Login";
							} else {
								$('#mainUserContent').html(contentData);

								var helper = new Helper();
								var namespace = helper.CreateNameSpaceFromURL(contentUrl);
								var apps = new Application($('#mainUserContent'), namespace);
								apps.Register();
							}
						});

					}, function (data) {
						showErrorMessageDialog(data);

					});
				
			});

        var countries = $('#maintenanceForm', self.Element).data('countries');
        self.ConstructCountryOfOrigin(countries);
        self.ConstructCountryOfResidence(countries);

    },
    
    ConstructCountryOfOrigin: function(countries) {
        // constructs the suggestion engine
        var countryDataSet = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.whitespace,
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            // `states` is an array of state names defined in "The Basics"
            local: countries
        });

        $('#countryOfOrigin .typeahead').typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        },
        {
            name: 'countryDataSet',
            source: countryDataSet
        });
    },
    ConstructCountryOfResidence: function (countries) {
        // constructs the suggestion engine
        var countryDataSet = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.whitespace,
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            // `states` is an array of state names defined in "The Basics"
            local: countries
        });

        $('#countryOfResidence .typeahead').typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        },
        {
            name: 'countryDataSet',
            source: countryDataSet
        });
    }

};
var StudentStudentProfileRevertEmail = function (element) {
    this.Element = element;
}

StudentStudentProfileRevertEmail.prototype = {
    constructor: StudentStudentProfileRevertEmail,
    Register: function () {
        var self = this;

        var url = $(".panel-body", self.Element).data("url");

        submitNonFormPost(url, function (data) {
            window.location = $(".panel-body", self.Element).data("confirmation-url");
        });
    }
};
var StudentSystemCheckerIndex = function (element) {
	this.Element = element;
	this.IsTriggerMode = false;
    this.TriggerId = 0;
    this.CountDown = null;
    this.E2Recorder = null;
}

StudentSystemCheckerIndex.prototype = {
    constructor: StudentSystemCheckerIndex,
	Register: function () {
		var self = this;

        $(".navigateButton")
            .off("click")
            .on("click", function () {
                var el = $(this);
                var troubleshootId = el.data("id");
                var status = el.data("status");

                el.closest(".user-decision-panel").remove();
                $("#" + troubleshootId).find("div").addClass("hidden");
                $("#" + troubleshootId).find("." + status).removeClass("hidden");

                self._stopAudio();
            });

        $(".multipleRecorderButton").click(
            function (e) {
                var btnEl = $(this);
                var wrapper = btnEl.closest("#RecorderChecker");
                self._startCountdown(wrapper, btnEl);
            });

        var recordingUrl = $("#RecorderChecker").data("recording-url");
        self.E2Recorder = new E2Recorder($("#RecorderChecker"));
        self.E2Recorder.Initialize(recordingUrl, null, self._onRecordFinish.bind(self));

        $("#cookiesEnableStatus").text("Yes");
        if (navigator.cookieEnabled === false) {
	        $("#cookiesEnableStatus").text("No");
        }

        navigator.getUserMedia(
	        {
		        "audio": {
			        "mandatory": {
				        "googEchoCancellation": "false",
				        "googAutoGainControl": "false",
				        "googNoiseSuppression": "false",
				        "googHighpassFilter": "false"
			        },
			        "optional": []
		        },
            }, function() {
		        $("#microphoneEnableStatus").text("Yes");
            }, function() {
                $("#microphoneEnableStatus").text("No");
            });

        $("#computerScreenSize").text(window.screen.height + " x " + window.screen.width);
        $("#browserScreenSize").text($(window).height() + " x " + $(window).width());

        $(".panel-title a").click(function(e) {
	        e.preventDefault();
        });

        $(".recorderControlSection").find("br").remove();
	},

    _playAudio: function (wrapper) {
	    var audioPlayerEl = wrapper.find("#audioPlayerPanel audio");

	    if (audioPlayerEl.length && audioPlayerEl[0] !== undefined) {

		    var playAudioPromise = audioPlayerEl[0].play();
		    if (playAudioPromise !== undefined) {

			    playAudioPromise.then(_ => { }).catch(error => {
				    wrapper.find(".e2l-audio-player-footer").removeClass("hidden");
			    });

		    } else {
			    wrapper.find(".e2l-audio-player-footer").removeClass("hidden");
		    }

	    } else {
		    wrapper.find(".e2l-audio-player-footer").removeClass("hidden");
	    }

	    wrapper.find(".e2l-audio-player-footer").removeClass("hidden");
    },

    _stopAudio: function() {
        var sounds = $(".audioPlayer");
	    var i;
	    for (i = 0; i < sounds.length; i++) sounds[i].pause();
    },

    _startCountdown: function (wrapper, btnEl) {
        var self = this;
	    var timerNumber = 35;
	    var duration = btnEl.data("duration");
	    self._startRecording(wrapper, btnEl);

	    if (duration !== 0) {
		    timerNumber = parseInt(duration);
	    }
	    
	    self.CountDown = setInterval(function () {
			    self._writeDown(wrapper, timerNumber);
			    timerNumber = timerNumber - 1;
			    if (timerNumber < 0) {
				    self._stopCountdown(wrapper, btnEl);
			    }
		    },
		    1000);
    },

    _startRecording: function (wrapper, btnEl) {
        var self = this;
        self.E2Recorder.StartAudioRecording(function () {
            if (self.CountDown !== undefined) {
                clearInterval(self.CountDown);
            }
        });

	    btnEl.removeClass("btn-danger").removeClass("hidden")
		    .html('<i class="fa fa-square fa-fw"></i> Stop')
		    .unbind()
		    .click(function () {
			    self._stopCountdown(wrapper, btnEl);
		    });

	    wrapper.find(".record-instruction").removeClass("hidden").html("<span class='text-danger'>Now Recording</span> <br/>");
    },

    _stopCountdown: function (wrapper, btnEl) {
        var self = this;
	    self._stopRecording(wrapper, btnEl);
	    self._stopCounter();

	    wrapper.find('[id^="spinnerImage"]').show();
	    wrapper.find('[id^="recordingLog"]').html("Processing, please wait...");
    },

    _writeDown: function(wrapper, number) {
	    var label = "seconds";

	    if (number <= 1) {
	        label = "second";
	    }

	    wrapper.find('[id^="recordingLog"]').html("<strong>Remaining time: " + number + " " + label + "</strong>");
	    },


    _stopRecording: function (wrapper, btnEl) {
	    var self = this;
        self.E2Recorder.StopAudioRecording();

	    btnEl.unbind()
	        .click(function () {
	            return false;
	        });

	    btnEl.addClass("hidden");
    },

    _stopCounter: function () {
        var self = this;

        if (self.CountDown !== undefined) {
            clearInterval(self.CountDown);
        }

    },

    _hideLog: function(wrapper) {
	    wrapper.find('[id^="recordingLog"]').css("visibility", "hidden");
	    wrapper.find('[id^="recordingLog"]').empty();
    },

    _onRecordFinish: function (response) {
        var self = this;
        var wrapper = $("#RecorderChecker");

        self._hideLog(wrapper);
        var spinner = wrapper.find('[id^="spinnerImage"]');
        spinner.hide();

        if (response.IsSuccess === true) {
            wrapper.find("#record-result").removeClass("hidden");
            wrapper.find(".record-instruction").html("Record Result");
            wrapper.find('[id ^= "audio-player"]').attr("src", response.Value.AudioUrl);
            wrapper.find("#record-url").attr("href", response.Value.AudioUrl);
            wrapper.find("#record-url").html(response.Value.AudioName);

        } else {
            var message = "";
            for (var i = 0; i < response.MessageTextArray.length; i++) {
                message += response.MessageTextArray[i];
            }

            showErrorWithActionDialog(message,
                function () {
                    wrapper.find(".upload-audio-manual").show();
                });
        }
    }

};
(function ($, window) {
    "use strict";

    function goTo(targetGroupIndex, targetQuestionIndex, currentGroupIndex, currentQuestionIndex) {
        var self = this;
        if (targetGroupIndex !== currentGroupIndex) {
            $("#section-" + currentGroupIndex + "-" + currentQuestionIndex).parents(".section-group-wrapper").hide();
            $("#section-" + targetGroupIndex + "-" + targetQuestionIndex).parents(".section-group-wrapper").show();
        }

        $("#section-" + targetGroupIndex + "-" + targetQuestionIndex).show();
        $("#section-" + currentGroupIndex + "-" + currentQuestionIndex).hide();
        stopAudio.call(self);
    }

    function stopAudio() {

        var sounds = $(".audioPlayer");
        var i;
        for (i = 0; i < sounds.length; i++) sounds[i].pause();

        Howler.unload();
    }

    function playSound(audioSrc) {
        var sound = new Howl({
            src: [audioSrc]
        });

        sound.play();
    }

    function initializeCloseButton() {
        var self = this;
        $(".closeButton")
            .click(function () {
                window.close();
            });
    }

    function initializeSectionNavigateButton(wrapper) {
        var self = this;
        wrapper.find(".section-btn .btn")
            .click(function () {
                var el = $(this);
                var currentGroupIndex = el.data("group-index");
                var currentQuestionIndex = el.data("question-index");
                var targetGroupIndex = 0;
                var targetQuestionIndex = 0;
                if (el.hasClass("next-btn")) {
                    if ($('#section-' + currentGroupIndex + '-' + (currentQuestionIndex + 1)).length) {
                        targetGroupIndex = currentGroupIndex;
                        targetQuestionIndex = currentQuestionIndex + 1;
                    } else {
                        targetGroupIndex = currentGroupIndex + 1;
                        targetQuestionIndex = 1;
                    }
                }
                else {
                    if ($('#section-' + currentGroupIndex + '-' + (currentQuestionIndex - 1)).length) {
                        targetGroupIndex = currentGroupIndex;
                        targetQuestionIndex = currentQuestionIndex - 1;
                    } else {
                        targetGroupIndex = currentGroupIndex - 1;
                        var lastQuestionInSection = $('.wrapper-section[id^="section-' + targetGroupIndex + '-"]:last-child');
                        targetQuestionIndex = lastQuestionInSection.data("question-index");
                    }
                }
                goTo.call(self, targetGroupIndex, targetQuestionIndex, currentGroupIndex, currentQuestionIndex);
            });
    }

    function initializeViewAssessmentButtonHandler() {
        $('.view-assessment-btn').click(function () {
            var mockTestQuestionId = $(this).data("mock-test-question-id");
            var url = $(this).data("url") + "?mockTestQuestionId=" + mockTestQuestionId;
            showPopup(url);
        });
    }

    function initializeTooltip() {
        $('.answer-report-tooltip').tooltipster({
            theme: 'tooltipster-light',
            side: 'right'
        });
    }

    function initializeSnippet() {
        var self = this;
        $(".listen-snippet").click(function (e) {
            stopAudio.call(self);
            var el = $(e.currentTarget);
            var audioPath = el.parents(".wrapper-section").data("audio-path");
            var audioSrc = audioPath + el.data("audio");
            playSound.call(self, audioSrc);
        });
    }

    // Constructor
    var studentToeflMiniMockTestAnswerReport = function (element) {
        this.Element = element;
        this.MaintenanceForm = null;
        this.CountDown = null;
        this.CurrentGroupSectionIndex = null;
        this.CurrentGroupName = null;
        this.CurrentQuestionId = null;
        this.BeforePlayAudioCountDown = null;
    };

    studentToeflMiniMockTestAnswerReport.prototype = {
        constructor: studentToeflMiniMockTestAnswerReport,
        Register: function () {
            var self = this;

            self.Initialize();
        },
        Initialize: function () {
            var self = this;

            var currentGroupSection = $('div[class^="section-group-wrapper"]:not(.mmt-hide-panel)');
            self.CurrentGroupSectionIndex = currentGroupSection.data("group-index");
            self.CurrentGroupName = currentGroupSection.data("group-name");

            var currentQuestion = currentGroupSection.find('.wrapper-section:not(.mmt-hide-panel)');
            self.CurrentQuestionId = currentQuestion.data("question-id");

            $(".wrapper-section")
                .each(function () {
                    var wrapper = $(this);
                    initializeSectionNavigateButton.call(self, wrapper);
                });

            $(".fcd-correct-answer-tooltip").tooltipster({
                contentAsHTML: true,
                functionBefore: function (instance, helper) {

                    var origin = $(helper.origin);
                    var answerText = origin.data("correct-answer");
                    var headerText = "<p>Correct Answer:</p>";
                    var text = headerText + answerText;

                    instance.content(text);
                    origin.data('loaded', true);
                },
                animation: 'fade',
                delay: 200,
                theme: ['tooltipster-light', 'tooltipster-light-fcd'],
                trigger: 'hover',
                side: 'right',
                maxWidth: 480
            });

            initializeCloseButton.call(self);
            initializeViewAssessmentButtonHandler.call(self);
            initializeTooltip.call(self);
            initializeSnippet.call(self);
        }
    };

    // Export javascript class into window environment
    window.StudentToeflMiniMockTestAnswerReport = studentToeflMiniMockTestAnswerReport;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    function getScoreChart() {
        var self = this;
        var url = self.ScoreChartPanel.data("get-url");

        self.ScoreChartPanel.html('<span class="icon fa fa-refresh fa-spin"></span> ' + self.ScoreChartPanel.data("loading-message"));
        self.GaugeChartPanel.html('<span class="icon fa fa-refresh fa-spin"></span> ' + self.GaugeChartPanel.data("loading-message"));

        submitDataWithoutLoader({}, url,
            function (data) {
                self.ScoreChartPanel.empty();
                self.GaugeChartPanel.empty();
                generateChart.call(self, data.Value);
                self.ScoreChartPanel.parent().addClass("p-0");
                self.GaugeChartPanel.parent().addClass("p-0");
            },
            function () { return; });
    }

    function generateChart(dataPanel) {
        var self = this;
        var xdataBar = [];
        var ydataBar = [];
        var scoreTextData = [];
        var colorData = [];
        var ydataGauge = null;

        $.each(dataPanel,
            function (index, row) {
                if (row.Title === 'OVERALL') {
                    ydataGauge = row.BandScore;
                }
                else {
                    xdataBar.push(row.Title);
                    ydataBar.push(row.BandScore);

                    var chartItem = {
                        scoreLabel: row.BandScore,
                        score: row.BandScore,
                        sectionScoreText: row.BandScore
                    };
                    scoreTextData.push(chartItem);
                    colorData.push(self.ScoreChartPanel.data("default-color"));
                }
            });

        generateScoreChart.call(self, scoreTextData, xdataBar, ydataBar, colorData);
        generateGaugeChart.call(self, ydataGauge, colorData);
    }

    function generateScoreChart(scoreTextData, xdataBar, ydataBar, colorData) {
        function getScoreText(score) {
            return scoreTextData.find(item => item.score === score).scoreLabel;
        }

        Highcharts.chart('scoreChartWrapper', {
            chart: {
                type: 'bar'
            },
            title: {
                text: 'Overall Score',
                align: 'center',
                style: {
                    "color": "#2D4F7D",
                    "fontSize": "18px",
                    "fontWeight": "600",
                    "padding-top": "5px"
                },
                y: 30
            },
            xAxis: {
                categories: xdataBar,
                title: {
                    text: null
                }
            },
            yAxis: {
                min: 1,
                max: 30,
                title: {
                    text: null
                },
                labels: {
                    overflow: 'justify',
                    step: 1
                },
                lineWidth: 2,
                lineColor: '#bdbdbd'
            },
            tooltip: {
                enabled: false
            },
            plotOptions: {
                bar: {
                    dataLabels: {
                        enabled: true
                    }
                },
                series: {
                    dataLabels: {
                        formatter: function () {
                            return getScoreText(this.y);
                        }
                    },
                    pointWidth: 30,
                    colorByPoint: true
                }
            },
            credits: {
                enabled: false
            },
            exporting: {
                enabled: false
            },
            series: [{
                showInLegend: false,
                data: ydataBar,
                colors: colorData
            }],
            navigation: {
                buttonOptions: {
                    verticalAlign: 'top',
                    y: 0
                }
            }
        });
    }

    function generateGaugeChart(ydataGauge, colorData) {
        Highcharts.chart('gaugeChartWrapper', {
            chart: {
                type: 'solidgauge'
            },
            title: {
                text: 'Total Score',
                align: 'center',
                style: {
                    "color": "#2D4F7D",
                    "fontSize": "18px",
                    "fontWeight": "600"
                },
                y: 30,
                floating: true
            },
            pane: {
                center: ['50%', '75%'],
                size: '100%',
                startAngle: -90,
                endAngle: 90,
                background: {
                    backgroundColor:
                        Highcharts.defaultOptions.legend.backgroundColor || '#EEE',
                    innerRadius: '60%',
                    outerRadius: '100%',
                    shape: 'arc'
                }
            },
            exporting: {
                enabled: false
            },
            tooltip: {
                enabled: false
            },
            plotOptions: {
                solidgauge: {
                    dataLabels: {
                        y: 5,
                        borderWidth: 0,
                        useHTML: true
                    }
                }
            },
            yAxis: {
                min: 0,
                max: 120,
                minorTickInterval: null,
                title: null,
                tickAmount: 2,
                labels: {
                    distance: 15
                }
            },
            credits: {
                enabled: false
            },
            series: [{
                name: 'Score',
                data: [ydataGauge],
                dataLabels: {
                    format:
                        '<div style="text-align:center; margin-top: -70px;">' +
                        '<span style="font-size:30px">{y}</span><br/>' +
                        '<span style="font-size:16px;opacity:0.4"> out of 120</span>' +
                        '</div>'
                },
                tooltip: {
                    valueSuffix: ' out of 120'
                },
                colors: colorData
            }]

        });
    }

    function initEventHandler() {
        var self = this;
        var eventHandler = {
            startBtnClick: function (e) {
                e.preventDefault();
                closeErrorPane();

                var element = $(this);
                var url = element.data("url") +
                    "?mockTestId=" +
                    element.data("mock-test-id");
                showPopup(url);
            },
            viewScoreReportClick: function (e) {
                e.preventDefault();
                closeErrorPane();

                var element = $(this);
                var url = element.data("url") +
                    "?mockTestId=" +
                    element.data("mock-test-id");
                showPopup(url);
            },
            buyAddOnsClick: function (e) {
                e.preventDefault();

                showLoadingDialog();
                var url = $(this).data("payment-url");

                if (url !== "") {
                    $.get(url, function (contentData) {
                        $('#mainUserContent').html(contentData);
                        hideLoadingDialog();

                        var helper = new Helper();
                        var namespace = helper.CreateNameSpaceFromURL(contentUrl);
                        var apps = new Application($('#mainUserContent'), namespace);
                        apps.Register();
                    });
                }
            }
        };

        $("#btnStart")
            .off("click")
            .on("click", eventHandler.startBtnClick);

        $("#btnViewScoreReport")
            .off("click")
            .on("click", eventHandler.viewScoreReportClick);

        $("#btnBuyAddOns")
            .off("click")
            .on("click", eventHandler.buyAddOnsClick);

        $('.answer-report-tooltip').tooltipster({
            theme: 'tooltipster-light',
            side: 'right'
        });
    }

    // Constructor
    var studentToeflMiniMockTestIndex = function (element) {
        this.Element = element;
        this.ScoreChartPanel = $("#scoreChartPanel");
        this.GaugeChartPanel = $("#gaugeChartPanel");
    };

    studentToeflMiniMockTestIndex.prototype = {
        constructor: studentToeflMiniMockTestIndex,
        Register: function () {
            var self = this;

            initEventHandler.call(self);
            getScoreChart.call(self);
        },
        GenerateApplicationDialog: function (url, maintenanceDiv) {

            $("#errorPane").remove();
            maintenanceDiv.html("");

            $.get(url,
                function (data) {
                    maintenanceDiv.html('');
                    maintenanceDiv.append(data);

                    var helper = new Helper();
                    var namespace = helper.CreateNameSpaceFromURL(url);
                    var apps = new Application(maintenanceDiv, namespace);
                    apps.RegisterWithCaller(self);

                });
        }        
    };

    // Export javascript class into window environment
    window.StudentToeflMiniMockTestIndex = studentToeflMiniMockTestIndex;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    // Private Functions
    function goToSection(sectionName, currentSection) {
        var self = this;

        stopAudio.callWithLog(self);
        var currentSectionElement = $("#" + currentSection);
        var nextSectionElement = $("#" + sectionName);
        var sectionWrapper = $("#" + sectionName);
        var groupIndex = nextSectionElement.data("group-index");

        var recorderButton = currentSectionElement.find(".multipleRecorderButton");
        if (recorderButton.length !== 0 && !recorderButton.hasClass("hidden")) {
            recorderButton.click();
        }

        var onSuccessSubmitData = function (sectionName) {
            if (nextSectionElement.find(".mmt-wrapper.question:not(.mmt-hide-panel)").length) {
                var el = $(nextSectionElement.find(".mmt-wrapper.question:not(.mmt-hide-panel)"));
                sectionName = el.prop("id");
            }

            currentSectionElement.parents(".section-group-wrapper").hide();
            nextSectionElement.parents(".section-group-wrapper").show();

            if (!nextSectionElement.hasClass("wrapper-section")) {
                sectionWrapper = nextSectionElement.parents(".wrapper-section");
            }

            self.CurrentGroupIndex = groupIndex;
            self.CurrentWrapperId = sectionName;
            self.IsQuestionTimerCounting = false;

            // Handle audio instruction
            handleAudioInstruction.callWithLog(self, sectionName, nextSectionElement);

            // Handle auto instruction
            sectionName = handleAutoInstruction.callWithLog(self, sectionName);

            // Handle whether timer will start on next element
            handleTimer.callWithLog(self, sectionName, sectionWrapper);

            // Handle auto question
            var sectionEl = $("#" + sectionName);
            if ($("#" + sectionName).find(".panel-auto-question").length) {
                handleAutoQuestion.callWithLog(self, sectionEl, 1);
                showNextButton.callWithLog(self, nextSectionElement, false);
            }

            // Handle questions
            handleReTellLecture.callWithLog(self, sectionName, nextSectionElement);
            handleIntegratedWriting.callWithLog(self, sectionName);
            handleIndependentWriting.callWithLog(self, sectionName);

            currentSectionElement.hide();
            sectionWrapper.show();
            sectionEl.show();
            setFocus.callWithLog(self, sectionName);
        };

        // Handle different section
        handleSection.callWithLog(self, currentSectionElement, sectionName, groupIndex, onSuccessSubmitData);
    }

    function handleSection(currentSectionElement, sectionName, groupIndex, onSuccessSubmitData) {
        var self = this;
        var nextSectionElement = $("#" + sectionName);
        var currentGroupIndex = currentSectionElement.data("group-index");
        var sectionMessage = self.TestContainer.data("section-confirmation-message");
        var questionMessage = self.TestContainer.data("question-confirmation-message");
        var noText = self.TestContainer.data("no-text");
        var yesText = self.TestContainer.data("yes-text"); 

        var form = $("#maintenanceForm-" + self.CurrentGroupIndex);
        var sectionGroupCode = $("#SectionGroupCode", form).val();
        if (sectionGroupCode === "REA") {
            sectionMessage = self.TestContainer.data("reading-section-confirmation-message");
            noText = self.TestContainer.data("cancel-text");
            yesText = self.TestContainer.data("continue-text");
        }

        if (nextSectionElement.data("group-index") !== currentGroupIndex) {
            var goToNextSection = function () {
                clearInterval(self.TimerCountDown);
                self.IsTimerCounting = false;

                // Submit current section
                saveAnswer.callWithLog(self, form, onSuccessSubmitData);
            };

            if (self.IsTimerCounting) {
                showYesNoSwappedCustomConfirmationDialog(sectionMessage,
                    function () { goToNextSection(); },
                    yesText,
                    function () { return; },
                    noText
                );
            } else {
                goToNextSection();
            }    
        } else {
            var goToNextQuestion = function () {
                if (typeof onSuccessSubmitData === "function") {
                    onSuccessSubmitData(sectionName);
                }
            };

            if (self.IsQuestionTimerCounting) {
                showYesNoConfirmationDialog(questionMessage,
                    function () { goToNextQuestion(); },
                    function () { return; }
                );
            }
            else {
                goToNextQuestion();
            }
        }
    }

    function handleAudioInstruction(sectionName, nextSectionElement) {
        var self = this;
        var sectionEl = $("#" + sectionName);
        if (sectionEl.find(".panel-audio-instruction").length) {
            var audioInstructionEl = sectionEl.find(".panel-audio-instruction");
            var audioSrc = audioInstructionEl.data("audio-src");
            var onEnded = function () {
                showSectionButton.callWithLog(self, nextSectionElement, true);

                self.E2Logger.MockTestManualLog("AUDIOINSTRUCTION_ONENDED", $("#" + self.CurrentWrapperId));
            };

            if (audioInstructionEl.data("is-show-player") === "True") {
                startAudio.callWithLog(self, nextSectionElement, onEnded);
            }
            else {
                playSound.callWithLog(self, sectionEl, audioSrc, onEnded);
            }

            showSectionButton.callWithLog(self, nextSectionElement, false);
        }
    }

    function handleAutoInstruction(sectionName) {
        var self = this;
        if (!($("#" + sectionName).parents(".auto-instruction-panel").length && !$("#" + sectionName).hasClass("played"))) {
            var nextAutoInstruction = $("#auto-instruction-panel-" + sectionName);
            if (nextAutoInstruction.length) {
                var autoInstructionEl = $(nextAutoInstruction.find(".mmt-wrapper.question[data-instruction-index=1]"));
                if (autoInstructionEl.length && !autoInstructionEl.hasClass("played")) {
                    sectionName = autoInstructionEl.prop("id");
                    self.CurrentWrapperId = sectionName;
                }
            }
            else {
                return sectionName;
            }
        }

        var wrapper = $("#" + sectionName);
        var instructionIndex = wrapper.data("instruction-index");
        var mockTestQuestionId = wrapper.data("mock-test-question-id");
        var parentSectionName = wrapper.parents(".auto-instruction-panel").data("section-name");
        var isNextOnAudioFinished = wrapper.data("is-next-on-audio-finished");
        var isNextOnTimesUp = wrapper.data("is-next-on-times-up");
        var duration = wrapper.data("show-duration");
        var isShowTimer = wrapper.data("is-show-timer");
        var isShowPlayer = wrapper.data("is-show-player");
        var audioSrc = wrapper.data("audio-src");
        wrapper.parents(".auto-instruction-panel").show();

        var onEnded = function () {
            var nextWrapperName = "auto-instruction-" + mockTestQuestionId + "-" + (instructionIndex + 1);
            if (wrapper.siblings("#" + nextWrapperName).length === 0) {
                nextWrapperName = parentSectionName;
                wrapper.parents(".auto-instruction-panel").hide();
            }

            wrapper.addClass("played");

            self.E2Logger.MockTestManualLog("AUTOINSTRUCTION_ONENDED", $("#" + self.CurrentWrapperId));
            goToSection.callWithLog(self, nextWrapperName, self.CurrentWrapperId);
        };

        if (wrapper.find(".panel-auto-audio-instruction").length) {
            if (isNextOnAudioFinished === "False") {

                var onAudioFinished = function () {
                    var nextInstructionBtnEl = wrapper.find(".next-instruction-btn");
                    if (nextInstructionBtnEl.length) {
                        nextInstructionBtnEl.off("click").on("click", function () { onEnded(); });
                        nextInstructionBtnEl.parents(".section-btn").removeClass("hidden");
                    }
                    self.E2Logger.MockTestManualLog("AUTOINSTRUCTION_ONAUDIOFINISHED", $("#" + self.CurrentWrapperId));
                };

                if (isShowPlayer === "True") {
                    startAudio.callWithLog(self, wrapper, onAudioFinished);
                }
                else {
                    playSound.callWithLog(self, wrapper, audioSrc, onAudioFinished);
                }
            }
            else {
                if (isShowPlayer === "True") {
                    startAudio.callWithLog(self, wrapper, onEnded);
                }
                else {
                    playSound.callWithLog(self, wrapper, audioSrc, onEnded);
                }
            }
        }
        else if (duration > 0 && isNextOnTimesUp === "True") {
            if (isShowTimer === "True") {
                startInstructionTimerCountDown.callWithLog(self, wrapper, duration, onEnded);
            } else {
                startCountDownOnBackGround.callWithLog(self, wrapper, duration, onEnded);
            }
        }

        return sectionName;
    }

    function handleAutoQuestion(wrapper, audioIndex) {
        var self = this;
        var audioPanelEl = wrapper.find("#auto-audio-instruction-" + audioIndex);
        var audioSrc = audioPanelEl.data("audio-src");

        var onEnded = function () {
            var nextAudioPanelEl = wrapper.find("#auto-audio-instruction-" + (audioIndex + 1));
            if (nextAudioPanelEl.length) {
                handleAutoQuestion.callWithLog(self, wrapper, audioIndex + 1);
            } else {
                wrapper.find(".list-questions").removeClass("hidden");
            }

            self.E2Logger.MockTestManualLog("AUDIOQUESTION_ONENDED", $("#" + self.CurrentWrapperId));
        };

        if (audioPanelEl.length) {
            playSound.callWithLog(self, audioPanelEl, audioSrc, onEnded);
        }
        else {
            wrapper.find(".list-questions").removeClass("hidden");
        }
    }

    function handleTimer(sectionName, sectionWrapper) {
        var self = this;
        if ($("#" + sectionName).data("is-start-timer") === "True") {
            if (self.IsTimerCounting === false) {
                sectionWrapper.find(".section-timer-widget").removeClass("hidden");
                prepareTimerForSection.callWithLog(self, sectionWrapper);
            }
        }
        else {
            sectionWrapper.find(".section-timer-widget").addClass("hidden");
            if (self.TimerCountDown !== undefined) {
                clearInterval(self.TimerCountDown);
                self.IsTimerCounting = false;
            }
        }
    }

    function handleReTellLecture(sectionName, nextSectionElement) {
        var self = this;
        var panelReTellLectureEl = $("#" + sectionName).find(".panel-retell-lecture");
        if (panelReTellLectureEl.length) {
            showNextButton.callWithLog(self, nextSectionElement, false);

            var onQuestionFinished = function () {
                var prepareAudioSrc = $("#" + sectionName).find('[id^="beforeRecordingLog"]').data("prepare-instruction-audio");
                var onPrepareEnded = function () {
                    startBeforeRecordCountdown.callWithLog(self, $("#" + sectionName));
                };

                startCountDownOnBackGround.callWithLog(self, wrapper, -1, function () {
                    playSound.callWithLog(self, $("#" + sectionName), prepareAudioSrc, onPrepareEnded);
                });
            };

            var questionAudioSrc = panelReTellLectureEl.data("audio-src");
            if (questionAudioSrc !== undefined) {
                playSound.callWithLog(self, $("#" + sectionName), questionAudioSrc, onQuestionFinished);
            }
            else {
                onQuestionFinished();
            }
        }
    }

    function handleIntegratedWriting(sectionName) {
        var self = this;
        var panelIntegratedWritingEl = $("#" + sectionName).find(".panel-integrated-writing");
        if (panelIntegratedWritingEl.length) {
            var writingDuration = panelIntegratedWritingEl.data("duration");
            var warningTime = panelIntegratedWritingEl.data("warning-time");
            var warningAudioSrc = panelIntegratedWritingEl.data("warning-audio-src");
            var timesUpAudioSrc = panelIntegratedWritingEl.data("times-up-audio-src");
            var questionAudioSrc = panelIntegratedWritingEl.data("question-audio-src");

            var onWritingEnded = function () {
                playSound.callWithLog(self, $("#" + sectionName), timesUpAudioSrc);
                $("#" + sectionName).find("textarea").attr("disabled", "disabled").addClass("disabled");
                $("#" + sectionName).find(".note-editable").attr("contenteditable", "false");
                $("#" + sectionName).find(".textarea-button .btn").attr("disabled", "disabled");
                self.IsQuestionTimerCounting = false;
            };
            var textInput = $("#" + sectionName).find("textarea[id^='SummarizeWritingAnswer']");
            if (textInput.length) {
                $(textInput[0]).focus();
            }

            startInstructionTimerCountDown.callWithLog(self, $("#" + sectionName), writingDuration, onWritingEnded, warningTime, warningAudioSrc);
            playSound.callWithLog(self, $("#" + sectionName), questionAudioSrc);
        }
    }

    function handleIndependentWriting(sectionName) {
        var self = this;
        var panelIntegratedWritingEl = $("#" + sectionName).find(".panel-independent-writing");
        if (panelIntegratedWritingEl.length) {
            var writingDuration = panelIntegratedWritingEl.data("duration");
            var warningTime = panelIntegratedWritingEl.data("warning-time");
            var warningAudioSrc = panelIntegratedWritingEl.data("warning-audio-src");
            var timesUpAudioSrc = panelIntegratedWritingEl.data("times-up-audio-src");

            var onWritingEnded = function () {
                playSound.callWithLog(self, $("#" + sectionName), timesUpAudioSrc);
                $("#" + sectionName).find("textarea").attr("disabled", "disabled").addClass("disabled");
                $("#" + sectionName).find(".note-editable").attr("contenteditable", "false");
                $("#" + sectionName).find(".textarea-button .btn").attr("disabled", "disabled");
                self.IsQuestionTimerCounting = false;
            };
            var textInput = $("#" + sectionName).find("textarea[id^='SummarizeWritingAnswer']");
            if (textInput.length) {
                $(textInput[0]).focus();
            }


            startInstructionTimerCountDown.callWithLog(self, $("#" + sectionName), writingDuration, onWritingEnded, warningTime, warningAudioSrc);
        }
    }

    function setFocus(sectionName) {
        var highlights = $("#" + sectionName).find(".reading-text-container .toefl-blue-highlighted");
        if (highlights.length) {
            $(highlights[0]).attr("tabIndex", "0");
            $(highlights[0]).focus();
        }
    }

    function startBeforeRecordCountdown(wrapper, onStopCountDown) {
        var self = this;
        var timerNumber = 0;
        var countDownEl = wrapper.find('[id^="beforeRecordingLog"]');
        var duration = countDownEl.data("duration");
        var isUploadFormVisible = wrapper.find(".uploadControlSection").is(":visible");

        if (isUploadFormVisible) {
            return;
        }

        var stopCountdownAction = function () {
            if (typeof onStopCountDown === "function") {
                onStopCountDown();
            }

            stopBeforeRecordCountdown.callWithLog(self, wrapper, countDownEl);
        };

        wrapper.find("#recordButton").addClass("hidden");

        if (duration === 0 || duration === null || duration === undefined) {
            stopCountdownAction();
            return;
        } else {
            timerNumber = parseInt(duration);
        }

        self.BeforeRecordCountDown = setInterval(function () {
            writeBeforeRecordLogCountDown.callWithLog(self, wrapper, timerNumber);
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                stopCountdownAction();
            }
        },
            1000);
    }

    function stopBeforeRecordCountdown(wrapper, countDownEl) {
        var self = this;
        var recordButtonEl = countDownEl.closest("#recorderControlPanel").find("#recordButton");
        var recordInstructionAudioSrc = recordButtonEl.data("record-instruction-audio");
        var onEnded = function () {
            showRecordButton.callWithLog(self, wrapper, recordButtonEl);
        };

        playSound.callWithLog(self, recordButtonEl, recordInstructionAudioSrc, onEnded);

        stopBeforeRecordCounter.callWithLog(self);
        hideBeforeRecordLog.callWithLog(self, wrapper);
    }
    
    function writeBeforeRecordLogCountDown(wrapper, number) {
        var label = "seconds";

        if (number <= 1) {
            label = "second";
        }

        wrapper.find('[id^="beforeRecordingLog"]').html("Preparation time remaining: <strong>" + number + " " + label + "</strong>");
    }


    function showRecordButton(wrapper, recordButtonEl) {
        var self = this;

        recordButtonEl.removeClass("hidden");
        showLog.callWithLog(self, wrapper);
        var duration = recordButtonEl.data("duration");
        var timerNumber = 35;
        if (duration !== 0) {
            timerNumber = parseInt(duration);
        }
        writeDown.callWithLog(self, wrapper, timerNumber);

        recordButtonEl.trigger("click");
    }

    function stopBeforeRecordCounter() {
        var self = this;
        if (self.BeforeRecordCountDown !== undefined || self.BeforeRecordCountDown !== null) {
            clearInterval(self.BeforeRecordCountDown);
            self.BeforeRecordCountDown = null;
        }
    }

    function hideBeforeRecordLog(wrapper) {
        wrapper.find('[id^="beforeRecordingLog"]')
            .css("visibility", "hidden")
            .empty();
    }

    function showLog(wrapper) {
        wrapper.find('[id^="recordingLog"]')
            .css("visibility", "visible")
            .empty();
    }

    function hideLog(wrapper) {
        wrapper.find('[id^="recordingLog"]')
            .css("visibility", "hidden")
            .empty();
    }

    function writeDown(wrapper, number) {
        var label = "seconds";

        if (number <= 1) {
            label = "second";
        }

        wrapper.find('[id^="recordingLog"]').html("<strong>Remaining time: " + number + " " + label + "</strong>");
    }


    function showSectionButton(wrapper, isShowButton) {
        var self = this;
        if (isShowButton) {
            $(".section-btn", wrapper).removeClass("hidden");
        }
        else {
            $(".section-btn", wrapper).addClass("hidden");
        }
    }

    function showNextButton(wrapper, isShowButton) {
        var self = this;
        if (isShowButton) {
            $(".next-btn", wrapper).removeClass("hidden");
        }
        else {
            $(".next-btn", wrapper).addClass("hidden");
        }
    }

    function startAudio(wrapper, onEnded) {
        var self = this;
        var timerNumber = 0;

        initAudioPlayerWidget(wrapper.find("#audioPlayerPanel"));

        self.AudioCountDown = setInterval(function () {
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                $(".audioPlayer", wrapper).removeClass("disabled-audio");
                stopAudioCountdown.callWithLog(self, wrapper);
            }
        },
            1000);

        audioPlayerHandle.callWithLog(self, wrapper, onEnded);

        self.E2Logger.MockTestManualLog("START_AUDIO", $("#" + self.CurrentWrapperId));
    }

    function startCountDownOnBackGround(wrapper, timerNumber, onEnded) {
        var self = this;

        var countDown = setInterval(function () {
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                if (typeof onEnded === "function") {
                    onEnded();
                    clearInterval(countDown);
                }
            }
        },
            1000);

    }

    function startInstructionTimerCountDown(wrapper, timerNumber, onEnded, warningDuration, warningAudioSrc) {
        var self = this;

        if (self.InstructionCountDown !== undefined) {
            clearInterval(self.InstructionCountDown);
        }

        var duration = timerNumber;
        var durationPanel = wrapper.find(".question-timer-widget .timer-duration-panel");
        if (timerNumber === 0) {
            duration = durationPanel.data("duration");
        }

        if (durationPanel.parents(".auto-instruction-wrapper").length === 0) {
            self.IsQuestionTimerCounting = true;
        }

        if (duration !== 0) {
            var timerId = durationPanel.prop("id");

            self.QuestionInterval = setInterval(function () {
                if (warningDuration !== undefined && warningDuration > 0) {
                    timerNumber = timerNumber - 1;
                    if (timerNumber === warningDuration) {
                        playSound.callWithLog(self, wrapper, warningAudioSrc);
                    }
                }
                DynamicTimerWithCustomInterval("#" + timerId, "",
                    function () { onEnded(); },
                    self.QuestionInterval
                );
            },
                1000);
            self.InstructionCountDown = self.QuestionInterval;
        }

    }

    function stopAudio() {
        var sounds = $(".audio-player");
        var i;
        for (i = 0; i < sounds.length; i++) sounds[i].pause();

        Howler.unload();
    }

    function audioPlayerHandle(wrapper, onEnded) {
        var self = this;
        var audioPlayerEl = wrapper.find(".e2l-audio-player audio");

        if (audioPlayerEl.length === 0) {
            return;
        }

        self.IsAudioPlayed = false;

        audioPlayerEl.off("play").on('play', function () {
            if (self.IsAudioPlayed || self.AudioCountDown !== null) {
                this.pause();
                return;
            }
        });

        audioPlayerEl.off("ended").on('ended', function () {
            if (self.IsAudioPlayed) {
                return;
            }

            if (typeof onEnded === "function") {
                onEnded();
            }
            
            self.IsAudioPlayed = true;
        });
    }

    function stopAudioCountdown (wrapper) {
        var self = this;
        var audioPlayerEl = wrapper.find(".e2l-audio-player audio");
        var id = audioPlayerEl.prop("id");

        if (audioPlayerEl.length) {
            document.getElementById(id).play();
        }
        if (self.AudioCountDown !== undefined || self.AudioCountDown !== null) {
            clearInterval(self.AudioCountDown);
            self.AudioCountDown = null;
        }
    }

    function playSound(wrapper, audioSrc, onEnded) {
        var self = this;

        $("#" + self.CurrentWrapperId).find(".audio-loading-image").removeClass("hidden");
        var sound = new Howl({
            src: [audioSrc],
            onend: function () {
                if (typeof onEnded === "function") {
                    onEnded();
                }
            },
            onload: function () {
                $("#" + self.CurrentWrapperId).find(".audio-loading-image").addClass("hidden");
            }
        });

        sound.play();
        self.E2Logger.MockTestManualLog("PLAY_SOUND", $("#" + self.CurrentWrapperId));
    }

    function initEventHandler() {
        var self = this;
        var eventHandler = {
            nextBtnClick: function (e) {
                e.preventDefault();
                var el = $(this);
                var isListeningSection = el.parents(".wrapper-section.lis").not(".instruction-section").length;
                if (isListeningSection && el.text() !== "OK") {
                    el.attr("log-action", "BTN_OK_CLICK");
                    el.text("OK");
                    return;
                }

                var currentSection = $(this).data('current-section-name');
                var nextSection = $(this).data('target-section-name');
                goToSection.callWithLog(self, nextSection, currentSection);

            },
            prevBtnClick: function (e) {
                e.preventDefault();

                var currentSection = $(this).data('current-section-name');
                var nextSection = $(this).data('target-section-name');
                goToSection.callWithLog(self, nextSection, currentSection);

            },
            reviewBtnClick: function () {
                var el = $(this);
                var postfix = el.data("postfix");
                var content = $("#review-" + postfix).html();
                var title = $("#review-" + postfix).data("review-question-label");

                showAdvancedDialogWithEventOnShown(
                    title,
                    content,
                    "OK",
                    function () { return false; },
                    eventHandler.reviewQuestionDialogShown);
            },
            reviewQuestionDialogShown: function (dialog) {
                $(".review-question")
                    .on("click", function () {
                        var el = $(this);

                        if (el.hasClass(".lis")) {
                            return;
                        }

                        var sectionName = el.data("section-name");
                        dialog.close();
                        $('body').removeClass('modal-open');
                        $('.modal-backdrop').remove();

                        goToSection.callWithLog(self, sectionName, self.CurrentWrapperId);
                    });
            },
            recordButtonClick: function (e) {
                e.preventDefault();
                var btnEl = $(this);
                startCountdown.callWithLog(self, $("#" + self.CurrentWrapperId), btnEl);
            },
            uploadButtonClick: function (e) {
                e.preventDefault();
                uploadAudioFile.callWithLog(self, wrapper);
            },
            summerNoteKeyUp: function (e) {
                var el = $(this);
                var mockTestQuestionId = el.data("mock-test-question-id");

                countWord.callWithLog(self, mockTestQuestionId, el);
            },
            submitBtnClick: function (e) {
                e.preventDefault();
                var submitAnswerAction = function () {
                    var form = $(e.currentTarget).parents("form");
                    stopAudio.callWithLog(self);

                    clearInterval(self.TimerCountDown);
                    saveAnswer.callWithLog(self, form);
                };

                var confirmationMessage = self.IsTimerCounting || self.IsQuestionTimerCounting
                    ? self.TestContainer.data("submit-confirmation-message")
                    : self.TestContainer.data("confirmation-message");

                showYesNoConfirmationDialog(confirmationMessage,
                    function () { submitAnswerAction(); },
                    function () { return; }
                );
            },
            closeBtnClick: function () {
                window.close();
            },
            cutBtnClick: function (e) {
                e.preventDefault();

                var el = $(this);
                var mockTestQuestionId = el.data("mock-test-question-id");
                window.getSelection();
                document.execCommand('cut');

                var currTextArea = $("textarea[data-mock-test-question-id^='" + mockTestQuestionId + "']");
                countWord.callWithLog(self, mockTestQuestionId, currTextArea);
            },
            pasteBtnClick: function (e) {
                e.preventDefault();
                var el = $(this);
                var mockTestQuestionId = el.data("mock-test-question-id");
                navigator.clipboard.readText()
                    .then(text => {
                        document.execCommand("insertHTML", false, text);
                        var currTextArea = $("textarea[data-mock-test-question-id^='" + mockTestQuestionId + "']");
                        countWord.callWithLog(self, mockTestQuestionId, currTextArea);
                    })
                    .catch(err => { return; });

            },
            undoBtnClick: function (e) {
                e.preventDefault();
                var el = $(this);
                var mockTestQuestionId = el.data("mock-test-question-id");
                var currTextArea = $("textarea[data-mock-test-question-id^='" + mockTestQuestionId + "']");
                if (currTextArea.length) {
                    $(currTextArea[0]).summernote('undo');
                }

                countWord.callWithLog(self, mockTestQuestionId, currTextArea);
            }
        };

        $(".next-btn", self.Element)
            .off("click")
            .on("click", eventHandler.nextBtnClick);

        $(".prev-btn", self.Element)
            .off("click")
            .on("click", eventHandler.prevBtnClick);

        $(".review-btn", self.Element)
            .off("click")
            .on("click", eventHandler.reviewBtnClick);

        $(".multipleRecorderButton", self.Element)
            .off("click")
            .on("click", eventHandler.recordButtonClick);

        $(".multipleUploadButton", self.Element)
            .off("click")
            .on("click", eventHandler.uploadButtonClick);

        $("textarea[id^='SummarizeWritingAnswer']")
            .on('summernote.keyup', eventHandler.summerNoteKeyUp);

        $(".submit-btn", self.Element)
            .off("click")
            .on("click", eventHandler.submitBtnClick);

        $(".closeButton")
            .off("click")
            .on("click", eventHandler.closeBtnClick);

        $(".cut-btn")
            .off("click")
            .on("click", eventHandler.cutBtnClick);

        $(".paste-btn")
            .off("click")
            .on("click", eventHandler.pasteBtnClick);

        $(".undo-btn")
            .off("click")
            .on("click", eventHandler.undoBtnClick);
    }

    function countWord(mockTestQuestionId, el) {
        var self = this;

        var wordCountEl = $("#word-count-" + mockTestQuestionId);
        if (wordCountEl.length > 0) {

            var value = el.summernote("code").replace(/<\/p>/gi, "\n")
                .replace(/<br\/?>/gi, "\n")
                .replace(/<\/?[^>]+(>|$)/g, "");
            if (value.trim().length === 0) {
                wordCountEl.html(0);
                return;
            }
            var regex = /\s+/gi;
            var wordCount = value.trim().replace(regex, ' ').split(' ').length;
            
            wordCountEl.html(wordCount);
        }
        el.summernote('focus');
    }

    function prepareTimerForSection(wrapper) {
        var self = this;

        if (self.TimerCountDown !== undefined) {
            clearInterval(self.TimerCountDown);
        }

        var duration = 0;
        var durationPanel = wrapper.find(".section-timer-widget .timer-duration-panel");
        if (durationPanel.length) {
            duration = durationPanel.data("duration");
            self.IsTimerCounting = true;
        } else {
            return;
        }

        if (duration !== 0) {
            var timerId = durationPanel.prop("id");

            self.TimerInterval = setInterval(function () {
                DynamicTimerWithCustomInterval("#" + timerId, "",
                    function () { timeOut.callWithLog(self, wrapper, self.TimerInterval); });
            },
                1000);
            self.TimerCountDown = self.TimerInterval;
        }
    }

    function initializeDragAndDrop(wrapper) {
        var self = this;
        var uniqueAnswerIds = new Array();

        function isInArray(value, array) {
            return array.indexOf(value) > -1;
        }

        wrapper.find(".draggable")
            .draggable({
                helper: "clone",
                revert: function () {
                    if ($(this).hasClass("drag-revert")) {
                        return true;
                    }
                },
                scroll: 'true'
            });

        wrapper.find(".droppable")
            .droppable({
                accept: ".draggable",
                tolerance: 'pointer',
                drop: function (e, ui) {
                    var answerId = $(ui.draggable).data("answerid");
                    var sortingIndex = $(ui.draggable).data("sortingindex");
                    var sentenceKey = $(ui.draggable).data("sentencekey");
                    var mockTestQuestionId = $(ui.draggable).data("mocktestquestionid");
                    var orderParagraphId = $(ui.draggable).data("orderparagraphid");
                    var sectionType = $(ui.draggable).data("sectiontype");
                    if ((uniqueAnswerIds.length === 0 || isInArray(answerId, uniqueAnswerIds) === false)) {
                        if ($(this).find(".remove-sentence").hasClass("hidden") &&
                            !$(this).hasClass("correct-answer")) {
                            var content = $(this);

                            $(this)
                                .find(".remove-sentence")
                                .click(function (e) {
                                    e.preventDefault();
                                    content.find(".sentence-text").html("");
                                    content.find(".remove-sentence").addClass("hidden");
                                    $("#draggable-" + $(this)[0].dataset["answerid"]).removeClass("hidden");
                                    var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                    uniqueAnswerIds.splice(index, 1);
                                    $(this).parents(".question-container").data("answerid", "");

                                    var totalEmptyAnswer = content.parents(".question-container").find(".sentence-text:empty").length;
                                    
                                    if (totalEmptyAnswer > 0) {
                                        setIsAnswered.callWithLog(self, false);
                                    } else {
                                        setIsAnswered.callWithLog(self, true);
                                    }
                                });
                            if ($(this).data("answerid") !== "") {
                                var index = uniqueAnswerIds.indexOf($(this).data("answerid"));
                                uniqueAnswerIds.splice(index, 1);
                            }
                            $(this).data("answerid", answerId);
                            $(this).data("sortingindex", sortingIndex);
                            $(this).data("sentencekey", sentenceKey);
                            $(this).data("mocktestquestionid", mockTestQuestionId);
                            $(this).data("orderparagraphid", orderParagraphId);
                            $(this).data("sectiontype", sectionType);
                            $(this).find(".sentence-text").html($(ui.draggable).html());
                            $(this).find(".remove-sentence").removeClass("hidden")
                                .attr("data-answerid", answerId);

                            $("#draggable-" + answerId).addClass("hidden");

                            uniqueAnswerIds.push($(this).data("answerid"));

                            var totalEmptyAnswer = content.parents(".question-container").find(".sentence-text:empty").length;

                            if (totalEmptyAnswer > 0) {
                                setIsAnswered.callWithLog(self, false);
                            } else {
                                setIsAnswered.callWithLog(self, true);
                            }

                            return $(ui.draggable).removeClass("drag-revert");
                        } else {
                            $("#draggable-" + answerId).removeClass("hidden");
                            return $(ui.draggable).addClass("drag-revert");
                        }
                    }
                }
            });
    }

    function initializeRadioButton(wrapper) {
        var self = this;
        var eventHandler = {
            radioButtonChange: function (e) {
                e.preventDefault();
                var isEnable = this.value !== null;

                setIsAnswered.callWithLog(self, isEnable);
                showNextButton.callWithLog(self, wrapper, isEnable);
            }
        };

        wrapper.find("input[type=radio]")
            .off("change")
            .on("change", eventHandler.radioButtonChange);

    }

    function setIsAnswered(isAnswered) {
        var self = this;
        var reviewQuestion = $("#review-question-" + self.CurrentWrapperId);
        if (isAnswered) {
            reviewQuestion.addClass("answered").removeClass("unanswered").html("Answered");
        } else {
            reviewQuestion.addClass("unanswered").removeClass("answered").html("Not Answered");
        }
    }

    function timeOut(wrapper) {
        var self = this;
        $(".multipleRecorderButton:not('.btn-danger')").each(function () {
            var btnEl = $(this);
            stopRecording.callWithLog(self, wrapper, btnEl);
        });
        stopAudio.callWithLog(self);
        clearInterval(self.TimerCountDown);
        self.IsTimerCounting = false;

        self.E2Logger.MockTestManualLog("TIMEOUT", $("#" + self.CurrentWrapperId));

        var timeOutMessage = $("#maintenanceForm-" + self.CurrentGroupIndex).data("timeout-message");

        var lastNextButton = wrapper.find(".mmt-wrapper.question:last-child").find(".next-btn");
        var submitButton = wrapper.find(".mmt-wrapper.question:last-child").find(".submit-btn");

        if (submitButton.length > 0) {
            if (wrapper.find(".submit-btn").length === 0) {
                wrapper.find(".section-btn").html(submitButton);
            }

            $(".submit-btn")
                .off("click")
                .on("click", function (e) {
                    e.preventDefault();
                    var form = $(e.currentTarget).parents("form");

                    saveAnswer.callWithLog(self, form);
                });
        }

        if (lastNextButton.length > 0) {
            wrapper.find('.section-btn').html(lastNextButton);
            wrapper.find('.next-btn').off("click").on('click', function () {
                var currentSection = $(this).data('current-section-name');
                var nextSection = $(this).data('target-section-name');

                goToSection.callWithLog(self, nextSection, currentSection);
            });
        }

        wrapper.find("*:not('.section-btn .btn')")
            .attr("disabled", "disabled")
            .addClass("disabled");

        wrapper
            .find('.draggable')
            .addClass("no-click");

        wrapper.find(".section-btn").removeClass("hidden");
        wrapper.find(".next-btn").removeClass("hidden");

        showInfoDialog(timeOutMessage);
    }

    function constructSubmitData(form) {
        var self = this;
        
        $(".droppable")
            .each(function () {
                var sectionKey = $(this).data("sentencekey");
                var questionId = $(this).data("orderparagraphid");
                var mockTestQuestionId = $(this).closest(".mmt-wrapper.question").data("id");
                var sectionType = $(this).closest(".mmt-wrapper.question").data("section-type");
                var answerId = $(this).data("answerid");
                var sortingIndexTarget = sectionKey.replace("Q", "");

                var input = form.find("input[name='MiniMockTest_" + sectionType +
                    "_" +
                    mockTestQuestionId +
                    "_" +
                    questionId +
                    "_" +
                    answerId +
                    "']");

                if (input.length) {
                    input.remove();
                }

                if (answerId !== undefined && answerId !== "") {
                    form.append('<input type="hidden" name="MiniMockTest_' + sectionType +
                        "_" +
                        mockTestQuestionId +
                        "_" +
                        questionId +
                        "_" +
                        answerId +
                        '" value="' +
                        sortingIndexTarget +
                        '" />');
                }
            });

        $("input:hidden")
            .not('[name*="MockTestId"]')
            .not('[name*="MiniMockTest"]')
            .not('[name*="SectionGroupCode"]')
            .remove();

        $(".disabled").removeAttr("disabled").removeClass("disabled");
    }


    function updateParentActivityPanel(response) {
        if (window.opener !== null && !window.opener.closed) {
            $("#btnStart", window.opener.document).remove();
            $("#MiniMockTestMessage", window.opener.document).html(response.Value.Message);
        }
    }

    function saveAnswer(form, onSuccess) {
        var self = this;
        var url = form.data("save-url");
        var isLastSection = form.find(".submit-btn", self.Element).length;
        stopAudio.callWithLog(self);
        constructSubmitData.callWithLog(self, form);

        var onError = function (data) {
            showInfoDialog(data.MessageErrorTextArray);
            clearInterval(self.TimerCountDown);
            clearInterval(self.QuestionCountDown);

            $("#maintenanceForm-" + self.CurrentGroupIndex)
                .find("*")
                .attr("disabled", "disabled")
                .addClass("disabled");
        };

        submitFormOverride("#" + form.prop("id"),
                url,
                function (data) {
                    if (data.IsSuccess) {
                        if (isLastSection) {
                            $("#toefl-test-container").parents(".page-main").removeClass("h-100").empty();
                            $("#SubmittedView").show();
                            $("#SubmittedMessage").html(data.Value.Message);

                            updateParentActivityPanel.callWithLog(self, data);
                        }

                        if (typeof onSuccess === "function") {
                            onSuccess();
                        }
                    }
                    else {
                        onError(data);
                    }
            });
    }

    function startCountdown(wrapper, btnEl) {
        var self = this;
        var timerNumber = 35;
        var duration = btnEl.data("duration");
        startRecording.callWithLog(self, wrapper, btnEl);

        if (duration !== 0) {
            timerNumber = parseInt(duration);
        }
        self.CountDown = setInterval(function () {
            writeDown.callWithLog(self, wrapper, timerNumber);
            timerNumber = timerNumber - 1;
            if (timerNumber < 0) {
                stopCountdown.callWithLog(self, wrapper, btnEl);
                var timesUpAudioSrc = btnEl.data("record-timesup-audio");
                playSound.callWithLog(self, btnEl, timesUpAudioSrc);
            }
        },
            1000);
    }

    function startRecording(wrapper, btnEl) {
        var self = this;

        setUploadAudioHandler.callWithLog(self, wrapper);
        stopBeforeRecordCounter.callWithLog(self);
        hideBeforeRecordLog.callWithLog(self, wrapper);

        btnEl.removeClass("btn-danger").removeClass("hidden")
            .html('<i class="fa fa-square fa-fw"></i> Stop')
            .unbind()
            .click(function () {
                stopCountdown.callWithLog(self, wrapper, btnEl);
            });

        wrapper.find(".record-instruction").removeClass("hidden").html("<span class='text-danger'>Now Recording</span> <br/>");

        initAndStartRecorder.callWithLog(self, wrapper);

    }

    function initAndStartRecorder(wrapper) {
        var self = this;

        var onRecordFinish = function (response) {
            stopCounter.callWithLog(self);
            hideLog.callWithLog(self, wrapper);
            var spinner = wrapper.find('[id^="spinnerImage"]');
            spinner.hide();

            if (response.IsSuccess === true) {
                wrapper.find("#submitSpeakingAnswerButton").removeClass("hidden");
                var inputName = 'MiniMockTest_' +
                    wrapper.data("section-type") +
                    "_" +
                    wrapper.data("id") +
                    "_" +
                    response.Value.QuestionId + "_" +
                    response.Value.AnswerId;

                var inputNamePattern = "MiniMockTest_" + wrapper.data("section-type") + "_" + wrapper.data("id");
                var existingInput = $('input[name^="' + inputNamePattern + '"]');
                if (existingInput.length === 0) {
                    existingInput.remove();
                    $("#maintenanceForm-" + self.CurrentGroupIndex).append('<input type="hidden" name="' +
                        inputName +
                        '" value="' +
                        response.Value.AnswerId +
                        '"/>');
                }

                if (wrapper.find(".multipleUploadButton").length > 0) {
                    var anyUnanswered = false;

                    wrapper.find("input[type=text]").each(function () {
                        var element = $(this);
                        if (element.val().trim() === "") {
                            anyUnanswered = true;
                            return;
                        }
                    });
                }

                var completeMessage = "<span class=\"record-completed-label\">" + self.TestContainer.data("record-completed-message") + "</span><br/>";
                wrapper.find(".uploadControlSection").html(completeMessage);
                showNextButton.callWithLog(self, wrapper, true);
            } else {
                var message = "";
                for (var i = 0; i < response.MessageTextArray.length; i++) {
                    message += response.MessageTextArray[i];
                }

                showErrorWithActionDialog(message,
                    function () {
                        wrapper.find(".upload-audio-manual").show();
                        wrapper.find("#uploadControlPanel").show();
                    });
            }
        };

        var onRecordError = function () {
            showManualUploadAudio.callWithLog(self, wrapper);
        };
        
        var recordingUrl = $("#maintenanceForm-" + self.CurrentGroupIndex).data("upload-recorder-file-url");
        recordingUrl += "?mockTestQuestionId=" + self.CurrentMockTestQuestionId;

        self.E2Recorder.Element = wrapper;
        self.E2Recorder.InitOnUploadRecorderFile(recordingUrl, null, onRecordFinish);
        self.E2Recorder.StartAudioRecording(onRecordError);
    }


    function showManualUploadAudio(wrapper) {
        wrapper.find("#recorderControlPanel").hide();
        wrapper.find(".recorderControlSection").hide();
        wrapper.find("#uploadControlPanel").show();
        wrapper.find(".uploadControlSection").show();
    }

    function uploadAudioFile(wrapper) {
        var self = this;
        var recordingUrl = $("#maintenanceForm-" + self.CurrentGroupIndex).data("upload-audio-file-url");
        recordingUrl += "?mockTestQuestionId=" + wrapper.data("id");

        var pauseTimer = function () {
            clearInterval(self.QuestionCountDown);
            clearInterval(self.TimerCountDown);
        };

        var onUploadCompleted = function () {
            showNextButton.callWithLog(self, wrapper, true);
        };

        customUploadAudioSpeakingFile(
            event,
            recordingUrl,
            pauseTimer,
            onUploadCompleted
            );
    }

    function setUploadAudioHandler(wrapper) {
        var self = this;
        self.CurrentMockTestQuestionId = wrapper.find("#recordButton").data("id");

        var recordingUrl = $("#maintenanceForm-" + self.CurrentGroupIndex).data("upload-recorder-file-url");
        recordingUrl += "?mockTestQuestionId=" + self.CurrentMockTestQuestionId;

        customUploadRecorderSpeakingFile(
            recordingUrl,
            function () { },
            function (response) {
                hideLog.callWithLog(self, wrapper);
                var spinner = wrapper.find('[id^="spinnerImage"]');
                spinner.hide();
                if (response.IsSuccess === true) {
                    wrapper.find("#submitSpeakingAnswerButton").removeClass("hidden");
                   
                    var inputName = 'MiniMockTest_' +
                        wrapper.data("section-type") +
                        "_" +
                        wrapper.data("id") +
                        "_" +
                        response.Value.QuestionId + "_" +
                        response.Value.AnswerId;

                    var inputNamePattern = "MiniMockTest_" + wrapper.data("section-type") + "_" + wrapper.data("id");
                    var existingInput = $('input[name^="' + inputNamePattern + '"]');
                    if (existingInput.length === 0) {
                        existingInput.remove();
                        $("#maintenanceForm-" + self.CurrentGroupIndex).append('<input type="hidden" name="' +
                            inputName +
                            '" value="' +
                            response.Value.AnswerId +
                            '"/>');
                    }

                } else {
                    var message = "";
                    for (var i = 0; i < response.MessageTextArray.length; i++) {
                        message += response.MessageTextArray[i];
                    }

                    showErrorWithActionDialog(message,
                        function () {
                            showManualUploadAudio.callWithLog(self, wrapper);
                        });
                }
            });
    }

    function stopCountdown(wrapper, btnEl) {
        var self = this;
        stopCounter.callWithLog(self);
        stopRecording.callWithLog(self, wrapper, btnEl);

        wrapper.find('[id^="spinnerImage"]').show();
        wrapper.find('[id^="recordingLog"]').html("Processing, please wait...");
    }

    function stopCounter() {
        var self = this;
        if (self.CountDown !== undefined) {
            clearInterval(self.CountDown);
        }
    }

    function stopRecording(wrapper, btnEl) {
        var self = this;

        self.E2Logger.MockTestManualLog("STOP_RECORD", wrapper, btnEl);

        setUploadAudioHandler.callWithLog(self, btnEl);
        self.E2Recorder.StopAudioRecording();

        btnEl.unbind()
            .click(function () {
                return false;
            });

        btnEl.addClass("hidden");
        var completeMessage = "<span class=\"record-completed-label\">" + self.TestContainer.data("record-completed-message") + "</span><br/>";
        wrapper.find(".record-instruction").removeClass("hidden").html(completeMessage);
    }


    // Constructor
    var studentToeflMiniMockTestView = function (element) {
        this.Element = element;
        this.TestContainer = $("#toefl-test-container");
        this.TimerCountDown = null; // timer countdown
        this.TimerInterval = null;
        this.CurrentGroupIndex = null;
        this.CurrentWrapperId = null;
        this.AudioCountDown = null; // audio countdown
        this.IsAudioPlayed = null;
        this.IsTimerCounting = false;
        this.BeforePlayAudioCountDown = null;
        this.CountDown = null; // recording countdown
        this.InstructionCountDown = null; // instruction countdown
        this.QuestionInterval = null;
        this.IsQuestionTimerCounting = null;
        this.E2Recorder = null;
        this.E2Logger = new E2Logger();
    };

    studentToeflMiniMockTestView.prototype = {
        constructor: studentToeflMiniMockTestView,
        Register: function () {
            var self = this;

            self.E2Logger.InitializeMockTestLogger(self.Element);
            self.BindEventHandler();
            self.Initialize();
        },
        BindEventHandler: function () {
            var self = this;

            initEventHandler.callWithLog(self);
        },
        Initialize: function () {
            var self = this;

            var currentGroupSection = $('div[class^="wrapper-section"]:not(.mmt-hide-panel)');
            self.CurrentGroupIndex = currentGroupSection.data("group-index");
            self.CurrentWrapperId = currentGroupSection.data("group-name");

            $(".mmt-wrapper")
                .each(function () {
                    var wrapper = $(this);
                    initializeDragAndDrop.callWithLog(self, wrapper);
                    initializeRadioButton.callWithLog(self, wrapper);
                });

            $(".wordCount").html("0");

            $("textarea[id^='SummarizeWritingAnswer']").summernote({
                toolbar: null,
                height: 250,
                spellCheck: false,
                disableGrammar: true
            });

            $("textarea[id^='SummarizeWritingAnswer']").summernote('enable');

            prepareTimerForSection.callWithLog(self, currentGroupSection);
            self.E2Recorder = new E2Recorder();
            self.E2Recorder.Register();
            self.E2Recorder.InitAudio();
        }
    };

    // Export javascript class into window environment
    window.StudentToeflMiniMockTestView = studentToeflMiniMockTestView;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    function generateComment() {
        $(".panel-section").each(function () {
            var comment = "";
            $(this).find(".form-group").each(function () {
                var selectedInput = $(this).find("input[type=radio]:checked");
                if (selectedInput.length) {
                    var currentComment = selectedInput[0].dataset["comment"];
                    if (currentComment !== "")
                        comment += "<p>" + currentComment + "</p>";

                }
            });
            $(this).find("[id^=comment]").html(comment);
        });
    }

    // Constructor
    var studentToeflMiniMockTestViewDetail = function (element) {
        this.Element = element;
    };

    studentToeflMiniMockTestViewDetail.prototype = {
        constructor: studentToeflMiniMockTestViewDetail,
        Register: function () {
            var self = this;

            generateComment.call(self);

            $(".closeButton").click(function () {
                window.close();
            });
        }
    };

    // Export javascript class into window environment
    window.StudentToeflMiniMockTestViewDetail = studentToeflMiniMockTestViewDetail;
})(jQuery, window);;
(function ($, window) {
    "use strict";

    // Constructor
    var studentToeflMiniMockTestViewDetailV2 = function (element) {
        this.Element = element;
    };

    studentToeflMiniMockTestViewDetailV2.prototype = {
        constructor: studentToeflMiniMockTestViewDetailV2,
        Register: function () {
            var self = this;

            $(".closeButton").click(function () {
                window.close();
            });
        }
    };

    // Export javascript class into window environment
    window.StudentToeflMiniMockTestViewDetailV2 = studentToeflMiniMockTestViewDetailV2;
})(jQuery, window);;
var StudentWebinarDetailWebinarEvent = function (element) {
    this.Element = element;
    this.Caller = null;
    this.Form = $("#webinarEventForm");
}

StudentWebinarDetailWebinarEvent.prototype = {
    constructor: StudentWebinarDetailWebinarEvent,
    Register: function () {
        var app = this;

        $("#btnRegister", app.Element).off("click").click(function () {
            var postData = {
                webinarEventId: $("#WebinarEventId").val()
            };

            var submitUrl = app.Form.data("register-webinar-url");
            var homeIndex = new StudentHomeIndex();

            advancedSubmitData(postData,
                submitUrl,
                function (data) {
                    showInformation(data.Value.Message);
                    homeIndex.GenerateCalendarEventByMonth();
                    $("#webinarEventDialog").modal("hide");
                },
                function (data) {
                    hideProcessingDialog();

                    if (data.Value !== null && data.Value !== undefined) {
                        showErrorWithActionDialog(data.Value.MessageWithLink,
                            function () {
                                homeIndex.GenerateCalendarData();
                                $("#webinarEventDialog").modal("hide");
                            });
                    } else {
                        advancedErrorPostResponse(data, "modal-webinar-error");
                    }
                });
        });

        $(".webinar-ajax-menu").click(function () {
            event.preventDefault();

            var contentUrl = $(this).data('url');

            processApplicationContent(contentUrl, "GET", function (contentData) {
                if (contentData.indexOf('UNAUTHORIZED') >= 0) {
                    window.location.href = "/Account/Login";
                } else {
                    $('#mainUserContent').html(contentData);

                    var helper = new Helper();
                    var namespace = helper.CreateNameSpaceFromURL(contentUrl);
                    var apps = new Application($('#mainUserContent'), namespace);
                    apps.Register();
                }
            });
        });

        $("#btnCancelRegister").click(function () {
            var cancelConfirmationMessage = app.Form.data("cancel-webinar-message");
            var submitUrl = app.Form.data("cancel-webinar-url");
            var postData = {
                webinarEventId: $("#WebinarEventId").val()
            };
            var homeIndex = new StudentHomeIndex();

            submitDataWithAdvancedConfirmDialog(cancelConfirmationMessage,
                postData,
                submitUrl,
                function (data) {
                    showInformation(data.Value.Message);
                    homeIndex.GenerateCalendarEventByMonth();
                    $("#webinarEventDialog").modal("hide");
                },
                function (errorResult) {
                    hideProcessingDialog();
                    advancedErrorPostResponse(errorResult, "modal-webinar-error");
                });
        });

        $("#btnUpgrade").click(function () {
            var upgradeUrl = app.Form.data("upgrade-account-url");

            window.open(upgradeUrl, '_self');
        });
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    }
};
var StudentWebinarIndex = function (element) {
    this.Element = element;
    this.Caller = null;
    this.UpcomingGrid = $("#gridUpcomingWebinar");
    this.RegisteredGrid = $("#gridRegisteredWebinar");
}

StudentWebinarIndex.prototype = {
    constructor: StudentWebinarIndex,
    Register: function () {
        var app = this;

        app.LoadUpcomingGrid(app.UpcomingGrid);
        app.LoadRegisteredGrid(app.RegisteredGrid);

        $(".webinar-ajax-menu").click(function () {

            event.preventDefault();

            var contentUrl = $(this).data('url');

            processApplicationContent(contentUrl, "GET", function (contentData) {
                if (contentData.indexOf('UNAUTHORIZED') >= 0) {
                    window.location.href = "/Account/Login";
                } else {
                    $('#mainUserContent').html(contentData);

                    var helper = new Helper();
                    var namespace = helper.CreateNameSpaceFromURL(contentUrl);
                    var apps = new Application($('#mainUserContent'), namespace);
                    apps.Register();
                }
            });

        });

    },

    LoadUpcomingGrid: function (grid) {
        var app = this;

        $("#errorPane").hide();
        $("#errorPane").empty();

        grid.bootgrid({
            ajax: true,
            sorting: false,
            templates: {
                search: ""
            },
            post: function () {
            },
            url: grid.data("url"),
            formatters: {
                "Action": function (column, row) {
                    if (row.IsUpgradeNeeded) {
                        return '<a href="javascript:void(0)" ' +
                            'class="upgradeAccount" ><i class="fa fa-angle-double-up text-primary" aria-hidden="true" data-toggle="tooltip" data-placement="top" title="" data-original-title="Upgrade"></i> Upgrade</a>';
                    }
                    return '<a href="javascript:void(0)" ' +
                        'class="registerWebinar" ' +
                        'data-id="' + row.Id + '" ><i class="fa fa-sign-in text-primary" aria-hidden="true" data-toggle="tooltip" data-placement="top" title="" data-original-title="Register for this event"></i> Register</a>';

                }
            }
        }).on("loaded.rs.jquery.bootgrid", function () {

            $('[data-toggle="tooltip"]').tooltip();

            $(".registerWebinar").click(function () {

                var webinarEventId = $(this).data("id");

                var submitUrl = grid.data("register-webinar-url");
                var postData = {
                    webinarEventId: webinarEventId
                };

                advancedSubmitData(postData, submitUrl, function (data) {

                    showInformation(data.Value.Message);
                    app.ReloadGrid();

                }, function (data) {

                    hideProcessingDialog();
                    advancedErrorPostResponse(data, "upcoming-error-pane");

                });

            });

            $(".upgradeAccount").click(function () {
                var upgradeUrl = $('#gridUpcomingWebinar').data("upgrade-account-url");

                window.open(upgradeUrl, '_self');
            });

        });
    },

    LoadRegisteredGrid: function (grid) {
        var app = this;

        $("#errorPane").hide();
        $("#errorPane").empty();

        grid.bootgrid({
            ajax: true,
            sorting: false,
            templates: {
                search: ""
            },
            post: function () {
            },
            url: grid.data("url"),
            formatters: {
                "Action": function (column, row) {

                    if (row.IsEnableCancel) {
                        return '<a href="javascript:void(0)" ' +
                            'data-id="' + row.Id + '" ' +
                            'class="cancelRegister"><i class="fa fa-times-circle text-danger" aria-hidden="true" data-toggle="tooltip" data-placement="top" title="" data-original-title="Cancel Registration"></i> Cancel</a>';
                    }
                }
            }
        }).on("loaded.rs.jquery.bootgrid", function () {

            $('[data-toggle="tooltip"]').tooltip();

            $(".cancelRegister").click(function () {

                var webinarEventId = $(this).data("id");
                var cancelConfirmationMessage = grid.data("cancel-confirmation-message");
                var successCancelMessage = grid.data("cancel-success-message");
                var submitUrl = grid.data("cancel-url");
                var postData = {
                    webinarEventId: webinarEventId
                };

                submitDataWithAdvancedConfirmDialog(cancelConfirmationMessage, postData,
                    submitUrl,
                    function () {
                        showInformation(successCancelMessage);
                        app.ReloadGrid();
                    },
                    function (errorResult) {
                        hideProcessingDialog();
                        advancedErrorPostResponse(errorResult, "registered-error-pane");
                    });

            });

        });
    },

    ReloadGrid: function() {

        this.UpcomingGrid.bootgrid("reload");
        this.RegisteredGrid.bootgrid("reload");

    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    }
};
var StudentWebinarShowOccurenceDialog = function (element) {
    this.Element = element;
    this.Caller = null;
    this.Grid = $("#gridWebinarEvent");
}

StudentWebinarShowOccurenceDialog.prototype = {
    constructor: StudentWebinarShowOccurenceDialog,
    Register: function () {
        var app = this;

        app.LoadGrid(app.Grid);

        $("#gridOccurenceDialog").on("hidden.bs.modal", function (e) {
            app.Grid.bootgrid("destroy");
            hideProcessingDialog();
        });

    },

    LoadGrid: function (grid) {

        $("#errorPane").hide();
        $("#errorPane").empty();

        var zoomWebinarId = $("#ZoomWebinarId").val();

        grid.bootgrid({
            ajax: true,
            sorting: false,
            templates: {
                search: ""
            },
            post: function () {
                return {
                    zoomWebinarId: zoomWebinarId
                }
            },
            url: grid.data("url"),
            formatters: {
                "Action": function (column, row) {

                    if (row.IsRegistered) {
                        return '<a href="javascript:void(0)" ' +
                            'data-zoom-webinar-id="' + zoomWebinarId + '" ' +
                            'data-occurence-id="' + row.OccurenceId + '" ' +
                            'class="cancelOccurenceWebinarLink"><i class="fa fa-times-circle text-danger" aria-hidden="true" data-toggle="tooltip" data-placement="top" title="" data-original-title="Cancel Registration"></i></a>';
                    }

                    return '<a href="javascript:void(0)" ' +
                        'class="occurenceRegister" ' +
                        'data-occurence-id="' + row.OccurenceId + '"><i class="fa fa-sign-in text-primary" aria-hidden="true" data-toggle="tooltip" data-placement="top" title="" data-original-title="Register for this event"></i></a>';

                }
            }
        }).on("loaded.rs.jquery.bootgrid", function () {

            $('[data-toggle="tooltip"]').tooltip();

            $(".cancelOccurenceWebinarLink").click(function () {

                var webinarId = $("#WebinarScheduleId").val();
                var occurenceId = $(this).data("occurence-id");
                var cancelConfirmationMessage = grid.data("cancel-confirmation-message");
                var successCancelMessage = grid.data("cancel-success-message");
                var submitUrl = grid.data("cancel-url");
                var postData = {
                    webinarScheduleId: webinarId,
                    zoomWebinarId: zoomWebinarId,
                    occurenceId: occurenceId
                };

                submitDataWithAdvancedConfirmDialog(cancelConfirmationMessage, postData,
                    submitUrl,
                    function (data) {
                        var webinar = [];

                        webinar[0] = {
                            Id: data.Value.Id,
                            ZoomWebinarId: data.Value.ZoomWebinarId,
                            IsRecurrenceWebinar: data.Value.IsRecurrenceWebinar,
                            IsRegistered: data.Value.IsRegistered
                        };

                        showInformation(successCancelMessage);
                        $("#gridWebinarEvent").bootgrid("reload");
                        backdropModalControl();
                        window.studentHome.UpdateCurrentWebinarRegistrantStatus(webinar);
                    },
                    function (errorResult) {
                        hideProcessingDialog();
                        advancedErrorPostResponse(errorResult, "occurence-error-pane");
                        backdropModalControl();
                    });

            });

            $(".occurenceRegister").click(function() {

                var occurenceId = $(this).data("occurence-id");

                var submitUrl = grid.data("register-occurence-url");
                var postData = {
                    zoomWebinarId: zoomWebinarId,
                    occurenceId: occurenceId
                };

                advancedSubmitData(postData, submitUrl, function (data) {

                    showInformation(data.Value.Message);
                    $("#gridWebinarEvent").bootgrid("reload");
                    backdropModalControl();
                    window.studentHome.UpdateCurrentWebinarRegistrantStatus(data.Value.WebinarSchedules);

                }, function (data) {

                    hideProcessingDialog();
                    advancedErrorPostResponse(data, "occurence-error-pane");
                    backdropModalControl();

                });

            });

        });
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    }
};
var StudentWhiteboardIndex = function (element) {
    this.Element = element;
    this.RowCount = [25];
}

StudentWhiteboardIndex.prototype = {
    constructor: StudentWhiteboardIndex,
    Register: function() {
        var self = this;

        var urlGetActiveGrid = $('#whiteboardTab', self.Element).data('url-getactivegrid');
        var urlGetArchivedGrid = $('#whiteboardTab', self.Element).data('url-getarchivedgrid');
        var urlCreateTopic = $('#whiteboardTab', self.Element).data('url-createtopic');
        var urlViewMessage = $('#whiteboardTab', self.Element).data('url-viewmessage');
        var urlActivateTopic = $('#whiteboardTab', self.Element).data('url-activatetopic');
        var urlArchiveTopic = $('#whiteboardTab', self.Element).data('url-archivetopic');

        var activateMessageConfirmation = $('#whiteboardTab', self.Element).data('message-activateconfirmation');
        var archiveMessageConfirmation = $('#whiteboardTab', self.Element).data('message-archiveconfirmation');

        $(document).ready(function () {
            $('#whiteboardTab a').click(function () {
                $("#viewConversation").empty();
            });
        });

        $("#gridActiveTopic").bootgrid({
            ajax: true,
            templates: {
                search: ''
            },
            sortable: false,
            rowCount: self.RowCount,
            post: function () { },
            statusMapping: {
                0: '',
                1: 'warning'
            },
            url: urlGetActiveGrid,
            formatters: {
                "SenderType": function (column, row) {
                    if (row.SenderPackageType === "") {
                        return "Teacher";
                    }

                    return row.SenderPackageType;
                },
                "ActiveTopic": function (column, row) {
                    var message = '<a href="#" class="activeTopicNameLink" id=' + row.Id + '>' + row.Title + '</a>';

                    var envelopeIcon = '<i class="fa fa-envelope-open-o" aria-hidden="true"></i>';
                    if (row.IsNewMessage) {
                        envelopeIcon = '<i class="fa fa-envelope-o" aria-hidden="true"></i>';
                    }

                    var lockedIcon = '';
                    if (row.IsDisableReply) {
                        lockedIcon = '<i class="fa fa-lock" aria-hidden="true"></i>';
                    }

                    return envelopeIcon + ' ' + lockedIcon + ' ' + message;
                },
                "ActiveAction": function (column, row) {
                    return '<a href="#" class="archivedTopicLink" data-topic-id="' + row.Id + '" data-toggle="tooltip" data-placement="top" title="Archive Topic"><i class="fa fa-archive" aria-hidden="true"></i></a>';
                }
            }
        })
        .on("loaded.rs.jquery.bootgrid", function () {
            $('[data-toggle="tooltip"]').tooltip();
            $('.pagination li[class^="page"]').remove();
            $('.pagination li[class^="first"]').remove();
            $('.pagination li[class^="last"]').remove();
            $('.pagination li.next a').text('next');
            $('.pagination li.prev a').text('prev');

            $('.command-add').on("click", function () {

                var maintenanceDiv = $('#viewConversation');
                var url = urlCreateTopic;

                showMaintenancePane(url, function (data) {
                    maintenanceDiv.html(data);

                    var helper = new Helper();
                    var namespace = helper.CreateNameSpaceFromURL(url);
                    var apps = new Application(self.Element, namespace);
                    apps.RegisterWithCaller(self);

                    scrollToElement("viewConversation");
                });

            });

            $('.activeTopicNameLink').on("click", function (e) {
                e.preventDefault();

                var maintenanceDiv = $('#viewConversation');
                var url = urlViewMessage;
                url += '?topicId=' + $(this).attr('id');
                url += '&isFromArchivedGrid=false';

                showMaintenancePane(url, function (data) {
                    self.RefreshGrid();
                    maintenanceDiv.html(data);

                    var helper = new Helper();
                    var namespace = helper.CreateNameSpaceFromURL(url);
                    var apps = new Application(self.Element, namespace);
                    apps.Register();

                    scrollToElement("viewConversation");
                });

            });

            $('.archivedTopicLink').on("click", function (e) {
                e.preventDefault();

                var url = urlArchiveTopic;
                var topicId = $(this).data('topic-id');

                var postData = {
                    topicId: topicId
                };

                showConfirmationDialog(archiveMessageConfirmation, function () {
                    submitData(postData, url, function () {
                        self.RefreshGrid();
                    });
                });
            });

        });

        $("#gridArchivedTopic").bootgrid({
            ajax: true,
            templates: {
                search: ''
            },
            sortable: false,
            rowCount: self.RowCount,
            post: function () { },
            url: urlGetArchivedGrid,
            formatters: {
                "SenderType": function (column, row) {
                    if (row.SenderPackageType === "") {
                        return "Teacher";
                    }

                    return row.SenderPackageType;
                },
                "ArchivedTopic": function (column, row) {
                    var message = '<a href="#" class="archivedTopicNameLink" id=' + row.Id + '>' + row.Title + '</a>';

                    var envelopeIcon = '<i class="fa fa-envelope-open-o" aria-hidden="true"></i>';
                    if (row.IsNewMessage) {
                        envelopeIcon = '<i class="fa fa-envelope-o" aria-hidden="true"></i>';
                    }

                    var lockedIcon = '';
                    if (row.IsDisableReply) {
                        lockedIcon = '<i class="fa fa-lock" aria-hidden="true"></i>';
                    }

                    return envelopeIcon + ' ' + lockedIcon + ' ' + message;
                },
                "ArchivedAction": function (column, row) {
                    return '<a href="#" class="activatedTopicLink" data-topic-id="' + row.Id + '" data-toggle="tooltip" data-placement="top" title="Activate Topic"><i class="fa fa-check-square" aria-hidden="true"></i></a>';
                }
            }
        })
        .on("loaded.rs.jquery.bootgrid", function () {
            $('[data-toggle="tooltip"]').tooltip();
            $('.pagination li[class^="page"]').remove();
            $('.pagination li[class^="first"]').remove();
            $('.pagination li[class^="last"]').remove();
            $('.pagination li.next a').text('next');
            $('.pagination li.prev a').text('prev');

            $('.archivedTopicNameLink').on("click", function (e) {
                e.preventDefault();

                var maintenanceDiv = $('#viewConversation');
                var url = urlViewMessage;
                url += '?topicId=' + $(this).attr('id');
                url += '&isFromArchivedGrid=true';

                showMaintenancePane(url, function (data) {
                    self.RefreshGrid();
                    maintenanceDiv.html(data);

                    var helper = new Helper();
                    var namespace = helper.CreateNameSpaceFromURL(url);
                    var apps = new Application(self.Element, namespace);
                    apps.Register();

                    scrollToElement("viewConversation");
                });

            });

            $('.activatedTopicLink').on("click", function (e) {
                e.preventDefault();

                var url = urlActivateTopic;
                var topicId = $(this).data('topic-id');

                var postData = {
                    topicId: topicId
                };

                showConfirmationDialog(activateMessageConfirmation, function () {
                    submitData(postData, url, function () {
                        self.RefreshGrid();
                    });
                });
            });
        });
    },

    RefreshGrid: function() {
        $("#gridActiveTopic").bootgrid('reload');
        $("#gridArchivedTopic").bootgrid('reload');
        $("#viewConversation").empty();
    }
};
var StudentWhiteboardCreateStudentTopic = function (element) {
    this.Element = element;
    this.Caller = null;
}

StudentWhiteboardCreateStudentTopic.prototype = {
    constructor: StudentWhiteboardCreateStudentTopic,
    Register: function () {
        var self = this;

        var urlCreate = $('#maintenanceForm', self.Element).data('url-create');
        var savedInfoMessage = $('#maintenanceForm', self.Element).data('message-datasaved');

        $("#maintenanceForm")
            .validate({
                rules: {
                    Name: {
                        maxlength: 100
                    }
                },
                highlight: function (element) {
                    $(element).closest('.form-group').addClass('has-error');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-group').removeClass('has-error');
                }
            });

        $('#createButton')
            .click(function () {
                submitForm('#maintenanceForm',
                    urlCreate,
                    function (data) {
                        showInformation(savedInfoMessage);
                        self.Caller.RefreshGrid();
                    });
            });

        $('#cancelButton')
            .click(function () {
                $('#viewConversation').empty();
            });
    },
    SetupCaller: function(caller) {
        this.Caller = caller;
    }
};
var StudentWhiteboardViewMessage = function (element) {
    this.Element = element;
    this.Caller = null;
}

StudentWhiteboardViewMessage.prototype = {
    constructor: StudentWhiteboardViewMessage,
    Register: function () {
        var self = this;

        var urlSend = $('#maintenanceForm', self.Element).data('url-send');
        var urlSendArchive = $('#maintenanceForm', self.Element).data('url-sendarchive');
        var urlActivateConversation = $('#maintenanceForm', self.Element).data('url-activateconversation');
        var urlArchiveConversation = $('#maintenanceForm', self.Element).data('url-archiveconversation');

        var activateMessageConfirmation = $('#maintenanceForm', self.Element).data('message-activateconfirmation');
        var archiveMessageConfirmation = $('#maintenanceForm', self.Element).data('message-archiveconfirmation');

        var imageLoader = document.getElementById('WhiteboardAttachment');
        if (imageLoader != null) {
            imageLoader.addEventListener('change', readImage, false);
        }

        var messageErrorAttachment = $('#maintenanceForm', self.Element).data('message-errorattachment');
        var messageErrorFileSize = $('#maintenanceForm', self.Element).data('message-errorfilesize');

        function readImage() {
            var selectedImage = document.getElementById('WhiteboardAttachment');
            var fileExtension = ['png', 'jpg', 'jpeg', 'mp3', 'mp4', 'pdf'];
            var filesize = document.getElementById('WhiteboardAttachment').files[0].size;
            if ($.inArray($(this).val().split('.').pop().toLowerCase(), fileExtension) === -1) {
                showErrorDialog(messageErrorAttachment);
                selectedImage.value = "";
                return false;
            }
            else if (((filesize / 1024) / 1024) > 10) {
                showErrorDialog(messageErrorFileSize);
                selectedImage.value = "";
                return false;
            }

            return true;
        }

        var maintenanceDiv = $('#viewConversation');

        $("#maintenanceForm")
            .validate({
                highlight: function (element) {
                    $(element).closest('.form-group').addClass('has-error');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-group').removeClass('has-error');
                }
            });

        $('#sendAndArchiveButton').click(function () {
            var isValid = $("#maintenanceForm").valid();
            if (!isValid) {
                return false;
            }

            var postData = new FormData();
            postData.append('TopicId', $('#TopicId').val());
            postData.append('Message', $('#Message').val());

            var fileInput = $('#WhiteboardAttachment')[0];
            if (fileInput.files) {

                for (var i = 0; i < fileInput.files.length; i++) {
                    postData.append("whiteboardAttachments", fileInput.files[i]);
                }
            }

            submitDataWithFile(postData, urlSendArchive, function() {
                self.RefreshMessageGrid();
                maintenanceDiv.empty();
            });

            return false;
        });

        $('#sendButton').click(function () {
            var isValid = $("#maintenanceForm").valid();
            if (!isValid) {
                return false;
            }

            var postData = new FormData();
            postData.append('TopicId', $('#TopicId').val());
            postData.append('Message', $('#Message').val());

            var fileInput = $('#WhiteboardAttachment')[0];
            if (fileInput.files) {

                for (var i = 0; i < fileInput.files.length; i++) {
                    postData.append("whiteboardAttachments", fileInput.files[i]);
                }
            }

            submitDataWithFile(postData, urlSend, function () {
                self.RefreshMessageGrid();
                self.RefreshConversationPanel();
            });

            return false;
        });

        $('#cancelMessageButton').click(function () {
            maintenanceDiv.empty();
        });

        $('#archivedMessageButton').on("click", function () {
            var topicId = $('#TopicId').val();
            var url = urlArchiveConversation;

            var postData = {
                topicId: topicId
            };

            showConfirmationDialog(archiveMessageConfirmation, function () {
                submitData(postData, url, function () {
                    self.RefreshMessageGrid();
                    maintenanceDiv.empty();
                });
            });
        });

        $('#activateMessageButton').on("click", function () {
            var topicId = $('#TopicId').val();
            var url = urlActivateConversation;

            var postData = {
                topicId: topicId
            };

            showConfirmationDialog(activateMessageConfirmation, function () {
                submitData(postData, url, function () {
                    self.RefreshMessageGrid();
                    maintenanceDiv.empty();
                });
            });
        });

        $('#WhiteboardAttachment').change(function () {
            var fileInput = $('#WhiteboardAttachment')[0];
            if (fileInput.files) {
                var fileName = [];
                for (var i = 0; i < fileInput.files.length; i++) {
                    fileName[i] = fileInput.files[i].name;
                }

                $('#fileUploadName').html(fileName.join(", "));
            }
        });

    },

    RefreshConversationPanel: function () {
        var self = this;
        var maintenanceDiv = $('#viewConversation');

        var url = $('#maintenanceForm', self.Element).data('url-viewmessage');;
        url += '?topicId=' + $('#TopicId').val();
        url += '&isFromArchivedGrid=false';

        showMaintenancePane(url, function (data) {
            maintenanceDiv.html(data);

            var helper = new Helper();
            var namespace = helper.CreateNameSpaceFromURL(url);
            var apps = new Application(self.Element, namespace);
            apps.RegisterWithCaller(self);

            scrollToElement("viewConversation");
        });
    },

    RefreshMessageGrid: function () {
        $('#gridActiveTopic').bootgrid('reload');
        $('#gridArchivedTopic').bootgrid('reload');
    },

    SetupCaller: function (caller) {
        this.Caller = caller;
    }
};
var StudentWhiteboardViewMessageDialog = function (element) {
    this.Element = element;
    this.Caller = null;
}

StudentWhiteboardViewMessageDialog.prototype = {
    constructor: StudentWhiteboardViewMessageDialog,
    Register: function () {
        var self = this;

        var imageLoader = document.getElementById('WhiteboardAttachment');
        if (imageLoader != null) {
            imageLoader.addEventListener('change', readImage, false);
        }

        function readImage() {
            var messageErrorAttachment = $("#mainPanel", self.Element).data('message-errorattachment');
            var messageErrorFileSize = $('#mainPanel', self.Element).data('message-errorfilesize');
            var selectedImage = document.getElementById('WhiteboardAttachment');
            var fileExtension = ['png', 'jpg', 'jpeg', 'mp3', 'mp4', 'pdf'];
            var filesize = document.getElementById('WhiteboardAttachment').files[0].size;
            if ($.inArray($(this).val().split('.').pop().toLowerCase(), fileExtension) === -1) {
                showErrorDialog(messageErrorAttachment);
                selectedImage.value = "";
                return false;
            }
            else if (((filesize / 1024) / 1024) > 10) {
                showErrorDialog(messageErrorFileSize);
                selectedImage.value = "";
                return false;
            }
        };

        $("#maintenanceForm")
            .validate({
                highlight: function (element) {
                    $(element).closest('.form-group').addClass('has-error');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-group').removeClass('has-error');
                }
            });

        $('#sendAndArchiveButton').click(function () {
            var isValid = $("#maintenanceForm").valid();
            if (!isValid) {
                return false;
            }

            var postData = new FormData();
            postData.append('TopicId', $('#TopicId').val());
            postData.append('Message', $('#Message').val());

            var fileInput = $('#WhiteboardAttachment')[0];
            if (fileInput.files) {

                for (var i = 0; i < fileInput.files.length; i++) {
                    postData.append("whiteboardAttachments", fileInput.files[i]);
                }
            }

            var url = $('#mainPanel', self.Element).data('url-sendarchive');
            showProcessingDialog();
            $.ajax({
                cache: false,
                type: "POST",
                url: url,
                data: postData,
                processData: false,
                contentType: false,
                success: function (data) {
                    hideProcessingDialog();
                    if (data.IsSuccess) {
                        refreshWhiteboardPanel();
                    } else {
                        processErrorPostResponse(data);

                        return false;
                    }

                    return false;
                },
                error: function () {
                    alert("Error when sending request...");
                    hideProcessingDialog();
                    return false;
                }
            });

            return false;
        });

        $('#sendButton').click(function () {
            var isValid = $("#maintenanceForm").valid();
            if (!isValid) {
                return false;
            }

            var postData = new FormData();
            postData.append('TopicId', $('#TopicId').val());
            postData.append('Message', $('#Message').val());

            var fileInput = $('#WhiteboardAttachment')[0];
            if (fileInput.files) {

                for (var i = 0; i < fileInput.files.length; i++) {
                    postData.append("whiteboardAttachments", fileInput.files[i]);
                }
            }

            var url = $('#mainPanel', self.Element).data('url-send');
            showProcessingDialog();
            $.ajax({
                cache: false,
                type: "POST",
                url: url,
                data: postData,
                processData: false,
                contentType: false,
                success: function (data) {
                    hideProcessingDialog();
                    if (data.IsSuccess) {
                        refreshWhiteboardPanel();
                    } else {
                        hideProcessingDialog();
                        processErrorPostResponse(data);

                        return false;
                    }

                    return false;
                },
                error: function () {
                    alert("Error when sending request...");
                    hideProcessingDialog();
                    return false;
                }
            });

            return false;
        });

        $('#archivedMessageButton').on("click", function () {
            var topicId = $('#TopicId').val();
            var url = $('#mainPanel', self.Element).data('url-archivemessage');
            var confirmationMessage = $('#mainPanel', self.Element).data('message-archiveconfirmation');

            var postData = {
                topicId: topicId
            };

            showConfirmationDialog(confirmationMessage, function () {
                submitData(postData, url, function (data) {
                    refreshWhiteboardPanel();
                });
            });
        });

        $('#activateMessageButton').on("click", function () {
            var topicId = $('#TopicId').val();
            var url = $('#mainPanel', self.Element).data('url-activateconfirmation');
            var confirmationMessage = $('#mainPanel', self.Element).data('message-activateconfirmation');

            var postData = {
                topicId: topicId
            };

            showConfirmationDialog(confirmationMessage, function () {
                submitData(postData, url, function (data) {
                    refreshWhiteboardPanel();
                });
            });
        });

        $('#WhiteboardAttachment').change(function () {
            var fileInput = $('#WhiteboardAttachment')[0];
            if (fileInput.files) {
                var fileName = [];
                for (var i = 0; i < fileInput.files.length; i++) {
                    fileName[i] = fileInput.files[i].name;
                }

                $('#fileUploadName').html(fileName.join(", "));
            }
        });

        $('#cancelMessageButton').click(function () {
            refreshWhiteboardPanel();
        });

        function refreshWhiteboardPanel() {
            $('#replyWhiteboardDialog').modal('hide');
            var studentHome = new StudentHomeIndex();
            studentHome.GetNewWhiteboardMessage();
        }
    }
};
(function ($, window) {
    "use strict";

    var studentWritingIntensiveLandingPageIndex = function (element) {
        this.Element = element;
    };

    studentWritingIntensiveLandingPageIndex.prototype = {
        constructor: studentWritingIntensiveLandingPageIndex,
        Register: function () {

        },

        SetupCaller: function (caller) {
            this.Caller = caller;
        }
    };

    window.StudentWritingIntensiveLandingPageIndex = studentWritingIntensiveLandingPageIndex;
})(jQuery, window);;
